"""
To start Topographica, run './topographica' and not this file.  This
file is used to support that file.

./topographica is generated by the Makefile so we keep as much code
outside so the Makefile remains readable, and changes are easier to
implement.

$Id$
"""
from getopt import getopt,GetoptError
import os

### JABHACKALERT!
### 
### This file will need to be rewritten nearly entirely, probably by
### me (jbednar), to be simpler and have the necessary features.  It's
### clear that there's no reason to keep it even partially compatible
### with python's own command-line format, because that format is not
### very useful.  In particular, it needs to be rewritten to allow
### Topographica/Python commands to be passed to the interpreter, even
### when a file is also being executed.  The current implementation
### mirrors the Python standard: a file can be read, or a
### command-string parsed, but not both.  We can probably continue to
### pass such arguments, if we require '--' before them.

# All valid Python 2.4 args, plus 'g' for topo.gui.start()
VALID_OPTS     = 'ic:dEhOQ:StuvVW:xm:g'  

def generate_cmd_prefix(interactive=True,start_gui=False):
    """
    Since a function call is needed for startup, the parameter on if
    the banner should be displayed must be embedded within the command
    string.
    """
#    if start_gui: interactive = True
    # To deal with a need to double-quote under Windows
    if os.name == 'nt': cmd = '"'
    else: cmd = ''

    cmd += 'import topo.base.commandline; topo.base.commandline.start(' \
           + str(interactive) + ');'
    if start_gui:
        cmd += ' topo.gui_cmdline_flag = True; import topo.tk; topo.tk.start();'
    else:
        cmd += ' topo.gui_cmdline_flag = False;'

    if os.name == 'nt': cmd += '"'

    return cmd


def generate_params(argv):
    """
    Read in argv (minus argv[0]!), and rearrange for re-execution.
    Pass along all existing flags as well as possible.  If no -c, peel
    off an argument as the file to evaluate.  If no args, and no -c,
    enter interactive mode by adding a possibly redundant '-i'.
    """
    c_flag = False
    in_opts, in_args = getopt(argv,VALID_OPTS)  

    #print 'in_opts:', in_opts, ' in_args:', in_args

    opts = list()                      # Preserve order in a list.
    flags = dict(in_opts)              # Quickly check opts for '-i'
    for (key, val) in in_opts:
        if key == '-c':                # Add prefix string to start of a '-c' 
            c_flag = True
            val = generate_cmd_prefix(flags.has_key('-i'),
                                      flags.has_key('-g')) + val
        # Python can't handle a '-g', cut it, but add in a -i, so that
        # the GUI will stay.
        if key != '-g':                
            opts.append((key,val))
        else:
            opts.append(('-i',''))

    if not c_flag:                     # Create the '-c' on arg 1 or go interactive.
        if len(in_args) >= 1:
            key = '-c'
	    # Under Windows, assumes the last character from
	    # generate_cmd_prefix is a double-quote that can be cut
	    # off, and then extra commands added.
            if os.name == 'nt':
                val = generate_cmd_prefix(flags.has_key('-i'),
                                          flags.has_key('-g'))[:-1] + 'execfile(\'' + in_args[0] + '\');"'
            else:
                val = generate_cmd_prefix(flags.has_key('-i'),
                                          flags.has_key('-g')) + 'execfile(\'' + in_args[0] + '\');'
            opts.append((key,val))
            in_args = in_args[1:]
        else:
            opts.append(('-i',''))     # Add an '-i' since it's needed with -c.
            opts.append(('-c',generate_cmd_prefix(start_gui=flags.has_key('-g'))))

    args = []
    for each in opts:
        args.append(each[0])
        if each[1] != '': args.append(each[1])
    args = args + in_args
    return args

