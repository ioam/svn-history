"""
To start Topographica, run './topographica' and not this file.  This
file is used to support that file.

./topographica is generated by the Makefile so we keep as much code
outside so the Makefile remains readable, and changes are easier to
implement.

$Id$
"""
from getopt import getopt,GetoptError


# All valid Python 2.4 args
VALID_OPTS     = 'ic:dEhOQ:StuvVW:xm:'  

def generate_cmd_prefix(interactive=True):
    """
    Since a function call is needed for startup, the parameter on if
    the banner should be displayed must be embedded within the command
    string.
    """
    return 'import topo.commandline; topo.commandline.start(' + str(interactive) + ');'



def generate_params(argv):
    """
    Read in argv (minus argv[0]!), and rearrange for re-execution.
    Pass along all existing flags as well as possible.  If no -c, peel
    off an argument as the file to evaluate.  If no args, and no -c,
    enter interactive mode by adding a possibly redundant '-i'.
    """
    c_flag = False
    in_opts, in_args = getopt(argv,VALID_OPTS)  

    #print 'in_opts:', in_opts, ' in_args:', in_args

    opts = list()                      # Preserve order in a list.
    flags = dict(in_opts)              # Quickly check opts for '-i'
    for (key, val) in in_opts:
        if key == '-c':                # Add prefix string to start of a '-c' 
            c_flag = True
            val = generate_cmd_prefix(flags.has_key('-i')) + val
        opts.append((key,val))

    if not c_flag:                     # Create the '-c' on arg 1 or go interactive.
        if len(in_args) >= 1:
            key = '-c'
            val = generate_cmd_prefix(flags.has_key('-i')) + 'execfile("' + in_args[0] + '");'
            opts.append((key,val))
            in_args = in_args[1:]
        else:
            opts.append(('-i',''))     # Add an '-i' since it's needed with -c.
            opts.append(('-c',generate_cmd_prefix()))

    args = []
    for each in opts:
        args.append(each[0])
        if each[1] != '': args.append(each[1])
    args = args + in_args
    return args

