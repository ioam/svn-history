>>> from topo.base.parameterizedobject import ParameterizedObject
>>> from topo.base.parameterclasses import Dynamic, DynamicNumber
>>> from topo.misc.numbergenerators import UniformRandom


>>> Dynamic.time_fn = None


## Basic tests of Dynamic parameters (__get__ & __set__,
## and that inspect_value() and repr_value() work).

>>> class TestPO1(ParameterizedObject):
...    x = Dynamic(default=UniformRandom(lbound=-1,ubound=1,seed=1),doc="nothing")
...    y = Dynamic(default=1)


>>> t1 = TestPO1()

>>> t1.params()['x']._value_is_dynamically_generated(t1)
True
>>> t1.params()['y']._value_is_dynamically_generated(t1)
False

>>> t1.inspect_value('x')  # no value generated yet

>>> t1.inspect_value('y')  # not dynamic
1

>>> t1.y = 2
>>> t1.inspect_value('y')  # check it's updated
2



>>> t2 = TestPO1(x=UniformRandom(lbound=-1,ubound=1,seed=10))
>>> t3 = TestPO1(x=UniformRandom(lbound=-1,ubound=1,seed=10))

>>> isinstance(t2.repr_value('x'),UniformRandom)  # check repr_value()
True


>>> t2.x==t3.x  # check that t2 and t3 have identical streams
True

>>> forget = t2.x  # advance t2
>>> t2.inspect_value('x')==t3.inspect_value('x')  # check t2 and t3 do not share UniformRandom objects
False


>>> forget=t2.x;forget=t2.x;t2_last_value=t2.x  # advance t2 beyond t3
>>> t2.inspect_value('x')==t2_last_value  # inspect_value() should return last generated value
True


>>> t3.inspect_value('x')==t2_last_value  # catch bug caused by shared last_value
False



## Check instantiation of Dynamic parameter

>>> class TestPO3(ParameterizedObject):
...    x = Dynamic(default=UniformRandom(lbound=-1,ubound=1,seed=30))
...    y = Dynamic(default=1.0)

>>> t6 = TestPO3()
>>> t7 = TestPO3()

>>> t6_first_value = t6.x
>>> t7.inspect_value('x')==t6_first_value  # dynamic values are instantiated
False


>>> TestPO3.y = 4
>>> t6.y  # non-dynamic value not instantiated
4
>>> t7.y  # non-dynamic value not instantiated
4

>>> t6.y = UniformRandom()
>>> t8 = TestPO3()
>>> TestPO3.y = 10
>>> t8.y==10  # t6 got a dynamic value, but shouldn't have changed Parameter's instantiate
True

>>> TestPO3.y=UniformRandom()  # now the Parameter instantiate should be true
>>> t9 = TestPO3()
>>> '_y_param_value' in t9.__dict__
True

# but now all existing instances of TestPO3 that don't have their own value for
# the parameter share one UniformRandom object!
>>> t7.repr_value('y') is TestPO3().params()['y'].default
True

>>> import copy
>>> t9 = copy.deepcopy(t7)  
>>> t9.repr_value('y') is TestPO3().params()['y'].default  # check a copy is the same
True



## Check sharing of 




## Repeat some earlier tests to check old-style uses (previous syntax
## in example scripts) still work ok
>>> from topo.base.parameterclasses import Number

>>> class TestPO2(ParameterizedObject):
...    x = Number(default=0.0)


>>> t4 = TestPO2(x = DynamicNumber(UniformRandom(lbound=-1,ubound=1,seed=20)))
>>> t5 = TestPO2(x = DynamicNumber(UniformRandom(lbound=-1,ubound=1,seed=20)))

>>> t4.x==t5.x  # t4 and t5 have identical streams...
True

>>> forget = t4.x  # advance t4
>>> t4.x==t5.x  # ...but do not share UniformRandom objects
False


>>> forget=t4.x;forget=t4.x;t4_last_value=t4.x  # advance t4 beyond t3
>>> t4.inspect_value('x')==t4_last_value  # inspect_value() should return last generated value 
True
>>> t5.inspect_value==t4_last_value # catch new bug caused by shared Parameter object (shared last_value)
False



### Check that time_fn works
>>> import topo; Dynamic.time_fn = topo.sim.time
>>> t10 = TestPO1()
>>> a = t10.x; b = t10.x; c = t10.x
>>> a==b==c
True

>>> topo.sim.run(0.0001)
>>> d = t10.x
>>> d==a
False

>>> a = TestPO1.x; b = TestPO1.x
>>> a==b
True

>>> topo.sim.run(0.0001)
>>> c = TestPO1.x
>>> c==b
False


## Check shared generator

>>> u = UniformRandom(lbound=-1,ubound=1,seed=20)
>>> t11 = TestPO1(x=u)
>>> t12 = TestPO2(x=u)
>>> topo.sim.run(1)
>>> t11.x==t12.x
True


### Check Dynamic works with some common generator-like things

>>> i = iter([1,2,3])
>>> t11.x = i

>>> topo.sim.run(1)

>>> t11.x
1

>>> def gen():
...     yield 2
...     yield 4
...     yield 6

>>> g = gen()

>>> t11.x = g

>>> t11.x
2

>>> topo.sim.run(1)

>>> t11.x
4

