"""
Test LISSOM.

The values held to be true are those from Topographica release_0_8_1.


$Id$
"""
__version__='$Revision$'

import unittest


### CEBHACKALERT:
#
# This file is not supposed to match lissom_or_reference, it's just
# supposed to test the lissom (and associated) code. Maybe it just
# ought to be done identically to lissom_or_reference because of the
# following problem...if it is a problem?
#
# From release_0_8_1 (about 22 December), up until about 1300 on 9th
# January (detail later), the tests in version 1.7 of this file pass
# (using testlissom.data revision 1.3).  Changes to connectionfield.py
# and lissom_or.ty (*) committed between 1310 and 1315 on 9th January
# cause these tests to fail - the activity values in V1 differ slightly.
# However, there appears to be no change to V1 activity in
# lissom_or.ty over this period. That is, its parameters must have been
# adjusted correctly to match.
#
# Therefore, I will use the data from 1315 as the new reference data in
# versions of testlissom.data later than 1.3. It will be simpler to use
# data from C++ lissom, but I think this is ok for now.
#
# (* Julien's changes to how the learning rate works.)



# CEBHACKALERT:
# - This test is not set out properly at the moment.
#   It's just temporary.
#
# - Should test change_bounds, and so on.

import random
import RandomArray
import fixedpoint
import pickle

from math import pi, sqrt
from fixedpoint import FixedPoint

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection
from topo.responsefns.optimized import CFDotProduct
import topo.patterns.basic
import topo.patterns.random
from topo.base.sheet import BoundingBox
from topo.base.parameterclasses import DynamicNumber
from topo.learningfns.optimized import DivisiveHebbian
from topo.patterns import PatternGeneratorParameter

GeneratorSheet.density = 5.0 
GeneratorSheet.period = 1
GeneratorSheet.bounds = BoundingBox(points=((-0.7,-0.7),(0.7,0.7)))

random.seed(1234)
topo.patterns.basic.Gaussian.scale = 1.0    
topo.patterns.basic.Gaussian.x = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))
topo.patterns.basic.Gaussian.y = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))
topo.patterns.basic.Gaussian.orientation = DynamicNumber(lambda :random.uniform(-pi,pi),softbounds=(0,2*pi))
topo.patterns.basic.Gaussian.size = 2*0.5  
topo.patterns.basic.Gaussian.aspect_ratio = 0.1/0.5   
topo.patterns.basic.Gaussian.bounds = BoundingBox(points=((-0.5,-0.5),(0.5,0.5)))

LISSOM.density = 10.0

afferent_weight_bounds   = BoundingBox(points=((-0.2,-0.2),(0.2,0.2)))
excitatory_weight_bounds = BoundingBox(points=((-0.1,-0.1),(0.1,0.1)))
inhibitory_weight_bounds = BoundingBox(points=((-0.1,-0.1),(0.1,0.1)))

RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.response_fn=CFDotProduct()
CFProjection.learning_fn=DivisiveHebbian()


s = topo.base.simulator.Simulator()

Retina = GeneratorSheet(input_generator=topo.patterns.basic.Gaussian(),
                        name='Retina')
V1 = LISSOM(name='V1')

s.connect(Retina,V1, delay = FixedPoint("0.05"),
          connection_type=CFProjection,strength = 1.0, name='Afferent0',
          nominal_bounds_template = afferent_weight_bounds,learning_rate=0.1)  

s.connect(V1,V1, delay = FixedPoint("0.05"), dest_port="exc",
          connection_type=CFProjection,strength = 0.9,name='LateralExcitatory',
          nominal_bounds_template = excitatory_weight_bounds,learning_rate=0.1)             

s.connect(V1,V1, delay = FixedPoint("0.05"), dest_port="inh",
          connection_type=CFProjection,strength = -0.9, name='LateralInhibitory',
          nominal_bounds_template = inhibitory_weight_bounds,learning_rate=0.1)

s.run(1)


class TestLissom(unittest.TestCase):


    def test_activity(self):
        """
        """
        # {time: activity}
        trueV1activities = pickle.load(open("topo/tests/testlissom.data","r"))

        self.assertEqual(V1.activity.shape,trueV1activities[1].shape)
        n_rows,n_cols = V1.activity.shape
        for i in range(n_rows):
            for j in range(n_cols):
                self.assertEqual(V1.activity[i,j],trueV1activities[1][i,j])

        s.run(1)
        self.assertEqual(V1.activity.shape,trueV1activities[2].shape)
        for i in range(n_rows):
            for j in range(n_cols):
                self.assertEqual(V1.activity[i,j],trueV1activities[2][i,j])

        s.run(98)
        self.assertEqual(V1.activity.shape,trueV1activities[100].shape)
        for i in range(n_rows):
            for j in range(n_cols):
                self.assertEqual(V1.activity[i,j],trueV1activities[100][i,j])

        # guard against testlissom.data just pointing to current V1.activity!
        V1.activity*=3
        self.assertNotEqual(sum(V1.activity.flat),sum(trueV1activities[100].flat))
        

suite = unittest.TestSuite()
suite.addTest(unittest.makeSuite(TestLissom))

if __name__ == '__main__':
    unittest.TextTestRunner(verbosity=2).run(suite)
