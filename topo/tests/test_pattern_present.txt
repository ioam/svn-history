>>> import copy
>>> from topo.patterns.basic import Gaussian,Constant
>>> from numpy import array
>>> from numpy.testing import assert_array_equal
>>> from topo.tests.setup_simulation import new_simulation,assert_array_not_equal
>>> from topo.misc.numbergenerators import UniformRandom
>>> from topo.commands.basic import pattern_present,save_input_generators,restore_input_generators
>>> import topo


>>> new_simulation()
>>> R = topo.sim['GS']
>>> ig=Gaussian(x=UniformRandom())
>>> R.set_input_generator(ig)

>>> topo.sim.time()
FixedPoint('0.0000', 4)


>>> topo.sim.run(1) # 1
>>> x_t1 = R.input_generator.x
>>> a_t1 = copy.deepcopy(R.activity)

>>> topo.sim.run(1) # 2
>>> x_t2 = R.input_generator.x
>>> a_t2 = copy.deepcopy(R.activity)

# check that dyn params are advancing
>>> x_t1==x_t2 
False
>>> assert_array_not_equal(a_t1,a_t2)


## bug is that pattern_present() before any run() messes up events


### Test save_/restore_generators
>>> save_input_generators()
>>> R.set_input_generator(Constant(scale=0.1,x=100))
>>> R.input_generator.x==x_t2
False
>>> restore_input_generators()
>>> R.input_generator.x==x_t2
True

### Test pattern_present
>>> pattern_present(inputs={'GS':Constant(scale=1)})

# check activity pattern
>>> assert_array_equal(array([[1.,1.],[1.,1.]]),R.activity)

# check time's back to where it should be
>>> topo.sim.time()
FixedPoint('2.0000', 4)

# check input generator was restored
>>> R.input_generator is ig
True
>>> R.input_generator.x==x_t2  
True


>>> topo.sim.run(1)
>>> topo.sim.time() 
FixedPoint('3.0000', 4)

>>> x_t3 = R.input_generator.x
>>> a_t3 = copy.deepcopy(R.activity)


>>> topo.sim.run(1)  # 4

>>> x_t4 = R.input_generator.x
>>> x_t4==x_t3
False

>>> a_t4 = copy.deepcopy(R.activity)
>>> assert_array_not_equal(a_t4,a_t3)


>>> topo.sim.run(1)  # 5

>>> x_t5 = R.input_generator.x
>>> x_t5==x_t4
False

>>> a_t5 = copy.deepcopy(R.activity)
>>> assert_array_not_equal(a_t5,a_t4)






