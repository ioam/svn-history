#!/usr/bin/python

# Creates a bash script that will launch multiple batch simulations.
# 
# Batch simulation running is done with topo.command.run_batch().
# 
# 
# Instructions
# ============
# 
# (1) Create a whitespace-delimited text file specifying the parameter
# combinations you'd like to try. E.g.:
# 
# lgn_density  cortex_density  retina_density  dims         dataset     
# 2            2               4               ["or","cr"]  "FoliageB"  
# 2            4               2               ["or","dy"]  "Nature"    
# 2            2               2               ["or"]       "FoliageB"
# 
# Each 'experiment' (i.e. combination of parameters) is on its own
# row. (Parameters that should be common to all experiments are passed
# at the commandline; see later.) Note that double quotes (") must be
# used, since the command will already be inside single (') quotes.
# 
# 
# (2) Create a suitable config file; see the example
# parameter_search.cfg.
#
#
# (3) Run this script by passing a configuration file as the first
# argument, the topographica .ty file you want to run as the second
# argument, the parameter combinations file as the third, and finally
# specify any parameters you want to be common to all experiments.
# E.g: 
#  ./parameter_search ps.cfg script.ty combs.txt 'times=[1],a="def"'
# 
# Note that the common parameters must be specified in a single-quoted
# string, and that as above any strings must be enclosed in at least
# double quotes.
# 
#
# (4) The result is a script that, when run, will submit all the jobs.


# support python 2.3
try:
    set
except NameError:
    from sets import Set as set

import sys
import string
import os
import ConfigParser

def usage():
    print """
Please see the script's docstring for full instructions.

Usage: parameter_search [config-file] [script] [combinations-file] (<common-params>)

Examples:
       parameter_search ps.cfg examples/lissom.ty combs.txt 
       parameter_search ps.cfg examples/lissom.ty combs.txt 'times=[1,2,3],astring="test"'
"""


# CEBALERT: duplicates fn in nobrain script
def process_section(name,config):
    """
    Return a dictionary representing section [name] of the
    ConfigParser config.

    Entries in the ConfigParser that end '_template' will be created
    as string.Templates (allowing later substitution of {}-delimited
    variables).
    """
    import string
    d = {'string':string}
    for option,value in config.items(name):
        if option.endswith('_template'):
            s = "%s=string.Template(%s)"%(option,value)
        else:
            s = "%s=%s"%(option,value)
        #logger.debug(s)
        exec s in d
    
    del d['string']
    
    if '__builtins__' in d: # inserted by exec
        del d['__builtins__'] 

    return d


args = sys.argv[1::]    

if len(args)<3 or len(args)>4:
    usage()
    sys.exit(-1)


config_file = args[0]
script = args[1]
combinations_file = args[2]
print "Reading combinations from '%s'."%combinations_file
if len(args)==4:
    common_params = args[3]
else:
    common_params = None



config = ConfigParser.ConfigParser()
print "Reading options from '%s'."%config_file
config.read(config_file)
options = process_section('Options',config)




def _generate_command(parameters):
    """Generate a command for running Topographica with the supplied parameters."""
    cmd = '"%s"'%script

    if options['topographica_output_path'] is not None:
        cmd+=',output_directory="%s"'%options['topographica_output_path']

    if common_params is not None:
        cmd+=',%s'%common_params

    for name,val in zip(names,parameters):
        cmd += ',%s=%s'%(name,val)

    cmd = "run_batch(%s)"%cmd
    return "%s %s -c '%s'"%(options['topographica_script'],
                            string.join(options['topographica_args']),
                            cmd)


## Read in combinations 
f = open(combinations_file,'r')
lines = f.readlines()
f.close()
names = lines[0].split() # headers assumed to be in row 0
assert len(names)==len(set(names)), "Duplicate parameter names"
num_params = len(names)

combinations = []
for line in lines[1::]:
    if not line.startswith('\n'):
        vals = line.split()
        assert len(vals)==num_params,"Line '%s' does not contain %s values"%(line,num_params)
        combinations.append(vals)


## Generate script that will run any one of the parameter combinations.
fout = open(options['selector'],'w')
fout.write('#!/bin/bash -i\n')

for i,params in zip(range(len(combinations)),combinations):
    cmd = _generate_command(params)
    
    nscript= """
if [ "$1" = "%s" ]; then
    %s
fi
    """%(i,cmd)
    fout.write(nscript)

fout.close()
os.system('chmod +x %s'%options['selector'])


## Generate script that will submit all combinations
substitutions = {'job':'./%s $i'%options['selector'],
                 'combonumber':'%i'}
f = open(options['submitter'],'w')
submitcmd = options['job_submit_template'].substitute(substitutions)

nscript = """#!/bin/bash

for ((i=0;i<%i;i+=1)); do
    %s
done
"""%(len(combinations),submitcmd)

f.write(nscript)
f.close()
os.system('chmod +x %s'%options['submitter'])



print "Running '%s' will submit your %i specified parameter combinations (using '%s' to start the topographica jobs)."%(options['submitter'],len(combinations),options['selector'])

