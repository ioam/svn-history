"""
Bilal Khan 2010/2011

Example of a simplified auditory pathway incorporating the cochlea, MGBv, and AI.

The cochlea comprises a rolling FFT spectrogram, passing its output to an MGBv
sheet where responses are categorised by typical MGBv neuron responses. The final
auditory station in this example is an AL AI sheet, by which i mean GCAL without
the Gain Control.

$Id: lissom_audio.ty 11027 2010-04-10 01:17:05Z bilalkhancnsg $
"""
__version__='$Revision: 11027 $'

import numpy
import param

from numpy import log, max, subtract, add, divide, power, exp, pi

from topo import learningfn, transferfn, pattern, projection, responsefn, sheet
from topo.misc.commandline import global_params as p

import topo.responsefn.optimized
import topo.transferfn.optimized
import topo.learningfn.optimized
import topo.transferfn.misc
import topo.sheet.lissom
import topo.sheet.optimized
import topo.pattern.random

from topo.pattern.audio import AudioFile, AudioFolder#, AuditorySpectrogram, AuditorySpectrogramWithSimpleOuterEar
from topo.pattern.basic import Spectrogram, PowerSpectrum
from numpy import bartlett, blackman, hamming, hanning, kaiser


# Parameters that can be passed on the command line using -p  
p.add(
    cochlea_density = param.Number(default=100.0, bounds=(0,None), inclusive_bounds=(False,True), doc=
        """The nominal_density to use for the Cochlea."""),
        
    mgbv_density = param.Number(default=50.0, bounds=(0,None), inclusive_bounds=(False,True), doc=
        """The nominal_density to use for the Medial Geniculate Body (Ventral division)."""),

    cortex_density = param.Number(default=50.0, bounds=(0,None), inclusive_bounds=(False,True), doc=
        """The nominal_density to use for Auditory Cortex (AI)."""),

    afferent_strength=param.Number(default=1.5,bounds=(0.0,None),doc="""
        Overall strength of the afferent projection to AI."""),

    excitatory_strength=param.Number(default=1.7,bounds=(0.0,None),doc="""
        Overall strength of the lateral excitatory projection to AI."""),

    inhibitory_strength=param.Number(default=1.4,bounds=(0.0,None),doc="""
        Overall strength of the lateral inhibitory projection to AI."""),

    afferent_lr=param.Number(default=0.1,bounds=(0.0,None),doc="""
        Learning rate for the afferent projection to AI."""),

    excitatory_lr=param.Number(default=0.0,bounds=(0.0,None),doc="""
        Learning rate for the lateral excitatory projection to AI."""),

    inhibitory_lr=param.Number(default=0.3,bounds=(0.0,None),doc="""
        Learning rate for the lateral inhibitory projection to AI."""))


### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()


### Audio pattern generator
"""
All STRFs employed come from the domestic cat. Audible frequency range of the  cat is in fact 48-85,000Hz. 
(Hearing range of the domestic cat, Hearing Research 19, p85-88, 1985, R.Heffner, H.Heffner)

We can't get anywhere near this with the ubiquitous audio sample rate of 44,100Hz, which spans 
the range 0-22,050Hz, so we confine to the human audible range 20-20,000Hz.
"""

# Guitar rendition of Daisy Bell, in tribute to the IBM 704, 
# which in 1962 became the first computer ever to 'sing'.

#audio_data = AudioFile(filename="sounds/complex/daisy.wav", 
#    seconds_per_iteration=0.001, interval_length=0.05)

#audio_data = AudioFolder(folderpath="/Users/University/Music/iTunes/iTunes Media/Music/Wave (Mono)", 
#    seconds_per_iteration=0.001, interval_length=0.05, gap_between_sounds=0.0)

#audio_data = AudioFolder(folderpath="sounds/sine_waves/normalized", 
#    seconds_per_iteration=0.01, interval_length=1.0, gap_between_sounds=0.0)

audio_data = AudioFile(filename="sounds/sine_waves/normalized/00200hz_sine.wav", seconds_per_iteration=0.1, interval_length=0.1)

#input_pattern=AuditorySpectrogram(signal=audio_data, 
input_pattern=Spectrogram(signal=audio_data, min_frequency=20, max_frequency=20000, windowing_function=hanning)


### Sheets
cochlea_dimensions = (1.0,1.0) # 100 msecs, 10 frequency bins (10 octaves)

topo.sim['Cochlea']=sheet.GeneratorSheet(
    nominal_density=p.cochlea_density, output_fns=[transferfn.misc.HalfRectify()],
    nominal_bounds=sheet.BoundingBox(points=((-cochlea_dimensions[0]/2, -cochlea_dimensions[1]/2),
        (cochlea_dimensions[0]/2, cochlea_dimensions[1]/2) )),
    input_generator=input_pattern, period=1.0, phase=0.05)



mgbv_onset_connection_dimensions = (0.2,0.1) # 20 msecs, 1 octave
mgbv_onset_dimensions = (cochlea_dimensions[0]-mgbv_onset_connection_dimensions[0], cochlea_dimensions[1])
                   
topo.sim['MGBv_Onset']=sheet.CFSheet(
    nominal_density=p.mgbv_density, output_fns=[transferfn.misc.HalfRectify()],
    nominal_bounds=sheet.BoundingBox(points=((-mgbv_onset_dimensions[0]/2, -mgbv_onset_dimensions[1]/2),
        (mgbv_onset_dimensions[0]/2, mgbv_onset_dimensions[1]/2))))
        
mgbv_sustained_connection_dimensions = (0.2,0.1) # 20 msecs, 1 octave
mgbv_sustained_dimensions = (cochlea_dimensions[0]-mgbv_sustained_connection_dimensions[0], cochlea_dimensions[1])
                   
topo.sim['MGBv_Sustained']=sheet.CFSheet(
    nominal_density=p.mgbv_density, output_fns=[transferfn.misc.HalfRectify()],
    nominal_bounds=sheet.BoundingBox(points=((-mgbv_sustained_dimensions[0]/2, -mgbv_sustained_dimensions[1]/2),
        (mgbv_sustained_dimensions[0]/2, mgbv_sustained_dimensions[1]/2))))       
        
mgbv_offset_connection_dimensions = (0.2,0.1) # 20 msecs, 1 octave
mgbv_offset_dimensions = (cochlea_dimensions[0]-mgbv_offset_connection_dimensions[0], cochlea_dimensions[1])
                   
topo.sim['MGBv_Offset']=sheet.CFSheet(
    nominal_density=p.mgbv_density, output_fns=[transferfn.misc.HalfRectify()],
    nominal_bounds=sheet.BoundingBox(points=((-mgbv_offset_dimensions[0]/2, -mgbv_offset_dimensions[1]/2),
        (mgbv_offset_dimensions[0]/2, mgbv_offset_dimensions[1]/2))))
        
                
                                
        
a1_connection_dimensions = (0.27083,0.27083)        
a1_dimensions = (mgbv_onset_dimensions[0]-a1_connection_dimensions[0], mgbv_onset_dimensions[1])
                                                  
topo.sim['A1'] = sheet.lissom.LISSOM(
    nominal_density=p.cortex_density, tsettle=16, plastic=True, 
    nominal_bounds=sheet.BoundingBox(points=((-a1_dimensions[0]/2, -a1_dimensions[1]/2),
        (a1_dimensions[0]/2, a1_dimensions[1]/2))),
    output_fns=[transferfn.misc.HomeostaticResponse()])

topo.sim['A1'].joint_norm_fn=topo.sheet.optimized.compute_joint_norm_totals_opt


### Connections

"""SigmoidedDoG pattern, very rough MGBv STRF calibrated entirely by eye."""
#topo.sim.connect('Cochlea', 'MGBv', name='Cochlea Afferent', delay=0.05, 
#    nominal_bounds_template=sheet.BoundingBox(
#        points=((-mgbv_connection_dimensions[0]/2, -mgbv_connection_dimensions[1]/2),
#            (mgbv_connection_dimensions[0]/2, mgbv_connection_dimensions[1]/2))),
#    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
#    weights_generator=pattern.SigmoidedDoG(positive_size=0.03, positive_aspect_ratio=3.9,
#        negative_size=0.09, negative_aspect_ratio=1.8, sigmoid_slope=20.0, 
#        sigmoid_x=0.01, size=0.5))

"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1."""     
topo.sim.connect('Cochlea', 'MGBv_Onset', name='Cochlea Afferent', delay=0.05, 
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_onset_connection_dimensions[0]/2, -mgbv_onset_connection_dimensions[1]/2),
            (mgbv_onset_connection_dimensions[0]/2, mgbv_onset_connection_dimensions[1]/2))),
    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5))

"""DoG pattern, MGBv STRF calibrated by eye to fit spectral dimension of Miller et al. (2002) Figure 1. 
and provide a sustained response. In other words identical to the Miller STRF but with no temporal inhibition."""     
topo.sim.connect('Cochlea', 'MGBv_Sustained', name='Cochlea Afferent', delay=0.05, 
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_sustained_connection_dimensions[0]/2, -mgbv_sustained_connection_dimensions[1]/2),
            (mgbv_sustained_connection_dimensions[0]/2, mgbv_sustained_connection_dimensions[1]/2))),
    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
    weights_generator=pattern.DifferenceOfGaussians(positive_size=0.05,positive_aspect_ratio=100.0,
        negative_size=0.06,negative_aspect_ratio=100.0, size=0.5))

"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1.
and provide an offset response. In other words identical to the Miller STRF but rotated by pi."""     
topo.sim.connect('Cochlea', 'MGBv_Offset', name='Cochlea Afferent', delay=0.05, 
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_offset_connection_dimensions[0]/2, -mgbv_offset_connection_dimensions[1]/2),
            (mgbv_offset_connection_dimensions[0]/2, mgbv_offset_connection_dimensions[1]/2))),
    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5,orientation=pi))
             
                                   
topo.sim.connect(
    'MGBv_Onset', 'A1', name='MGB Onset Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))

topo.sim.connect(
    'MGBv_Offset', 'A1', name='MGB Offset Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))

topo.sim.connect(
    'MGBv_Sustained', 'A1', name='MGB Sustained Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))
        
topo.sim.connect(
    'A1', 'A1', name='Lateral Excitatory', delay=0.05, strength=0.9,
    connection_type=projection.ResizableCFProjection, learning_rate=2.55528,
    nominal_bounds_template=sheet.BoundingBox(radius=0.10417),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=0.10417))
        
topo.sim.connect(
    'A1', 'A1', name='Lateral Inhibitory', delay=0.05, strength=-0.9,
    connection_type=projection.CFProjection, learning_rate=1.80873,
    nominal_bounds_template=sheet.BoundingBox(radius=0.22917),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=0.22917))


### Set up appropriate defaults for analysis

# Measure feature maps based on unthresholded initial response
# for speed and reliability.
from topo.analysis.featureresponses import MeasureResponseCommand

MeasureResponseCommand.duration = 0.175
MeasureResponseCommand.apply_output_fns = False
