"""
Tiny example network useful for testing components.

$Id$
"""
__version__='$Revision: 10115 $'


from math import pi, sqrt
import numpy

import param

from topo import learningfn,numbergen,transferfn,pattern,projection,responsefn,sheet

import topo.learningfn.projfn 
import topo.learningfn.optimized
import topo.transferfn.projfn
import topo.pattern.random
import topo.responsefn.optimized 
import topo.transferfn.optimized 
import topo.sheet.lissom

from topo.base.functionfamily import LearningFn


# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p
p.add(
    retina_density=param.Number(default=24.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the retina."""),

    cortex_density=param.Number(default=10.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for V1."""))


# Input pattern
gaussian_generator = pattern.Gaussian(
    x=numbergen.UniformRandom(lbound=-0.8,ubound=0.8,seed=12),
    y=numbergen.UniformRandom(lbound=-0.8,ubound=0.8,seed=34),
    orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=56),
    size = 2*0.3*1.5/7.0,
    aspect_ratio = 7.0/1.5,
    bounds = sheet.BoundingBox(radius=0.8))

# Sheets, connections, and their parameters
topo.sim['Retina'] = sheet.GeneratorSheet(input_generator=gaussian_generator,
    nominal_bounds=sheet.BoundingBox(radius=0.6),
    period=1.0,phase=0.05,nominal_density=p.retina_density)

topo.sim['V1'] = sheet.CFSheet(nominal_density=p.cortex_density,
    nominal_bounds=sheet.BoundingBox(radius=0.5),
    output_fns=[transferfn.PiecewiseLinear(lower_bound=0,upper_bound=1.0)])

topo.sim.connect(
    'Retina','V1',name='Afferent',delay=0.05,
    connection_type=projection.CFProjection, 
    weights_generator=pattern.random.UniformRandom(),
    nominal_bounds_template=sheet.BoundingBox(radius=0.2),
    response_fn=responsefn.optimized.CFPRF_DotProduct_opt(),
    learning_fn=topo.learningfn.optimized.CFPLF_Hebbian_opt(),
    weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()],
    learning_rate=200.0)
