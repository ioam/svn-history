"""
LESI model - long range excitatory, short range inhibitory
Two layer model with one inhibitory and one excitatory sheet.
Recurrent short range connections between sheets, long range excitation and short range inhibition
Version used in Judith Laws thesis with NoisyDiskstoNatural input.
Includes all functions for tracking and debugging.
Uses homeostatic JointScaling sheet (as described in thesis) in V1Exc.

$Id$
"""
__version__='$Revision: 8387 $'

from math import pi, sqrt

import numpy
import param
import copy

from topo import base,learningfn,numbergen,transferfn,pattern,projection,responsefn,sheet

import topo.learningfn.optimized
import topo.transferfn.optimized 
import topo.pattern.random
import topo.pattern.image
import topo.responsefn.optimized 
import topo.sheet.optimized

import topo.transferfn.misc
from topo.base.arrayutil import DivideWithConstant

# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p
p.add(
    
    dataset=param.ObjectSelector(default='Gaussian',objects=
        ['Gaussian','Nature','NoisyDiskstoNatural'],doc="""
        Set of input patterns to use::

          :'Gaussian':            Two-dimensional Gaussians
          :'Nature':              Shouval's 1999 monochrome 256x256 images
          :'NoisyDiskstoNatural': Noisy disks + Nature images"""),

    num_inputs=param.Integer(default=2,bounds=(1,None),doc="""
        How many input patterns to present per unit area at each
        iteration, when using discrete patterns (e.g. Gaussians)."""),

    area=param.Number(default=1.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        Linear size of cortical area to simulate.
        2.0 gives a 2.0x2.0 Sheet area in V1."""),

    retinal_density=param.Number(default=24.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the retina."""),

    lgn_density=param.Number(default=48.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the LGN."""),

    cortex_inh_density=param.Number(default=48.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the V1 inhibitory layer."""),

    cortex_exc_density=param.Number(default=48.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the V1 excitatory layer."""),
    
    gaussian_scale=param.Number(default=1.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        Contrast of the Gaussian input pattern."""),

    disk_scale=param.Number(default=0.35,bounds=(0,None),
                            inclusive_bounds=(False,True),doc="""
                            Contrast of the noisy disks input pattern."""),

    target_lr=param.Number(default=0.045,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        Target average activity for jointly scaled projections.
        Used for calculating a learning rate scaling factor."""),

    v1_exc_aff_lr=param.Number(default=0.137,bounds=(0,None),
                               inclusive_bounds=(False,True),doc="""
                               V1 excitatory layer afferent learning rate."""),

    lat_exc_loc_strength=param.Number(default=0.7,doc=""" """),

    lat_exc_strength=param.Number(default=0.1,doc="""
                                  """),

    exc_inh_loc_strength=param.Number(default=0.6,doc=""" """),

    exc_inh_strength=param.Number(default=1.5,doc=""" """),

    exc_inh_radius=param.Number(default=0.22917,doc=""" """),

    inh_exc_strength=param.Number(default=-0.35,doc=""" """),

    inh_inh_strength=param.Number(default=-0.35,doc=""" """),

    smoothing=param.Number(default=0.999,doc="""
                           Smoothing value for exponential averaging"""),

    lgn_aff_str=param.Number(default=0.445),

    lgn_lat_str=param.Number(default=0.6),
    
    lgn_lat_size=param.Number(default=0.25),

    lgn2v1exc_str=param.Number(default=1.0),

    #v1exc_tinit=param.Number(default=0.05),
    v1exc_tinit=param.Number(default=0.07),

    #v1exc_slope=param.Number(default=2),
    v1exc_slope=param.Number(default=2.3),

    v1exc_lst=param.Number(default=0.54),

    v1exc_lr=param.Number(default=0.001),

    v1inh_r=param.Number(default=12),

    v1inh_k=param.Number(default=-5.5),
    
    both=param.Boolean(default=True))


# Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.weights_generator=topo.pattern.Constant()
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()


### Input patterns
if p.dataset=="Gaussian":
    input_type=pattern.Gaussian
    total_num_inputs=int(p.num_inputs*p.area*p.area)
    inputs=[input_type(x=numbergen.UniformRandom(lbound=-(p.area/2.0+0.25),
                                                 ubound= (p.area/2.0+0.25),seed=12+i),
                       y=numbergen.UniformRandom(lbound=-(p.area/2.0+0.25),
                                                 ubound= (p.area/2.0+0.25),seed=35+i),
                       orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=21+i),
                       # CEBALERT: is this used?
                       bounds=sheet.BoundingBox(radius=1.125),
                       size=0.088388, aspect_ratio=4.66667, scale=1.0)#scale=p.scale)
            for i in xrange(total_num_inputs)]
    
    combined_inputs=pattern.SeparatedComposite(min_separation=0,generators=inputs)

elif p.dataset=="Nature":
    input_type=pattern.image.FileImage
    image_filenames=["images/shouval/combined%02d.png"%(i+1) for i in xrange(25)]
    inputs=[input_type(filename=f,
                       size=10.0,  #size_normalization='original',(size=10.0)
                       x=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                       y=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=36),
                       orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=65))
        for f in image_filenames]

    combined_inputs=pattern.Selector(generators=inputs)

elif p.dataset=="NoisyDiskstoNatural":
    #This dataset mimics pre and post eye-opening development - scheduled changes must also be set to ensure the input pattern changes at simulated eye opening
    disks_input_type=pattern.Composite
    disks_inputs=[disks_input_type(operator=numpy.add,
                                   generators=[topo.pattern.Disk(x=numbergen.UniformRandom(lbound=-2.125,ubound=2.125,seed=12),
                                                                       y=numbergen.UniformRandom(lbound=-2.125,ubound=2.125,seed=36),
                                                                       size=2.0, aspect_ratio=1.0, scale=p.disk_scale,
                                                                       offset=0.5,
                                                                       bounds=base.boundingregion.BoundingBox(radius=1.125), smoothing=0.1),
                                               topo.pattern.random.UniformRandom(offset=-0.5)])]
    
    combined_inputs=topo.pattern.Selector(generators=disks_inputs)      
   
    
    natural_input_type=topo.pattern.image.FileImage
    image_filenames=["images/shouval/combined%02d.png"%(i+1) for i in xrange(25)]
    natural_inputs=[natural_input_type(filename=f,
                       size=10.0,
                       x=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                       y=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=36),
                       orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=65))
                for f in image_filenames]

    natural_combined_inputs=topo.pattern.Selector(generators=natural_inputs)

    changetime=6000
    new_frequency=5
    new_balance=4
    new_mu=0.0045*new_frequency
    new_afferent_target = new_mu*new_balance
    topo.sim.schedule_command(changetime,'topo.sim["Retina"].set_input_generator(natural_combined_inputs,push_existing=False)')
    topo.sim.schedule_command(changetime,'topo.sim["V1Exc"].target=new_afferent_target')
    topo.sim.schedule_command(changetime,'topo.sim["V1Exc"].output_fns[0].mu=new_mu')
    #topo.sim.schedule_command(changetime,'topo.sim["V1Exc"].output_fns[0].target_activity=new_mu')



#frequency=5
frequency=5

#Target average afferent activity and target average V1 activity set based on
#frequency and balance between afferent and lateral activity
mu=0.0045*frequency
mu_inh=mu*2
balance=4.0
afferent_target=mu*balance
step=50

V1_OF_exc=[transferfn.misc.HomeostaticResponse(t_init=p.v1exc_tinit,linear_slope=p.v1exc_slope,#0.12,3.25
                                               learn_start_time=p.v1exc_lst,
                                               learning_rate=p.v1exc_lr)]
#V1_OF_exc=[transferfn.Sigmoid(r=14.5,k=-4.0)]
#V1_OF_exc=[transferfn.PiecewiseLinear(lower_bound=0.07,upper_bound=0.42)]
#V1_OF_exc=[transferfn.Hysteresis(time_constant=0.7),
#           transferfn.misc.HomeostaticResponse(t_init=p.v1exc_tinit,linear_slope=p.v1exc_slope,#0.12,3.25
#                                               learn_start_time=p.v1exc_lst,
#                                               learning_rate=p.v1exc_lr)]



V1_OF_inh=[transferfn.Sigmoid(r=p.v1inh_r,k=p.v1inh_k)]
#V1_OF_inh=[transferfn.Hysteresis(time_constant=0.4),transferfn.Sigmoid(r=12,k=-5.5)]
#V1_OF_inh=[transferfn.Hysteresis(time_constant=0.3),transferfn.Sigmoid(r=12,k=-2.5)]



# Tracking LGN On/Off output activity
#units=[(0.0, 0.0), (0.25,0.25), (0.49,0.49)]
#unitsrange=[-0.45,-0.4,-0.35,-0.3,-0.25,-0.2,-0.15,-0.1,-0.05,0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45]
#units=[(x,y) for x in unitsrange for y in unitsrange]
#smoothing=0.999

#LGNOn_Avg=transferfn.ActivityAveragingTF(smoothing=smoothing,step=1)
#LGNOn_Tracker=transferfn.misc.AttributeTrackingTF(object=LGNOn_Avg,coordframe="topo.sim['V1Exc']", attrib_names=['x_avg'], units=units, step=1)
#LGNOn_OF = [LGNOn_Avg,LGNOn_Tracker]

#LGNOff_Avg=transferfn.ActivityAveragingTF(smoothing=smoothing,step=1)
#LGNOff_Tracker=transferfn.misc.AttributeTrackingTF(object=LGNOff_Avg,coordframe="topo.sim['V1Exc']", attrib_names=['x_avg'], units=units, step=1)
#LGNOff_OF = [LGNOff_Avg,LGNOff_Tracker]

LGNOn_OF = []
LGNOff_OF = []



### Sheets
topo.sim['Retina']=sheet.GeneratorSheet(nominal_density=p.retinal_density,
                                        input_generator=combined_inputs,                                        
                                        period=1.0, phase=0.05,
                                        nominal_bounds=sheet.BoundingBox(radius=0.5+0.25+0.25+0.375))

for s in ['LGNOn', 'LGNOff']:
    topo.sim[s]=sheet.lissom.LISSOM(nominal_density=p.retinal_density,
        nominal_bounds=sheet.BoundingBox(radius=0.5+0.25+0.25),#p.area/2.0+0.25+0.5),
        output_fns=[transferfn.misc.HalfRectify()],
        tsettle=2,strict_tsettle=1,measure_maps=False)

    lgn_surroundg = pattern.Gaussian(size=p.lgn_lat_size,aspect_ratio=1.0,
        output_fns=[transferfn.DivisiveNormalizeL1()])

    topo.sim.connect(s,s,delay=0.01,name='LateralGC',                       
                     dest_port=('Activity'),activity_group=(0.6,DivideWithConstant(c=0.11)),
                     connection_type=projection.SharedWeightCFProjection,
                     strength=p.lgn_lat_str,weights_generator=lgn_surroundg,
                     nominal_bounds_template=sheet.BoundingBox(radius=p.lgn_lat_size))


#topo.sim['V1Exc_LESI2']=sheet.lissom.JointScaling(precedence=0.6,
#                                            nominal_density=p.cortex_exc_density,
#                                            nominal_bounds=sheet.BoundingBox(radius=0.5),tsettle=step,
#                                            plastic=True,output_fns=V1_OF_exc,
#                                            target=afferent_target,smoothing=p.smoothing,
#                                            target_lr=p.target_lr)
topo.sim['V1Exc_LESI2']=sheet.lissom.LISSOM(precedence=0.6,
                                      nominal_density=p.cortex_exc_density,
                                      nominal_bounds=sheet.BoundingBox(radius=0.5),
                                      tsettle=step,
                                      plastic=True,output_fns=V1_OF_exc)

topo.sim['V1Inh_LESI2']=sheet.lissom.LISSOM(precedence=0.7,
                                      nominal_density=p.cortex_inh_density,
                                      nominal_bounds=sheet.BoundingBox(radius=0.5),
                                      tsettle=step-1,
                                      output_fns=V1_OF_inh) 


### Connections

# Function for generating Gaussian random initial weights
# GG - To be replaced with pattern.random.GaussianCloud
def gauss_rand(size):
    return pattern.Composite(operator=numpy.multiply,
                             generators=[pattern.Gaussian(aspect_ratio=1.0, size=size),
                                         pattern.random.UniformRandom()])


## Retina -> LGN

# DoG weights for the LGN
centerg   = pattern.Gaussian(size=0.07385,aspect_ratio=1.0,output_fns=[transferfn.DivisiveNormalizeL1()])
surroundg = pattern.Gaussian(size=0.29540,aspect_ratio=1.0,output_fns=[transferfn.DivisiveNormalizeL1()])
    
on_weights = pattern.Composite(generators=[centerg,surroundg],operator=numpy.subtract)
off_weights = pattern.Composite(generators=[surroundg,centerg],operator=numpy.subtract)

topo.sim.connect('Retina','LGNOn',delay=0.01,
                 connection_type=projection.SharedWeightCFProjection,strength=p.lgn_aff_str,
                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=on_weights)

topo.sim.connect('Retina','LGNOff',delay=0.01,
                 connection_type=projection.SharedWeightCFProjection,strength=p.lgn_aff_str,
                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=off_weights)


## LGN -> V1 Exc
topo.sim.connect('LGNOn','V1Exc_LESI2',delay=0.01,
                 dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=projection.CFProjection,strength=p.lgn2v1exc_str,name='LGNOnAfferent',
                 learning_fn=learningfn.optimized.CFPLF_Scaled_opt(),
                 output_fns=LGNOn_OF,
                 weights_generator=gauss_rand(size=2*0.27083),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.27083),learning_rate=p.v1_exc_aff_lr)

topo.sim.connect('LGNOff','V1Exc_LESI2',delay=0.01,
                 dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=projection.CFProjection,strength=p.lgn2v1exc_str,name='LGNOffAfferent',
                 learning_fn=learningfn.optimized.CFPLF_Scaled_opt(),
                 output_fns=LGNOff_OF,
                 weights_generator=gauss_rand(size=2*0.27083),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.27083),learning_rate=p.v1_exc_aff_lr)
    

## Intra V1 connections

topo.sim.connect('V1Exc_LESI2','V1Exc_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.lat_exc_loc_strength,name='LateralExcitatory_local',
                 weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.03),
                 learning_rate=0)

topo.sim.connect('V1Exc_LESI2','V1Exc_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.lat_exc_strength,name='LateralExcitatory',
                 weights_generator=gauss_rand(size=2*0.22917),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.229),learning_rate=1.8087)
              
topo.sim.connect('V1Exc_LESI2','V1Inh_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.exc_inh_loc_strength, name='V1Exc_to_V1Inh_local',
                 weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                 nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)

topo.sim.connect('V1Exc_LESI2','V1Inh_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.exc_inh_strength, name='V1Exc_to_V1Inh',
                 weights_generator=gauss_rand(size=2*0.22917),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.229),learning_rate=1.8087)


topo.sim.connect('V1Inh_LESI2','V1Exc_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.inh_exc_strength, name='V1Inh_to_V1Exc',
                 weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                 nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)

topo.sim.connect('V1Inh_LESI2','V1Inh_LESI2',delay=0.01,
                 connection_type=projection.CFProjection,strength=p.inh_inh_strength, name='V1Inh_to_V1Inh',
                 weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                 nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)

### Default locations for model editor
topo.sim.grid_layout([[None,    'V1Inh_LESI2',     None],
                      [None,    'V1Exc_LESI2',     None],
                      ['LGNOn', None,     'LGNOff'],
                      [None,    'Retina', None]], xstart=150,item_scale=0.8)

import topo.analysis.featureresponses
topo.analysis.featureresponses.FeatureMaps.selectivity_multiplier=1.0

import os
def dump_lgn_output():
    iterations=len(LGNOn_Tracker.values['x_avg'][(0,0)])

    filename='dump/test_'+str(p.lgn_aff_str)+'_'+str(p.lgn_lat_str)+'.txt'

    print 'Dumping LGN results to '+filename
    
    fd=file(filename,'wt')
    for i in xrange(iterations):
        sum=0
        for u in units:
            sum=sum+LGNOn_Tracker.values['x_avg'][u][i][1]
        fd.write(str(sum)+"\n")
        sum=0
        for u in units:
            sum=sum+LGNOff_Tracker.values['x_avg'][u][i][1]
        fd.write(str(sum)+"\n")
        
    fd.close()
    
    exit()













########################################################################
if p.both:
    V1_OF_exc_HME=[transferfn.HomeostaticMaxEnt(smoothing=0.999,eta=locals().get('eta',0.0002*15),
                                                  mu=mu,step=step,a_init=14.5,b_init=-4.0)]
    V1_OF_inh_HME=[transferfn.Sigmoid(r=12,k=-5.5)]



    topo.sim['V1Exc_LESI1']=sheet.lissom.JointScaling(precedence=0.8,
                                                nominal_density=p.cortex_exc_density,
                                                nominal_bounds=sheet.BoundingBox(radius=0.5),tsettle=step,
                                                plastic=True,output_fns=V1_OF_exc_HME,
                                                target=afferent_target,smoothing=p.smoothing,
                                                target_lr=p.target_lr)
    topo.sim['V1Inh_LESI1']=sheet.lissom.LISSOM(precedence=0.9,
                                          nominal_density=p.cortex_inh_density,
                                          nominal_bounds=sheet.BoundingBox(radius=0.5),
                                          tsettle=step-1,
                                          output_fns=V1_OF_inh_HME) 


## LGN -> V1 Exc
    topo.sim.connect('LGNOn','V1Exc_LESI1',delay=0.01,
                     dest_port=('Activity','JointNormalize', 'Afferent'),
                     connection_type=projection.CFProjection,strength=1.0,name='LGNOnAfferent_HME',
                     learning_fn=learningfn.optimized.CFPLF_Scaled_opt(),
                     output_fns=LGNOn_OF,
                     weights_generator=gauss_rand(size=2*0.27083),
                     nominal_bounds_template=sheet.BoundingBox(radius=0.27083),learning_rate=p.v1_exc_aff_lr)
    
    topo.sim.connect('LGNOff','V1Exc_LESI1',delay=0.01,
                     dest_port=('Activity','JointNormalize', 'Afferent'),
                     connection_type=projection.CFProjection,strength=1.0,name='LGNOffAfferent_HME',
                     learning_fn=learningfn.optimized.CFPLF_Scaled_opt(),
                     output_fns=LGNOff_OF,
                     weights_generator=gauss_rand(size=2*0.27083),
                     nominal_bounds_template=sheet.BoundingBox(radius=0.27083),learning_rate=p.v1_exc_aff_lr)
    
    
## Intra V1 connections
    
    topo.sim.connect('V1Exc_LESI1','V1Exc_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=0.7,name='LateralExcitatory_local_HME',
                     weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                     nominal_bounds_template=sheet.BoundingBox(radius=0.03),
                     learning_rate=0)
    
    topo.sim.connect('V1Exc_LESI1','V1Exc_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=0.1,name='LateralExcitatory_HME',
                     weights_generator=gauss_rand(size=2*0.22917),
                     nominal_bounds_template=sheet.BoundingBox(radius=0.229),learning_rate=1.8087)
    
    topo.sim.connect('V1Exc_LESI1','V1Inh_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=0.6, name='V1Exc_to_V1Inh_local_HME',
                     weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                     nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)
    
    topo.sim.connect('V1Exc_LESI1','V1Inh_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=1.5, name='V1Exc_to_V1Inh_HME',
                     weights_generator=gauss_rand(size=2*0.22917),
                     nominal_bounds_template=sheet.BoundingBox(radius=0.229),learning_rate=1.8087)
    
    
    topo.sim.connect('V1Inh_LESI1','V1Exc_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=-0.35, name='V1Inh_to_V1Exc_HME',
                     weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                     nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)
    
    topo.sim.connect('V1Inh_LESI1','V1Inh_LESI1',delay=0.01,
                     connection_type=projection.CFProjection,strength=-0.35, name='V1Inh_to_V1Inh_HME',
                     weights_generator=topo.pattern.Gaussian(aspect_ratio=1.0, size=0.04),
                     nominal_bounds_template = sheet.BoundingBox(radius=0.03),learning_rate=0)
