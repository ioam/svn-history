"""
Example of a LISSOM-based orientation map that avoids shrinking the
lateral excitatory radius.

This simulation is intended to be similar to standard LISSOM with ON
and OFF channels, but without the dramatic reorganizations typical of
the early iterations where the lateral excitatory radius is large.
Requires homeostatic plasticity -- otherwise the map still jumps
around a lot at the start of learning, yet some neurons still fail to
organize.

The number of input patterns and type of V1 output function can be specified
at the command line using e.g.
-c 'num_inputs=3' and -c 'Outputfn_type='Homeostatic_debug''

$Id$
"""
__version__='$Revision$'


import numpy

from math import pi, sqrt


import topo.pattern.basic
import topo.pattern.random

from topo.sheet.lissom import LISSOM
from topo.sheet import GeneratorSheet
from topo.projection.basic import CFProjection, SharedWeightCFProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt
from topo.transferfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.transferfn.misc import AttributeTrackingTF
from topo.transferfn.basic import PiecewiseLinear,DivisiveNormalizeL1, ActivityAveragingTF, HomeostaticMaxEnt
from topo import numbergen
from topo.pattern.basic import Gaussian


#Inputs
num_inputs=locals().get('num_inputs',2)

input_type=topo.pattern.basic.Gaussian
inputs=[input_type(x=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=12+i),
                   y=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=34+i),
                   orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=56+i),
                   size=0.088388, aspect_ratio=4.66667, scale=1.0,
                   bounds=BoundingBox(radius=0.8))
                for i in xrange(num_inputs)]

combined_inputs = topo.pattern.basic.SeparatedComposite(min_separation=2.2*0.27083,generators=inputs)

# Specify weight initialization, response function, and learning function
CFProjection.weights_generator=topo.pattern.random.UniformRandom()
CFProjection.cf_shape=topo.pattern.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()

#V1 Output function
output_fn_type=locals().get('output_fn_type','Homeostatic')
shared_params = {"a_init":14.5, "b_init":-4, "mu":0.01, "smoothing":0.9997}

if output_fn_type  == 'Homeostatic':
    topo.sim.name = "lissom_oo_or_noshrinking"
    output_fn = HomeostaticMaxEnt(eta=0.0002, **shared_params) 

elif output_fn_type == "Homeostatic_debug":
    #Sheet coordinates of units to track for debugging
    units=[(0.0, 0.0),(0.25,0.25),(0.49,0.49),(-0.25,0.25),(-0.49,0.49),
           (0.25,-0.25),(0.49,-0.49),(-0.25,-0.25),(-0.49,-0.49),
           (0.0,0.25), (0.25,0.0), (0.0,-0.25), (-0.25,0.0)]
    topo.sim.name = "lissom_oo_or_noshrinking_debug"
    HE=HomeostaticMaxEnt(eta=0.0002, **shared_params )
    TF=AttributeTrackingTF(object=HE, coordframe="topo.sim['V1']", attrib_names=['a','b', 'y_avg'], units=units, step=1)
    output_fn=HE+TF



    
###########################################
# build simulation


topo.sim['Retina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=combined_inputs,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['LGNOn']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOff']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',48.0),
                        nominal_bounds=BoundingBox(radius=0.5),tsettle=9,
                        output_fn=output_fn)

# DoG weights for the LGN
centerg   = Gaussian(size=0.07385,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())
surroundg = Gaussian(size=0.29540,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())

on_weights = topo.pattern.basic.Composite(
    generators=[centerg,surroundg],operator=numpy.subtract)

off_weights = topo.pattern.basic.Composite(
    generators=[surroundg,centerg],operator=numpy.subtract)



topo.sim.connect('Retina','LGNOn',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=2.33,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=on_weights)

topo.sim.connect('Retina','LGNOff',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=2.33,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=off_weights)

topo.sim.connect('LGNOn','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=1.0,name='LGNOnAfferent',
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                     generators=[Gaussian(aspect_ratio=1.0, size=2*0.27083),
                                topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),
                 learning_rate=numbergen.BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('LGNOnafferent_lr',0.9590/2),
                                                time_constant=3200/num_inputs)))




topo.sim.connect('LGNOff','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=1.0,name='LGNOffAfferent',
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                     generators=[Gaussian(aspect_ratio=1.0, size=2*0.27083),
                                topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),
                 learning_rate=numbergen.BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('LGNOffafferent_lr',0.9590/2),
                                                time_constant=3200/num_inputs)))


topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
                 connection_type=CFProjection,strength=0.9,
                 weights_generator=topo.pattern.basic.Gaussian(aspect_ratio=1.0, size=0.04),
                 nominal_bounds_template=BoundingBox(radius=0.03),learning_rate=0) 
            
topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory',
                 connection_type=CFProjection,strength=-0.9,
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                     generators=[Gaussian(aspect_ratio=1.0, size=2*0.22917),
                                topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.229),learning_rate=1.8087)



# default locations for model editor
topo.sim['V1'    ].layout_location=(306,225)
topo.sim['LGNOn' ].layout_location=(432,345)
topo.sim['LGNOff'].layout_location=(150,345)
topo.sim['Retina'].layout_location=(279,500)
