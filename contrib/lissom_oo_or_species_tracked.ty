""" 

$Id$
"""
__version__='$Revision: 8197 $'

import fixedpoint
import numpy

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.pattern.basic
import topo.pattern.random


from topo.pattern.basic import Gaussian, Rectangle
from topo.pattern.random import GaussianCloud
from topo.pattern.teststimuli import RandomDisk
from topo.sheet.lissom import JointScaling, LISSOM
from topo.sheet.generator import GeneratorSheet
from topo.projection.basic import CFProjection, SharedWeightCFProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet, CFPOF_Plugin
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt
from topo.outputfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfn.basic import PiecewiseLinear, DivisiveNormalizeL1, PipelineOF, IdentityOF, ActivityAveragingOF, AttributeTrackingOF 
from topo.outputfn.basic import Sigmoid, HalfRectify, HomeostaticMaxEnt
from topo.misc.numbergenerator import UniformRandom, BoundedNumber, NormalRandom
from topo.pattern.image import Image
from topo.coordmapper.basic import Jitter, NormalJitter
import contrib.jsldefs
from contrib.jsldefs import species_analysis_function, param_analysis_function, plot_out_connections, JointScaling_affonly, two_photon_plot
import topo.plotting.plotgroup

species=locals().get('species',"mouse")
off_probability=locals().get('off_probability', 0.0)
patches=locals().get('patches',3.0) #in model coordinates 1.0 x 1.0 is one 2-photon patch - assume these are approx  330x330um
#########Parameters specific to species#############################

#Representing 1 slice 2-photon imaging of a patch of V1###
if species=="cat":
    topo.sim.name="cat"
    #jitter is in sheet coordinates - need to convert to um or degrees
    ret_jitter_scale=locals().get('ret_jitter_scale',0.0) # corresponds to retinal mosaic jitter from grid - 0.01deg, on and off jittered differently by default
    max_ret_jitter =locals().get('max_ret_jitter',2*ret_jitter_scale)

    #LGN RF sizes
    #Using magnification factor in um/deg
    mag_factor=locals().get('mag_factor',667)
    #LGN center size in deg
    center_size=locals().get('center_size',0.515)
    #Total Retina size in degrees
    ret_deg_size=patches*330/mag_factor
    #LGN center size in sheet coordinates
    center_size_sc=center_size*mag_factor/330
    

    #retina (average of 10deg from ac) is approx 1.48x1.48 deg 
    #assuming that we are in central 20deg - average X cell diameter = 0.515 deg

    centerg   = Gaussian(size=center_size_sc,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())
    surroundg = Gaussian(size=center_size_sc*4,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())

    #Receptive field sizes (radii)
    Afferent_size=center_size_sc*2 #to account for full surround
    LGNAfferent_size=locals().get('LGNAfferent_size',1.5) #500um #990diameter
    Lat_inh_size=locals().get('Lat_inh_size',1.5) #should be 2mm but too big to include - made full extent of V1 area
    Lat_exc_size=locals().get('Lat_exc_size',0.23) #approx 150um diameter


    #0.3 mm corresponds to about 10 units from 2 photon in V1
    default_density = locals().get('default_density',10)
    #LGN density - from ratio of lgn to V1 size
    default_lgn_density = locals().get('default_lgn_density',10.0) #assuming increased density in lgn
    #Retinal density to ensure smoothness
    default_retinal_density = locals().get('default_retinal_density',20)

    max_jitter=1.0/default_density*0.75

    
    #Sheet sizes - total of 2 photon patches
    V1_size = patches*1.0/2
    LGN_size = V1_size + LGNAfferent_size + max_jitter
    Retina_size= LGN_size + Afferent_size + max_ret_jitter

    
    ret_strength=locals().get('ret_strength',10)
    input_bounds=locals().get('input_bounds',Retina_size)
    
    #Type of input
    dataset=locals().get('dataset',"Natural")

    gauss_size=locals().get('gauss_size',center_size_sc) 
    nat_size=locals().get('nat_size', Retina_size/5) 
    aspect_ratio=locals().get('aspect_ratio',4)
    num_inputs=locals().get('num_inputs',2)
    scale= locals().get('scale', 1.0)

      
    #frequency and balance between afferent and lateral activity
    #frequency=locals().get('frequency',2)
    mu=locals().get('mu',0.01)
    #balance = locals().get('balance',5.9)
    afferent_target = locals().get('afferent_target',0.06)
    #target_lr=locals().get('target_lr',0.04)

if species=="mouse":
    topo.sim.name="mouse"

    #jitter is in sheet coordinates - need to convert to um or degrees
    ret_jitter_scale=locals().get('ret_jitter_scale',0.0) # corresponds to retinal mosaic jitter from grid - 0.01deg
    max_ret_jitter =locals().get('max_ret_jitter',2*ret_jitter_scale)
    #LGN RF sizes
    #Using magnification factor in um/deg
    mag_factor=locals().get('mag_factor',15.0)
    #LGN center size in deg
    center_size=locals().get('center_size',6.0)
    surround_size=locals().get('surround_size',17.0)
    #Total Retina size in degrees
    ret_deg_size=patches*330/mag_factor
    #LGN center size in sheet coordinates
    center_size_sc=center_size*mag_factor/330
    surround_size_sc=surround_size*mag_factor/330
    
   
    centerg   = Gaussian(size=center_size_sc,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())
    surroundg = Gaussian(size=surround_size_sc,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())

    #Receptive field sizes (radii)
    Afferent_size=surround_size_sc/2.0 #to account for full surround
    LGNAfferent_size=locals().get('LGNAfferent_size',1.52/2) #500um 
    Lat_inh_size=locals().get('Lat_inh_size',1.5) #should be 2mm but too big to include - made full extent of V1 area
    Lat_exc_size=locals().get('Lat_exc_size',0.23) #approx 150um diameter

 
    #0.3 mm corresponds to about 10 units from 2 photon in V1
    default_density = locals().get('default_density',10.0)
    #LGN density - from ratio of lgn to V1 size
    default_lgn_density = locals().get('default_lgn_density',10.0)
    #Retinal density to ensure smoothness
    default_retinal_density = locals().get('default_retinal_density',20.0)

    max_jitter=1.0/default_density*0.75

    #Sheet sizes - total of 2 photon patches
    V1_size = patches*1.0/2.0
    LGN_size = V1_size + LGNAfferent_size + max_jitter
    Retina_size= LGN_size + Afferent_size + max_ret_jitter
    
    
    ret_strength=locals().get('ret_strength',10)# increase in this case because lgn activity weak just speeds things up
    input_bounds=locals().get('input_bounds',LGN_size + Afferent_size)
  
    #Type of input
    dataset=locals().get('dataset',"Natural")

    gauss_size=locals().get('gauss_size',center_size_sc) 
    nat_size=locals().get('nat_size', Retina_size/5)
    aspect_ratio=locals().get('aspect_ratio',4)
    num_inputs=locals().get('num_inputs',1)
    scale= locals().get('scale', 1.0)

    #frequency and balance between afferent and lateral activity
    #frequency=locals().get('frequency',2) #2 for 2 gaussians 
    mu=locals().get('mu',0.01)
    #balance = locals().get('balance',4)
    afferent_target = locals().get('afferent_target',0.06)
    #target_lr=locals().get('target_lr', 0.04)


###############################################################
####Different input types which can be used for development###
#set the input type by choosing the dataset parameter 

#Set targets based on frequency of occurance of V1 activation

if dataset=="Gaussian":
    input_type=Gaussian
    #in the case where dataset=Gaussian, must also set the number of Gaussians per iteration, default is 2
    inputs=[input_type(x=UniformRandom(lbound=-input_bounds,ubound=input_bounds,seed=12+i),
                       y=UniformRandom(lbound=-input_bounds,ubound=input_bounds,seed=35+i),
                       orientation=UniformRandom(lbound=-pi,ubound=pi,seed=21+i),
                       size=gauss_size, aspect_ratio=aspect_ratio, scale=scale, bounds=BoundingBox(radius=input_bounds))
            #Set the contrast of the gaussian patterns by setting the scale parameter.
            for i in xrange(num_inputs)]
    
    combined_inputs = topo.pattern.basic.SeparatedComposite(min_separation=0,generators=inputs)
    
elif dataset=="Natural":
    
    input_type=topo.pattern.image.Image
    image_filenames=["/group/project/csng/images/mcgill_img/foliage/%02d.png"%(i+1) for i in xrange(98)]
    inputs=[input_type(filename=f,
                       size=nat_size, size_normalization='original',
                       x=UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                       y=UniformRandom(lbound=-0.75,ubound=0.75,seed=36),
                       orientation=UniformRandom(lbound=-pi,ubound=pi,seed=65))
		for f in image_filenames]

    combined_inputs =topo.pattern.basic.Selector(generators=inputs)

elif dataset=="NoisyDisks":
    disk_scale=locals().get('diskscale',0.35)
    #Set the contrast of the disk pattern by setting the disk_scale parameter, map development also depends on the contrast of the disk edges.
    input_type=topo.pattern.basic.Composite
    inputs=[input_type(operator=numpy.add,
                       generators=[topo.pattern.basic.Disk(x=UniformRandom(lbound=-2.125,ubound=2.125,seed=12),
                                                            y=UniformRandom(lbound=-2.125,ubound=2.125,seed=36),
                                                            size=2.0, aspect_ratio=1.0, scale=disk_scale,
                                                            offset=0.5,
                                                            bounds=BoundingBox(radius=input_bounds), smoothing=0.1),
                                   topo.pattern.random.UniformRandom(offset=locals().get('rand_offset',-0.5), scale=locals().get('rand_scale',1.0))])]
    #Set the scale of the noise by setting the rand_offset and rand_scale parameters, note that the disk/noise signal ratio also depends on the retinal density      
    combined_inputs =topo.pattern.basic.Selector(generators=inputs)

elif dataset=="Disks":
    disk_scale=locals().get('diskscale',0.5)
    input_type=topo.pattern.basic.Disk
    inputs=[input_type(x=UniformRandom(lbound=-2.125,ubound=2.125,seed=12),
                       y=UniformRandom(lbound=-2.125,ubound=2.125,seed=36),
                       size=2.0, aspect_ratio=1.0, scale=disk_scale,
                       offset=0.5,
                       bounds=BoundingBox(radius=input_bounds), smoothing=0.1)]
            
    combined_inputs =topo.pattern.basic.Selector(generators=inputs)

elif dataset=="NoisyDiskstoNatural":
    #This dataset mimics pre and post eye-opening development - scheduled changes must also be set to ensure the input pattern changes at simulated eye opening
    disk_scale=locals().get('diskscale',0.35)
    disks_input_type=topo.pattern.basic.Composite
    disks_inputs=[disks_input_type(operator=numpy.add,
                       generators=[topo.pattern.basic.Disk(x=UniformRandom(lbound=-2.125,ubound=2.125,seed=12),
                                                            y=UniformRandom(lbound=-2.125,ubound=2.125,seed=36),
                                                            size=2.0, aspect_ratio=1.0, scale=disk_scale,
                                                            offset=0.5,
                                                            bounds=BoundingBox(radius=input_bounds), smoothing=0.1),
                                   topo.pattern.random.UniformRandom(offset=locals().get('rand_offset',-0.5), scale=locals().get('rand_scale',1.0))])]

    combined_inputs =topo.pattern.basic.Selector(generators=disks_inputs)      
   
    
    natural_input_type=topo.pattern.image.Image
    image_filenames=["images/shouval/combined%02d.png"%(i+1) for i in xrange(25)]
    natural_inputs=[natural_input_type(filename=f,
                       size=10.0,  #size_normalization='original',(size=10.0)
                       x=UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                       y=UniformRandom(lbound=-0.75,ubound=0.75,seed=36),
                       orientation=UniformRandom(lbound=-pi,ubound=pi,seed=65))
		for f in image_filenames]

    natural_combined_inputs =topo.pattern.basic.Selector(generators=natural_inputs)

###############################################################################

#Sheet coordinates of units to track for debugging
units=locals().get('units',[(0.0, 0.0)])

#Smoothing value for exponential averaging
smoothing=locals().get('smoothing',0.999)
V1_smoothing=locals().get('V1_smoothing',0.999) # Allows different smoothing for averaging  V1 activity and averaging afferent activity.

#Output functions: Sheets
#LGN
LGN_on_output_fn=HalfRectify()
LGN_off_output_fn=HalfRectify()

#V1
Attrib_Tracker=AttributeTrackingOF(object="topo.sim['V1']", attrib_names=['x_avg', 'sf', 'scaled_x_avg'], units=units)
HE=HomeostaticMaxEnt(smoothing=V1_smoothing,
                     eta=locals().get('eta',0.016), mu=mu, step=9)
V1_Tracker=AttributeTrackingOF(object=HE, coordframe="topo.sim['V1']",attrib_names=['a', 'b','y_avg'], units=units, step=9)
V1_OF=PipelineOF(output_fns=[Attrib_Tracker, HE, V1_Tracker])
       
#Output Functions: Projections
#Debugging
#LGNOnAfferent
LGNOn_Avg=ActivityAveragingOF(smoothing=smoothing,step=1)
LGNOn_Tracker=AttributeTrackingOF(object=LGNOn_Avg,coordframe="topo.sim['V1']", attrib_names=['x_avg'], units=units, step=1)
LGNOn_OF = PipelineOF(output_fns=[LGNOn_Avg, LGNOn_Tracker])

#LGNOffAfferent
LGNOff_Avg=ActivityAveragingOF(smoothing=smoothing,step=1)
LGNOff_Tracker=AttributeTrackingOF(object=LGNOff_Avg,coordframe="topo.sim['V1']", attrib_names=['x_avg'], units=units, step=1)
LGNOff_OF = PipelineOF(output_fns=[LGNOff_Avg, LGNOff_Tracker])

#LateralExcitatory
LatEx_Avg=ActivityAveragingOF(initial_average=0.0,smoothing=smoothing,step=1)
LatEx_Tracker=AttributeTrackingOF(object=LatEx_Avg,coordframe="topo.sim['V1']", attrib_names=['x_avg'], units=units, step=1)
LatEx_OF = PipelineOF(output_fns=[LatEx_Avg, LatEx_Tracker])

#LateralInhibitory
LatIn_Avg=ActivityAveragingOF(initial_average=0.0,smoothing=smoothing,step=1)
LatIn_Tracker = AttributeTrackingOF(object=LatIn_Avg,coordframe="topo.sim['V1']", attrib_names=['x_avg'], units=units, step=1)
LatIn_OF = PipelineOF(output_fns=[LatIn_Avg, LatIn_Tracker])

# Specify weight initialization, response function, and learning function
CFProjection.cf_shape = topo.pattern.basic.Disk(smoothing=0.0)
CFProjection.weights_generator = topo.pattern.basic.Constant()
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()
SharedWeightCFProjection.response_fn=CFPRF_DotProduct_opt()


# DoG weights for the LGN
    
on_weights = topo.pattern.basic.Composite(
    generators=[centerg,surroundg],operator=numpy.subtract)

off_weights = topo.pattern.basic.Composite(
    generators=[surroundg,centerg],operator=numpy.subtract)

#Jitter 
ret_jitterOn = NormalJitter(gen=NormalRandom(seed=10, mu=0.0, sigma=ret_jitter_scale), max_value=max_ret_jitter)
ret_jitterOff = NormalJitter(gen=NormalRandom(seed=453, mu=0.0, sigma=ret_jitter_scale), max_value=max_ret_jitter)

max_jitter=1.0/default_density*0.75

cell_jitter_on=Jitter(gen=UniformRandom(seed=37), scale=max_jitter)
cell_jitter_off=Jitter(gen=UniformRandom(seed=37), scale=max_jitter)
cell_jitter_exc=Jitter(gen=UniformRandom(seed=37), scale=max_jitter)
cell_jitter_inh=Jitter(gen=UniformRandom(seed=37), scale=max_jitter)


###########################################
# build simulation

topo.sim['Retina']=GeneratorSheet(nominal_density=default_retinal_density,
                                  input_generator=combined_inputs,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=Retina_size))

topo.sim['LGNOn']=CFSheet(nominal_density=default_lgn_density,
                          nominal_bounds=BoundingBox(radius=LGN_size),
                          output_fn=LGN_on_output_fn,
                          measure_maps=False)

topo.sim['LGNOff']=CFSheet(nominal_density=default_lgn_density,
                           nominal_bounds=BoundingBox(radius=LGN_size),
                           output_fn=LGN_off_output_fn,
                           measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=default_density,
                        nominal_bounds=BoundingBox(radius=V1_size),tsettle=9,
                        plastic=True,output_fn=V1_OF)

#topo.sim['V1'] = JointScaling_affonly(nominal_density=default_density,
#                              nominal_bounds=BoundingBox(radius=V1_size),tsettle=9,
#                              plastic=True,output_fn=V1_OF,
#                              target=afferent_target,
#                              smoothing=smoothing)

topo.sim.connect('Retina','LGNOn',delay=FixedPoint("0.05"),
                 connection_type=SharedWeightCFProjection,coord_mapper=ret_jitterOn,strength=ret_strength,
                 nominal_bounds_template=BoundingBox(radius=Afferent_size),name='Afferent',
                 weights_generator=on_weights)

topo.sim.connect('Retina','LGNOff',delay = FixedPoint("0.05"),
                 connection_type=SharedWeightCFProjection,coord_mapper=ret_jitterOff,strength=ret_strength,
                 nominal_bounds_template=BoundingBox(radius=Afferent_size),name='Afferent',
                 weights_generator=off_weights)

topo.sim.connect('LGNOn','V1',delay=FixedPoint("0.05"), dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,coord_mapper=cell_jitter_on,
                 strength=1.0,name='LGNOnAfferent',
                 cf_shape=RandomDisk(gaussian_size=2*LGNAfferent_size),
                 threshold=off_probability,
                 weights_generator=topo.pattern.random.GaussianCloud(gaussian_size=2*LGNAfferent_size),
                 nominal_bounds_template=BoundingBox(radius=LGNAfferent_size))

on_units=topo.sim["V1"].projections()["LGNOnAfferent"].n_units()
topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=locals().get('aff_lr',0.0003)*on_units

topo.sim.connect('LGNOff','V1',delay=FixedPoint("0.05"), dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,coord_mapper=cell_jitter_off,
                 strength=1.0,name='LGNOffAfferent',
                 cf_shape=RandomDisk(gaussian_size=2*LGNAfferent_size),
                 threshold=off_probability,
                 weights_generator=topo.pattern.random.GaussianCloud(gaussian_size=2*LGNAfferent_size),
                 nominal_bounds_template=BoundingBox(radius=LGNAfferent_size))

off_units=topo.sim["V1"].projections()["LGNOffAfferent"].n_units()
topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=locals().get('aff_lr',0.0003)*off_units

topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralExcitatory',
                 connection_type=CFProjection,coord_mapper=cell_jitter_exc,
                 strength=1.0*locals().get('exc_strength',1.0),
                 weights_generator=topo.pattern.basic.Gaussian(aspect_ratio=1.0, size=Lat_exc_size*0.75),
                 nominal_bounds_template=BoundingBox(radius=Lat_exc_size),learning_rate=0.0) 

topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralInhibitory',
                 connection_type=CFProjection,coord_mapper=cell_jitter_inh,
                 strength=-1.0*locals().get('inh_strength',1.0),
                 weights_generator=topo.pattern.random.GaussianCloud(gaussian_size=Lat_inh_size),
                 nominal_bounds_template=BoundingBox(radius=Lat_inh_size),learning_rate=locals().get('lat_lr',1.80873))


#Output functions for tracking
topo.sim["V1"].projections()["LGNOnAfferent"].output_fn=LGNOn_OF
topo.sim["V1"].projections()["LGNOffAfferent"].output_fn=LGNOff_OF
topo.sim["V1"].projections()["LateralExcitatory"].output_fn=LatEx_OF
topo.sim["V1"].projections()["LateralInhibitory"].output_fn=LatIn_OF


# default locations for model editor
topo.sim.grid_layout([[None,    'V1',     None],
                      ['LGNOn', None,     'LGNOff'],
                      [None,    'Retina', None]], xstart=150)

### Input pattern changes
changetime = locals().get('changetime',6000)# Time at which patterns or strengths are set to change

changetargets = locals().get('changetargets',True) #If false, targets for afferent scaling and output function adjustment are not changed.
if dataset=="NoisyDiskstoNatural":
    if changetargets==True:
        new_frequency = locals().get('new_frequency',5)
        new_balance = locals().get('new_balance',4)
        new_mu=0.0045*new_frequency
        new_afferent_target = new_mu*new_balance
        topo.sim.schedule_command(changetime,'topo.sim["Retina"].set_input_generator(natural_combined_inputs,push_existing=False)')
        topo.sim.schedule_command(changetime,'topo.sim["V1"].target=new_afferent_target')
        if tracking==True:
            topo.sim.schedule_command(changetime,'topo.sim["V1"].output_fn.output_fns[1].mu=new_mu')
        else:
            topo.sim.schedule_command(changetime,'topo.sim["V1"].output_fn.mu=new_mu')
    else:
        topo.sim.schedule_command(changetime,'topo.sim["Retina"].set_input_generator(natural_combined_inputs,push_existing=False)')


#can set strength of retina to lgn projections to change during development  
changestrength = locals().get('changestrength',False)
if changestrength==True:
    new_strength = locals().get('new_strength',2.0)
    topo.sim.schedule_command(changetime,'topo.sim["LGNOn"].projections()["Afferent"].strength=new_strength')
    topo.sim.schedule_command(changetime,'topo.sim["LGNOff"].projections()["Afferent"].strength=new_strength')


apply_output_fn = locals().get('apply_output_fn',False)

if species=="cat":
    if apply_output_fn==True:
        topo.plotting.plotgroup.plotgroups["Orientation Preference"].pre_plot_hooks="measure_or_pref(scale=0.1,frequencies=[0.48],pattern_presenter=PatternPresenter(pattern_generator=SineGrating(),apply_output_fn=True,duration=1.0))"
        topo.plotting.plotgroup.plotgroups["Retinotopy"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[0.48],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=False, apply_output_fn=True,duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Retinotopy_XY"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[0.48],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=True, apply_output_fn=True,duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Bar X Preference"].pre_plot_hooks="sweeping_bar_x_pref(thickness=1.04,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=True, duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Bar Y Preference"].pre_plot_hooks="sweeping_bar_y_pref(thickness=1.04,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=True, duration=1.0)"
    else:
        topo.plotting.plotgroup.plotgroups["Orientation Preference"].pre_plot_hooks="measure_or_pref(frequencies=[0.48],pattern_presenter=PatternPresenter(pattern_generator=SineGrating(),apply_output_fn=False,duration=0.175))"
        topo.plotting.plotgroup.plotgroups["Retinotopy"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[0.48],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=False, apply_output_fn=False,duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Retinotopy_XY"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[0.48],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=True, apply_output_fn=False,duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Bar X Preference"].pre_plot_hooks="sweeping_bar_x_pref(thickness=1.04,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=False, duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Bar Y Preference"].pre_plot_hooks="sweeping_bar_y_pref(thickness=1.04,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=False, duration=0.175)"


elif species=="mouse":
    if apply_output_fn==True:
        topo.plotting.plotgroup.plotgroups["Orientation Preference"].pre_plot_hooks="measure_or_pref(frequencies=[1.83],pattern_presenter=PatternPresenter(pattern_generator=SineGrating(),apply_output_fn=True,duration=1.0))"
        topo.plotting.plotgroup.plotgroups["Retinotopy"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[1.83],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=False, apply_output_fn=True,duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Retinotopy_XY"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[1.83],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=True, apply_output_fn=True,duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Bar X Preference"].pre_plot_hooks="sweeping_bar_x_pref(thickness=0.27,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=True, duration=1.0)"
        topo.plotting.plotgroup.plotgroups["Bar Y Preference"].pre_plot_hooks="sweeping_bar_y_pref(thickness=0.27,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=True, duration=1.0)"
    else:  
        topo.plotting.plotgroup.plotgroups["Orientation Preference"].pre_plot_hooks="measure_or_pref(frequencies=[1.83],pattern_presenter=PatternPresenter(pattern_generator=SineGrating(),apply_output_fn=False,duration=0.175))"
        topo.plotting.plotgroup.plotgroups["Retinotopy"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[1.83],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=False, apply_output_fn=False,duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Retinotopy_XY"].pre_plot_hooks="measure_retinotopy(num_phase=18,num_orientation=4,frequencies=[1.83],divisions=4,scale=1.0,offset=0.0,display=False, weighted_average=True, apply_output_fn=False,duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Bar X Preference"].pre_plot_hooks="sweeping_bar_x_pref(thickness=0.27,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=False, duration=0.175)"
        topo.plotting.plotgroup.plotgroups["Bar Y Preference"].pre_plot_hooks="sweeping_bar_y_pref(thickness=0.27,scale=0.3,offset=0.0,weighted_average=True, display=False, output_fn=False, duration=0.175)"

topo.analysis.featureresponses.FeatureMaps.selectivity_multiplier=1.0
