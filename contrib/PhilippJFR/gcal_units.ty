#JABALERT: Should update the docstring once the GCA paper has been
# accepted or at least submitted.
"""
GCAL

Work in progress on an improved version of the LISSOM orientation map
simulation from figure 5.9 of Miikkulainen, Bednar, Choe, and Sirosh
(2005), Computational Maps in the Visual Cortex, Springer.  Important
differences include:

 - Using divisive normalization to the LGN to provide contrast gain control (GC)
   and contrast-invariant tuning
 - Using homeostatic adaptation (A) rather than manual threshold adjustment,
   to avoid the need for most parameter adjustment and to be more robust
 - Using a fixed lateral excitatory radius rather than shrinking it
   (now that homeostatic plasticity allows all neurons to develop robustly) 

$Id$
"""
__version__='$Revision$'


from math import pi

import numpy
import param

from topo import learningfn,numbergen,transferfn,pattern,projection,responsefn,sheet

import topo.learningfn.optimized
import topo.learningfn.projfn 
import topo.transferfn.optimized 
import topo.pattern.random
import topo.pattern.image
import topo.responsefn.optimized 
import topo.sheet.lissom
import topo.sheet.optimized

import topo.transferfn.misc
from topo.base.arrayutil import DivideWithConstant

from topo.misc import unitsupport
unitsupport.Conversions.set_package('Quantities')
vdeg = unitsupport.Conversions.declare_unit('vdeg', None, 'Degrees of Visual Angle')
mm = unitsupport.Conversions.get_unit('mm')
ms = unitsupport.Conversions.get_unit('ms')

# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p
p.add(

    dataset=param.ObjectSelector(default='Gaussian',objects=
        ['Gaussian','Nature'],doc="""
        Set of input patterns to use::

          :'Gaussian': Two-dimensional Gaussians
          :'Nature':   Shouval's 1999 monochrome 256x256 images"""),

    num_inputs=param.Integer(default=2,bounds=(1,None),doc="""
        How many input patterns to present per unit area at each
        iteration, when using discrete patterns (e.g. Gaussians)."""),

    unit_time=param.Number(default=200*ms,doc="""
	Length of time represented by 1.0 period in Topographica
	time"""),

    area=param.Number(default=1.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        Linear size of cortical area to simulate.
        2.0 gives a 2.0x2.0 Sheet area in V1."""),

    vdeg_per_sc=param.Number(default=1.333333*vdeg,doc="""
        Degrees of visual angle per unit area in sheet coordinates."""),

    retina_density=param.Number(default=24.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the retina."""),

    retina_mf=param.Number(default=0.2*mm,doc="""
        The magnification factor of the retinal sheet, expressed
        per degree of visual angle."""),

    lgn_density=param.Number(default=24.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the LGN."""),

    lgn_mf=param.Number(default=0.3*mm,doc="""
        The magnification factor of the LGN sheets, expressed
        per degree of visual angle."""),

    cortex_density=param.Number(default=48.0,bounds=(0,None),
        inclusive_bounds=(False,True),doc="""
        The nominal_density to use for V1."""),

    cortex_mf=param.Number(default=3.0*mm,doc="""
        The magnification factor of the cortical sheet, expressed
        per degree of visual angle."""),

    scale=param.Number(default=0.7,inclusive_bounds=(False,True),doc="""
        Brightness of the input patterns"""),

    aff_strength=param.Number(default=1.5,bounds=(0.0,None),doc="""
        Overall strength of the afferent projection to V1."""),

    exc_strength=param.Number(default=1.7,bounds=(0.0,None),doc="""
        Overall strength of the lateral excitatory projection to V1."""),

    inh_strength=param.Number(default=1.4,bounds=(0.0,None),doc="""
        Overall strength of the lateral inhibitory projection to V1."""),

    aff_lr=param.Number(default=0.1,bounds=(0.0,None),doc="""
        Learning rate for the afferent projection to V1."""),

    exc_lr=param.Number(default=0.0,bounds=(0.0,None),doc="""
        Learning rate for the lateral excitatory projection to V1."""),

    inh_lr=param.Number(default=0.3,bounds=(0.0,None),doc="""
        Learning rate for the lateral inhibitory projection to V1."""))

### Set up unit conversion objects and install unit stripping hooks where necessary
unitsupport.Conversions.declare_unit('sc',p.vdeg_per_sc,'Sheet Coordinates',base=True)
unitsupport.Conversions.declare_unit('bt',p.unit_time,'Base Time',base=True)
retina_scales = unitsupport.Conversions([(vdeg,p.retina_mf)])
lgn_scales = unitsupport.Conversions([(vdeg,p.lgn_mf)])
v1_scales = unitsupport.Conversions([(vdeg,p.cortex_mf)])

### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()

### Input patterns
if p.dataset=="Gaussian":
    input_type=pattern.Gaussian
    total_num_inputs=int(p.num_inputs*p.area*p.area)
    inputs=[input_type(x=numbergen.UniformRandom(lbound=-1.0*vdeg,
                                                 ubound= 1.0*vdeg,seed=12+i,unit_conversions=retina_scales),
                       y=numbergen.UniformRandom(lbound=-1.0*vdeg,
                                                 ubound= 1.0*vdeg,seed=35+i,unit_conversions=retina_scales),
                       orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=21+i),
                       size=0.11785*vdeg, aspect_ratio=4.66667, scale=p.scale, unit_conversions=retina_scales)
            for i in xrange(total_num_inputs)]

    combined_inputs = pattern.SeparatedComposite(min_separation=0,generators=inputs)
    
elif p.dataset=="Nature":
    input_type=pattern.image.FileImage
    image_filenames=["images/shouval/combined%02d.png"%(i+1) for i in xrange(25)]
    inputs=[input_type(filename=f,
                       size=10.0,  #size_normalization='original',(size=10.0)
                       x=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                       y=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=36),
                       orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=65),
                       unit_conversions=retina_scales)
        for f in image_filenames]

    combined_inputs =pattern.Selector(generators=inputs)

### Sheets
topo.sim['Retina']=sheet.GeneratorSheet(nominal_density=p.retina_density,
    input_generator=combined_inputs, period=1.0, phase=0.05, unit_conversions=retina_scales,
    nominal_bounds=sheet.BoundingBox(radius=2.16667*vdeg))


# LGN has lateral connections for divisive normalization.
for s in ['LGNOn','LGNOff']:
    topo.sim[s]=sheet.optimized.LISSOM_Opt(nominal_density=p.lgn_density,
        nominal_bounds=sheet.BoundingBox(radius=1.66667*vdeg),
        output_fns=[transferfn.misc.HalfRectify()],tsettle=2,strict_tsettle=1,
        measure_maps=False, unit_conversions=lgn_scales)

    lgn_surroundg = pattern.Gaussian(size=0.33333*vdeg,aspect_ratio=1.0,
        output_fns=[transferfn.DivisiveNormalizeL1()], unit_conversions=lgn_scales)

    topo.sim.connect(s,s,delay=10*ms,name='LateralGC',dest_port=('Activity'),                     
        activity_group=(0.6,DivideWithConstant(c=0.11)),
        connection_type=projection.SharedWeightCFProjection,
        strength=0.6,weights_generator=lgn_surroundg,
        nominal_bounds_template=sheet.BoundingBox(radius=0.33333*vdeg))


topo.sim['V1'] = sheet.lissom.LISSOM(nominal_density=p.cortex_density,
    tsettle=16, plastic=True, 
    nominal_bounds=sheet.BoundingBox(radius=0.66667*vdeg),
    output_fns=[transferfn.misc.HomeostaticResponse()], unit_conversions=v1_scales)

topo.sim['V1'].joint_norm_fn=topo.sheet.optimized.compute_joint_norm_totals_opt


### Connections

# DoG weights for the LGN
centerg   = pattern.Gaussian(size=0.098467*vdeg,aspect_ratio=1.0, unit_conversions=retina_scales,
                             output_fns=[transferfn.DivisiveNormalizeL1()])
surroundg = pattern.Gaussian(size=0.393867*vdeg,aspect_ratio=1.0, unit_conversions=retina_scales,
                             output_fns=[transferfn.DivisiveNormalizeL1()])
    
on_weights = pattern.Composite(
    generators=[centerg,surroundg],operator=numpy.subtract)

off_weights = pattern.Composite(
    generators=[surroundg,centerg],operator=numpy.subtract)

topo.sim.connect(
    'Retina','LGNOn',delay=10*ms,strength=2.33,name='Afferent',
    connection_type=projection.SharedWeightCFProjection,
    nominal_bounds_template=sheet.BoundingBox(radius=0.5*vdeg),
    weights_generator=on_weights)

topo.sim.connect(
    'Retina','LGNOff',delay=10*ms,strength=2.33,name='Afferent',
    connection_type=projection.SharedWeightCFProjection,
    nominal_bounds_template=sheet.BoundingBox(radius=0.5*vdeg),
    weights_generator=off_weights)

topo.sim.connect(
    'LGNOn','V1',delay=10*ms,strength=p.aff_strength,name='LGNOnAfferent',
    dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection,learning_rate=p.aff_lr,
    nominal_bounds_template=sheet.BoundingBox(radius=0.361106*vdeg),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.361107*vdeg,
    unit_conversions=lgn_scales),learning_fn=learningfn.optimized.CFPLF_Hebbian_opt())
                     
topo.sim.connect(
    'LGNOff','V1',delay=10*ms,strength=p.aff_strength,name='LGNOffAfferent',
    dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection,learning_rate=p.aff_lr,
    nominal_bounds_template=sheet.BoundingBox(radius=0.361107*vdeg),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.361107*vdeg,
    unit_conversions=lgn_scales),learning_fn=learningfn.optimized.CFPLF_Hebbian_opt())

topo.sim.connect(
    'V1','V1',delay=10*ms,strength=p.exc_strength,name='LateralExcitatory',
    connection_type=projection.CFProjection,learning_rate=p.exc_lr,
    nominal_bounds_template=sheet.BoundingBox(radius=0.138667*vdeg),
    weights_generator=pattern.Gaussian(aspect_ratio=1.0, size=0.066667*vdeg,
    unit_conversions=v1_scales))

topo.sim.connect(
    'V1','V1',delay=10*ms,strength=-1.0*p.inh_strength,name='LateralInhibitory',
    connection_type=projection.CFProjection,learning_rate=p.inh_lr,
    nominal_bounds_template=sheet.BoundingBox(radius=0.30556*vdeg),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=0.2*vdeg,
    unit_conversions=v1_scales))


### Default locations for model editor
topo.sim.grid_layout([[None,    'V1',     None],
                      ['LGNOn', None,     'LGNOff'],
                      [None,    'Retina', None]], xstart=150,item_scale=0.8)

### Set up appropriate defaults for analysis

import topo.analysis.featureresponses
topo.analysis.featureresponses.FeatureMaps.selectivity_multiplier=2.0
topo.analysis.featureresponses.FeatureCurveCommand.apply_output_fns=True
topo.analysis.featureresponses.FeatureCurveCommand.curve_parameters=[{"contrast":1},{"contrast":10},{"contrast":30},{"contrast":50},{"contrast":100}]

