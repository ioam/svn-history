"""
Bilal Khan

Test script for a simple auditory system using GCAL without the GC.
"""
__version__='$Revision: 11027 $'

import param
from topo.misc.commandline import global_params as parameters

from topo import learningfn, transferfn, pattern, projection, responsefn, sheet

import topo.responsefn.optimized
import topo.transferfn.optimized
import topo.learningfn.optimized
import topo.transferfn.misc
import topo.sheet.lissom
import topo.sheet.optimized
import topo.pattern.random

from numpy import hanning
from topo.pattern.basic import PowerSpectrum, Spectrogram, TimeSeriesParam
from topo.pattern.audio import AudioFile, AudioFolder, OctaveSpectrogram



parameters.add(
    # Guitar rendition of Daisy Bell, in tribute to the IBM 704, which in 1962 became the first computer ever to 'sing'.
    audio_data = TimeSeriesParam(default=AudioFile(filename="sounds/complex/daisy.wav", seconds_per_iteration=0.001, interval_length=0.2), 
        doc = """The default source of audio data for the model."""),

    receptor_density = param.Number(default=100.0, bounds=(0.0,None), 
        doc = """The nominal_density to use for the receptor."""),

    subcortical_density = param.Number(default=50.0, bounds=(0.0,None),         
        doc = """The nominal_density to use for the sub cortical sheet."""),

    cortex_density = param.Number(default=50.0, bounds=(0.0,None), 
        doc = """The nominal_density to use for the cortex sheet."""),

    afferent_strength = param.Number(default=1.5,bounds=(0.0,None), 
        doc = """Overall strength of the afferent projection to the cortex."""),

    excitatory_strength = param.Number(default=1.7,bounds=(0.0,None), 
        doc = """Overall strength of the lateral excitatory projection to the cortex."""),

    inhibitory_strength = param.Number(default=1.4,bounds=(0.0,None), 
        doc = """Overall strength of the lateral inhibitory projection to the cortex."""),

    afferent_lr = param.Number(default=0.1,bounds=(0.0,None), 
        doc = """Learning rate for the afferent projection to the cortex."""),

    excitatory_lr = param.Number(default=0.0,bounds=(0.0,None), 
        doc = """Learning rate for the lateral excitatory projection to the cortex."""),

    inhibitory_lr = param.Number(default=0.3,bounds=(0.0,None), 
        doc = """Learning rate for the lateral inhibitory projection to the cortex."""))



### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Constant()
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()



### Audio pattern generator
"""
All STRFs employed come from the domestic cat. Audible frequency range of the  cat is in fact 48-85,000Hz. 
(Hearing range of the domestic cat, Hearing Research 19, p85-88, 1985, R.Heffner, H.Heffner)

We can't get anywhere near this with the ubiquitous audio sample rate of 44,100Hz, which spans 
the range 0-22,050Hz, so we confine to the human audible range 20-20,000Hz.
"""

# scale for daisy = 11,100 so scale = 0.00009

spectrogram = OctaveSpectrogram(signal=parameters.audio_data, min_frequency=20, max_frequency=20000, 
    min_latency=10, max_latency=110, windowing_function=hanning, scale=0.00009)



### Calibration Tools

#calibration_sheet_size = (0.35,0.1) # 35 msecs, 10 frequency bins (1 octave)
#calibration_sheet_dimensions = ((-calibration_sheet_size[0]/2, -calibration_sheet_size[1]/2), (calibration_sheet_size[0]/2, calibration_sheet_size[1]/2))

#topo.sim['Calibration']=sheet.GeneratorSheet(nominal_density=parameters.receptor_density, nominal_bounds=sheet.BoundingBox(points=calibration_sheet_dimensions))
    
    

### Sheets
receptor_size = (1.0,1.0) # 100 msecs, 100 frequency bins (10 octaves)
receptor_dimensions = ((-receptor_size[0]/2, -receptor_size[1]/2), (receptor_size[0]/2, receptor_size[1]/2))

topo.sim['Receptor']=sheet.GeneratorSheet(nominal_density=parameters.receptor_density, input_generator=spectrogram, period=1.0, phase=0.05, 
    nominal_bounds=sheet.BoundingBox(points=receptor_dimensions))


subcortical_connection_size = (0.35,0.1) # 35 msecs, 1 octave
#subcortical_size = (receptor_size[0]-subcortical_connection_size[0], receptor_size[1]-subcortical_connection_size[1])
subcortical_size = (receptor_size[0], receptor_size[1])
subcortical_dimensions = ((-subcortical_size[0]/2, -subcortical_size[1]/2), (subcortical_size[0]/2, subcortical_size[1]/2))
                   
topo.sim['Subcortical']=sheet.CFSheet(nominal_density=parameters.subcortical_density, 
    nominal_bounds=sheet.BoundingBox(points=subcortical_dimensions), output_fns=[transferfn.misc.HalfRectify()])


# BK-NOTE: All to all connection, so no need for edge buffering.
cortex_connection_size = (0.0,0.0)
cortex_size = (subcortical_size[0]-cortex_connection_size[0], subcortical_size[1]-cortex_connection_size[1])
cortex_dimensions = ((-cortex_size[0]/2, -cortex_size[1]/2), (cortex_size[0]/2, cortex_size[1]/2))

topo.sim['Cortex'] = sheet.lissom.LISSOM(nominal_density=parameters.cortex_density, tsettle=16, plastic=True, 
    nominal_bounds=sheet.BoundingBox(points=cortex_dimensions), output_fns=[transferfn.misc.HomeostaticResponse()])

topo.sim['Cortex'].joint_norm_fn = topo.sheet.optimized.compute_joint_norm_totals_opt



### Connections
"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1."""
subcortical_connection_dimensions = ((-subcortical_connection_size[0]/2, -subcortical_connection_size[1]/2), 
    (subcortical_connection_size[0]/2, subcortical_connection_size[1]/2))
    
strf = pattern.SigmoidedDoLG(sigmoid_slope=50.0, sigmoid_orientation=pi/2.0, sigmoid_position=0.05, x=-0.1,
        positive_aspect_ratio=0.5, positive_scale=5.0, positive_size= 0.5, positive_x_shape=0.8, positive_y_shape=0.35,
        negative_aspect_ratio=0.3, negative_scale=1.0, negative_size= 0.8, negative_x_shape=0.8, negative_y_shape=0.35)

topo.sim.connect('Receptor', 'Subcortical', name='Receptor Afferent', weights_generator=strf,
    nominal_bounds_template=sheet.BoundingBox(points=subcortical_connection_dimensions), learning_rate=0.0,
    connection_type=projection.SharedWeightCFProjection, delay=0.05, strength=1.0, weights_output_fns=[])


cortical_connection_dimensions = ((-subcortical_size[0], -subcortical_size[1]), (subcortical_size[0], subcortical_size[1]))


topo.sim.connect('Subcortical', 'Cortex', name='Subcortical Afferent', 
    #weights_generator=pattern.random.UniformRandom(),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=cortical_connection_dimensions), 
    connection_type=projection.CFProjection, delay=0.05, strength=parameters.afferent_strength, learning_rate=parameters.afferent_lr, learning_fn=learningfn.optimized.CFPLF_Hebbian_opt())


#rf = pattern.random.GaussianCloud(gaussian_size=0.10417)
rf = pattern.Gaussian(aspect_ratio=1.0, size=0.05)

topo.sim.connect('Cortex', 'Cortex', name='Lateral Excitatory', weights_generator=rf,
    nominal_bounds_template=sheet.BoundingBox(radius=0.104),learning_rate=parameters.excitatory_lr,
    connection_type=projection.CFProjection, delay=0.05, strength=parameters.excitatory_strength)
        

#rf = pattern.random.GaussianCloud(gaussian_size=0.22917)
rf = pattern.random.GaussianCloud(gaussian_size=0.15)

topo.sim.connect('Cortex', 'Cortex', name='Lateral Inhibitory', weights_generator=rf,
    nominal_bounds_template=sheet.BoundingBox(radius=0.22917), learning_rate=parameters.inhibitory_lr,
    connection_type=projection.CFProjection, delay=0.05, strength=-1.0*parameters.inhibitory_strength)



### Set up appropriate defaults for analysis

# Measure feature maps based on unthresholded initial response for speed and reliability.
from topo.analysis.featureresponses import MeasureResponseCommand

MeasureResponseCommand.duration = 0.175
MeasureResponseCommand.apply_output_fns = False
