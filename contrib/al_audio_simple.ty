"""
Bilal Khan

Test script for a simple auditory system using GCAL without the GC.
"""
__version__='$Revision: 11027 $'

import param
from topo.misc.commandline import global_params as parameters


from topo import learningfn, transferfn, pattern, projection, responsefn, sheet

import topo.responsefn.optimized
import topo.transferfn.optimized
import topo.learningfn.optimized
import topo.transferfn.misc
import topo.sheet.lissom
import topo.sheet.optimized
import topo.pattern.random

from topo.pattern.audio import AudioFile, AudioFolder
from topo.pattern.basic import Spectrogram
from numpy import hanning


parameters.add(
    receptor_density = param.Number(default=100.0, bounds=(0.0,None), 
        doc = """The nominal_density to use for the receptor."""),
        
    subcortical_density = param.Number(default=50.0, bounds=(0.0,None), 
        doc = """The nominal_density to use for the sub cortical sheet."""),

    cortex_density = param.Number(default=50.0, bounds=(0.0,None), 
        doc = """The nominal_density to use for the cortex sheet."""),

    afferent_strength = param.Number(default=1.5,bounds=(0.0,None), 
        doc = """Overall strength of the afferent projection to the cortex."""),

    excitatory_strength = param.Number(default=1.7,bounds=(0.0,None), 
        doc = """Overall strength of the lateral excitatory projection to the cortex."""),

    inhibitory_strength = param.Number(default=1.4,bounds=(0.0,None), 
        doc = """Overall strength of the lateral inhibitory projection to the cortex."""),

    afferent_lr = param.Number(default=0.1,bounds=(0.0,None), 
        doc = """Learning rate for the afferent projection to the cortex."""),

    excitatory_lr = param.Number(default=0.0,bounds=(0.0,None), 
        doc = """Learning rate for the lateral excitatory projection to the cortex."""),

    inhibitory_lr = param.Number(default=0.3,bounds=(0.0,None), 
        doc = """Learning rate for the lateral inhibitory projection to the cortex."""))


# BK-Alert: what does this all do?
### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()


### Audio pattern generator
"""
All STRFs employed come from the domestic cat. Audible frequency range of the  cat is in fact 48-85,000Hz. 
(Hearing range of the domestic cat, Hearing Research 19, p85-88, 1985, R.Heffner, H.Heffner)

We can't get anywhere near this with the ubiquitous audio sample rate of 44,100Hz, which spans 
the range 0-22,050Hz, so we confine to the human audible range 20-20,000Hz.
"""

# Guitar rendition of Daisy Bell, in tribute to the IBM 704, which in 1962 became the first computer ever to 'sing'.
audio_data = AudioFile(filename="sounds/complex/daisy.wav", seconds_per_iteration=0.001, interval_length=0.2)

# Normalised sine waves in the interval 20Hz - 20KHz.
#audio_data = AudioFolder(folderpath="sounds/sine_waves/normalized", seconds_per_iteration=0.001, interval_length=0.2)

# Set of natural sounds from forrests/woods/rivers/etc.
#audio_data = AudioFolder(folderpath="/Users/University/Music/iTunes/iTunes Media/Music/Wave (Mono)", seconds_per_iteration=0.001, interval_length=0.2)

spectrogram = Spectrogram(signal=audio_data, min_frequency=20, max_frequency=20000, windowing_function=hanning)


### Sheets
receptor_size = (1.0,1.0) # 100 msecs, 100 frequency bins (10 octaves)
receptor_dimensions = ((-receptor_size[0]/2, -receptor_size[1]/2), (receptor_size[0]/2, receptor_size[1]/2))

topo.sim['Receptor']=sheet.GeneratorSheet(nominal_density=parameters.receptor_density, input_generator=spectrogram,
    nominal_bounds=sheet.BoundingBox(points=receptor_dimensions), output_fns=[transferfn.DivisiveNormalizeL1()])


subcortical_connection_size = (0.2,0.1) # 20 msecs, 1 octave
subcortical_size = (receptor_size[0]-subcortical_connection_size[0], receptor_size[1])
subcortical_dimensions = ((-subcortical_size[0]/2, -subcortical_size[1]/2), (subcortical_size[0]/2, subcortical_size[1]/2))
                   
topo.sim['Subcortical']=sheet.CFSheet(nominal_density=parameters.subcortical_density, 
    nominal_bounds=sheet.BoundingBox(points=subcortical_dimensions), output_fns=[transferfn.misc.HalfRectify()])


cortex_connection_size = (0.27083,0.27083)        
cortex_size = (subcortical_size[0]-cortex_connection_size[0], subcortical_size[1])
cortex_dimensions = ((-cortex_size[0]/2, -cortex_size[1]/2), (cortex_size[0]/2, cortex_size[1]/2))

topo.sim['Cortex'] = sheet.lissom.LISSOM(nominal_density=parameters.cortex_density, tsettle=16, plastic=True, 
    nominal_bounds=sheet.BoundingBox(points=), output_fns=[transferfn.misc.HomeostaticResponse()])

topo.sim['Cortex'].joint_norm_fn = topo.sheet.optimized.compute_joint_norm_totals_opt


### Connections

#"""SigmoidedDoG pattern, very rough MGBv STRF calibrated entirely by eye."""
#topo.sim.connect('Cochlea', 'MGBv', name='Cochlea Afferent', delay=0.05, 
#    nominal_bounds_template=sheet.BoundingBox(
#        points=((-mgbv_connection_dimensions[0]/2, -mgbv_connection_dimensions[1]/2),
#            (mgbv_connection_dimensions[0]/2, mgbv_connection_dimensions[1]/2))),
#    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
#    weights_generator=pattern.SigmoidedDoG(positive_size=0.03, positive_aspect_ratio=3.9,
#        negative_size=0.09, negative_aspect_ratio=1.8, sigmoid_slope=20.0, 
#        sigmoid_x=0.01, size=0.5))



#"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1."""     
#topo.sim.connect('Cochlea', 'MGBv_Onset', name='Cochlea Afferent 1', delay=0.05, 
#    nominal_bounds_template=sheet.BoundingBox(
#        points=((-mgbv_onset_connection_dimensions[0]/2, -mgbv_onset_connection_dimensions[1]/2),
#            (mgbv_onset_connection_dimensions[0]/2, mgbv_onset_connection_dimensions[1]/2))),
#    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
#    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
#        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5))

#"""DoG pattern, MGBv STRF calibrated by eye to fit spectral dimension of Miller et al. (2002) Figure 1. 
#and provide a sustained response. In other words identical to the Miller STRF but with no temporal inhibition."""     
#topo.sim.connect('Cochlea', 'MGBv_Sustained', name='Cochlea Afferent 2', delay=0.05, 
#    nominal_bounds_template=sheet.BoundingBox(
#        points=((-mgbv_sustained_connection_dimensions[0]/2, -mgbv_sustained_connection_dimensions[1]/2),
#            (mgbv_sustained_connection_dimensions[0]/2, mgbv_sustained_connection_dimensions[1]/2))),
#    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
#    weights_generator=pattern.DifferenceOfGaussians(positive_size=0.05,positive_aspect_ratio=100.0,
#        negative_size=0.06,negative_aspect_ratio=100.0, size=0.5))

#"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1.
#and provide an offset response. In other words identical to the Miller STRF but rotated by pi."""     
#topo.sim.connect('Cochlea', 'MGBv_Offset', name='Cochlea Afferent 3', delay=0.05, 
#    nominal_bounds_template=sheet.BoundingBox(
#        points=((-mgbv_offset_connection_dimensions[0]/2, -mgbv_offset_connection_dimensions[1]/2),
#            (mgbv_offset_connection_dimensions[0]/2, mgbv_offset_connection_dimensions[1]/2))),
#    connection_type=projection.CFProjection, cf_shape=pattern.Constant(), strength=1.0, 
#    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
#        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5,orientation=pi))





"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1.
and provide an offset response. In other words identical to the Miller STRF but rotated by pi."""     
topo.sim.connect('Cochlea', 'MGBv_Onset', name='Cochlea Afferent 1', delay=0.05, 
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_offset_connection_dimensions[0]/2, -mgbv_offset_connection_dimensions[1]/2),
            (mgbv_offset_connection_dimensions[0]/2, mgbv_offset_connection_dimensions[1]/2))),
    connection_type=projection.CFProjection, strength=1.0, 
    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5,orientation=0.0))

"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1.
and provide an offset response. In other words identical to the Miller STRF but rotated by pi."""     
topo.sim.connect('Cochlea', 'MGBv_Sustained', name='Cochlea Afferent 2', delay=0.05, 
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_offset_connection_dimensions[0]/2, -mgbv_offset_connection_dimensions[1]/2),
            (mgbv_offset_connection_dimensions[0]/2, mgbv_offset_connection_dimensions[1]/2))),
    connection_type=projection.CFProjection, strength=1.0, 
    weights_generator=pattern.SigmoidedDoLG(sigmoid_slope=50.0,sigmoid_orientation=pi/2.0,sigmoid_position=0.015,
        positive_size=0.15,positive_tail=0.6,negative_size=0.35,negative_tail=0.5,orientation=0.0))

"""SigmoidedDoLG pattern, MGBv STRF calibrated by eye to fit Miller et al. (2002) Figure 1.
and provide an offset response. In other words identical to the Miller STRF but rotated by pi."""     

connection_field = ((-mgbv_offset_connection_dimensions[0]/2, -mgbv_offset_connection_dimensions[1]/2),
    (mgbv_offset_connection_dimensions[0]/2, mgbv_offset_connection_dimensions[1]/2))

strf = pattern.SigmoidedDoLG(sigmoid_slope=50.0, sigmoid_orientation=pi/2.0, sigmoid_position=0.015,
    positive_size=0.15, positive_tail=0.6, negative_size=0.35, negative_tail=0.5, orientation=0.0)
        
topo.sim.connect('Cochlea', 'MGBv_Offset', name='Cochlea Afferent 3', delay=0.05, weights_generator=strf, strength=1.0,
    nominal_bounds_template=sheet.BoundingBox(points=connection_field), connection_type=projection.CFProjection)
             
             
             
             
                                   
topo.sim.connect(
    'MGBv_Onset', 'A1', name='MGB Onset Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))

topo.sim.connect(
    'MGBv_Offset', 'A1', name='MGB Offset Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))

topo.sim.connect(
    'MGBv_Sustained', 'A1', name='MGB Sustained Afferent', dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection, delay=0.05, learning_rate=0.9590/8, 
    strength=1.0, weights_generator=pattern.random.GaussianCloud(gaussian_size=0.27083),
    nominal_bounds_template=sheet.BoundingBox(points=((-a1_connection_dimensions[0]/2, 
        -a1_connection_dimensions[1]/2), (a1_connection_dimensions[0]/2, 
        a1_connection_dimensions[1]/2))))
        
topo.sim.connect(
    'A1', 'A1', name='Lateral Excitatory', delay=0.05, strength=0.9,
    connection_type=projection.ResizableCFProjection, learning_rate=2.55528,
    nominal_bounds_template=sheet.BoundingBox(radius=0.10417),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=0.10417))
        
topo.sim.connect(
    'A1', 'A1', name='Lateral Inhibitory', delay=0.05, strength=-0.9,
    connection_type=projection.CFProjection, learning_rate=1.80873,
    nominal_bounds_template=sheet.BoundingBox(radius=0.22917),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=0.22917))


### Set up appropriate defaults for analysis

# Measure feature maps based on unthresholded initial response
# for speed and reliability.
from topo.analysis.featureresponses import MeasureResponseCommand

MeasureResponseCommand.duration = 0.175
MeasureResponseCommand.apply_output_fns = False
