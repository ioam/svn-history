"""
Bilal work in progress

$Id: lissom_oo_or.ty 10778 2009-11-17 23:33:16Z KKudryavtsev $
"""
__version__='$Revision: 10778 $'


from math import pi, sqrt

import numpy
import param

from topo import learningfn, numbergen, transferfn, pattern, projection, responsefn, sheet

import topo.pattern.audio
import topo.learningfn.optimized
import topo.learningfn.projfn 
import topo.transferfn.optimized 
import topo.pattern.random
import topo.responsefn.optimized 
import topo.sheet.lissom
import topo.sheet.optimized


# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p

p.add (

	# Notes to self as im getting to grips with topo architecture.
	# area is a topo parameter, of type number
	# by area we mean AI cortical area?
    area = param.Number
			(
				default = 1.0, 
				bounds = (0, None),
				inclusive_bounds = (False, True), 
				doc = """Linear size of cortical area to simulate.
				2.0 gives a 2.0x2.0 Sheet area in A1."""
			),
	# Average Basilar membrane length = 32mm
	# Basilar membrane widest (0.42 - 0.65mm) at apex,
	# and narrowest (0.08 - 0.16mm) at base
	# Av apex width = (0.42 + 0.65) / 2 = 0.535
	# Av base width = (0.08 + 0.16) / 2 - 0.12
	# Approximating uniform width = (0.535 + 0.12) / 2 = 0.3275mm
	# Ratio(width, length) =  0.3275 / 32 = 0.010234375
	cochlea_aspect_ratio = param.Number
			(
				default = 0.01, 
				bounds = (0, None),
				doc = """ratio of cochlea width to its length"""
			),
					
	# not too sure what densities are atm
    cochlea_density = param.Number
			(
				default = 24.0, 
				bounds = (0, None),
				inclusive_bounds = (False, True),
				doc = """The nominal_density to use for the cochlea."""
			),

    mgn_density = param.Number
			(
				default = 24.0, 
				bounds = (0, None),
				inclusive_bounds = (False, True),
				doc = """The nominal_density to use for the MGN."""
			),

    cortex_density = param.Number
			(
				default = 48.0,
				bounds = (0, None),
				inclusive_bounds = (False, True),
				doc = """The nominal_density to use for A1."""
			)

) # Close p (parameters)


projection.CFProjection.cf_shape = pattern.Disk(smoothing = 0.0)

# Weights initialisation
projection.CFProjection.weights_generator = pattern.Constant()
projection.CFProjection.weights_output_fns = [transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]

# Response function
projection.CFProjection.response_fn = responsefn.optimized.CFPRF_DotProduct_opt()

# Learning function
projection.CFProjection.learning_fn = learningfn.optimized.CFPLF_Hebbian_opt()



### Audio Input patterns
input_pattern = pattern.audio.Audio (
										min_frequency = 20, 
										max_frequency = 20000, 
										filename = "square/sqr-1kHz.wav", 
										sample_window = 0.3,
										seconds_per_timestep = 0.1
									)



### Sheets

# useful parameters
cochlea_mgn_connection_radius = 1.0 #375

cochlea_half_length = p.area / 2.0 + cochlea_mgn_connection_radius
cochlea_half_width = cochlea_half_length * p.cochlea_aspect_ratio

print cochlea_half_width
print cochlea_half_length

# Cochlea Sheet
topo.sim['Cochlea'] = sheet.GeneratorSheet (
												nominal_density = p.cochlea_density,
												# p.area, 0.25
												nominal_bounds = sheet.BoundingBox 
													(
														points = ( (-cochlea_half_length, -cochlea_half_width),
																   (cochlea_half_length, cochlea_half_width) )
													),
												input_generator = input_pattern, 
												period = 1.0, 
												phase = 0.05
											)

# MGN Sheet    
topo.sim['MGN'] = sheet.CFSheet (
									nominal_density = p.mgn_density,
									nominal_bounds = sheet.BoundingBox(radius = p.area / 2.0)
									#output_fns = [transferfn.PiecewiseLinear(lower_bound=0.0, upper_bound=1.0)],
								)
			
#topo.sim['LGNOff']=sheet.CFSheet(nominal_density=p.lgn_density,
#    nominal_bounds=sheet.BoundingBox(radius=p.area/2.0+0.25),
#    output_fns=[transferfn.PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)],
#    measure_maps=False)

#topo.sim['V1'] = sheet.lissom.LISSOM(nominal_density=p.cortex_density,
#    nominal_bounds=sheet.BoundingBox(radius=p.area/2.0),tsettle=9,
#    output_fns=[transferfn.PiecewiseLinear(lower_bound=0.083,upper_bound=0.633)],
#    joint_norm_fn=sheet.optimized.compute_joint_norm_totals_opt)



### Connections

# TODO: how to model mgn simply?
topo.sim.connect (
					'Cochlea',
					'MGN',
					delay = 0.05,
					strength = 2.33,
					name = 'Afferent',
					connection_type = projection.CFProjection,
					nominal_bounds_template = sheet.BoundingBox(radius = cochlea_mgn_connection_radius),
					weights_generator = pattern.Constant()
				 )

#topo.sim.connect(
#    'Retina','LGNOff',delay=0.05,strength=2.33,name='Afferent',
#    connection_type=projection.SharedWeightCFProjection,
#    nominal_bounds_template=sheet.BoundingBox(radius=0.375),
#    weights_generator=off_weights)

#topo.sim.connect(
#    'LGNOn','V1',delay=0.05,strength=1.0,name='LGNOnAfferent',
#    dest_port=('Activity','JointNormalize','Afferent'),
#    connection_type=projection.CFProjection,learning_rate=0.9590/2,
#    nominal_bounds_template=sheet.BoundingBox(radius=0.27083),
#    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.27083))

#topo.sim.connect(
#    'LGNOff','V1',delay=0.05,strength=1.0,name='LGNOffAfferent',
#    dest_port=('Activity','JointNormalize','Afferent'),
#    connection_type=projection.CFProjection,learning_rate=0.9590/2,
#    nominal_bounds_template=sheet.BoundingBox(radius=0.27083),
#    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.27083))

#topo.sim.connect(
#    'V1','V1',delay=0.05,strength=0.9,name='LateralExcitatory',
#    connection_type=projection.ResizableCFProjection,learning_rate=2.55528,
#    nominal_bounds_template=sheet.BoundingBox(radius=0.10417),
#    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.10417))
            
#topo.sim.connect(
#    'V1','V1',delay=0.05,strength=-0.9,name='LateralInhibitory',
#    connection_type=projection.CFProjection,learning_rate=1.80873,
#    nominal_bounds_template=sheet.BoundingBox(radius=0.22917),
#    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.22917))



### Actions scheduled to occur as the simulation proceeds.
#sheet.lissom.schedule_events("topo.sim['V1']",st=1.0/p.num_inputs,aff_name="Afferent")


### Default locations for model editor
topo.sim.grid_layout (
						[
							#[None,    'A1',     None],
							[None,   'MGN',     None],
							[None,   'Cochlea', None]
						],
						xstart = 150
					 )


### Set up appropriate defaults for analysis

# Measure feature maps based on unthresholded initial response for
# speed and reliability
from topo.analysis.featureresponses import MeasureResponseCommand
MeasureResponseCommand.duration = 0.175
MeasureResponseCommand.apply_output_fns = False
