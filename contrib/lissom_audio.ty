"""
Bilal work in progress

$Id$
"""
__version__='$Revision$'


from math import pi, sqrt

import numpy
import param

from topo import learningfn, numbergen, transferfn, pattern, projection, responsefn, sheet

from topo.pattern.audio import Audio
import topo.learningfn.optimized
import topo.learningfn.projfn 
import topo.transferfn.optimized 
import topo.pattern.random
import topo.responsefn.optimized 
import topo.sheet.lissom
import topo.sheet.optimized


# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p

p.add (

    density_multiplier = param.Number(default=1.0,bounds=(0, None),inclusive_bounds=(False,True),doc="""
         Multiplier for the other densities."""),
                                                  
    cochlea_density = param.Number(default=12.0,bounds=(0,None),inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the Cochlea."""),

    mgbv_density = param.Number(default=12.0,bounds=(0,None),inclusive_bounds=(False,True),doc="""
        The nominal_density to use for the MGB (Ventral division)."""),

    cortex_density = param.Number(default=24.0,bounds=(0,None),inclusive_bounds=(False,True),doc="""
        The nominal_density to use for A1.""")
)

p.cochlea_density = p.cochlea_density * p.density_multiplier
p.mgbv_density = p.mgbv_density * p.density_multiplier
p.cortex_density = p.cortex_density * p.density_multiplier


projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.weights_generator=pattern.Constant()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()


### Input patterns

## Complex Test Sound
# Guitar rendition of Daisy Bell, in tribute to the IBM 704
# which in 1962 became the first ever computer to 'sing'.
sound_file = "complex/daisy"

## Pure Sine Waves
#sound_file = "sine_waves/00020hz"
#sound_file = "sine_waves/00030hz"
#sound_file = "sine_waves/00040hz"
#sound_file = "sine_waves/00050hz"
#sound_file = "sine_waves/00060hz"
#sound_file = "sine_waves/00100hz"
#sound_file = "sine_waves/00200hz"
#sound_file = "sine_waves/00500hz"
#sound_file = "sine_waves/01000hz"
#sound_file = "sine_waves/02000hz"
#sound_file = "sine_waves/05000hz"
sound_file = "sine_waves/08000hz"
#sound_file = "sine_waves/10000hz"
#sound_file = "sine_waves/12000hz"
#sound_file = "sine_waves/15000hz"
#sound_file = "sine_waves/16000hz"
#sound_file = "sine_waves/17000hz"
#sound_file = "sine_waves/18000hz"
#sound_file = "sine_waves/19000hz"
#sound_file = "sine_waves/20000hz"

## Square Waves
#sound_file = "square_waves/00020hz"
#sound_file = "square_waves/00030hz"
#sound_file = "square_waves/00040hz"
#sound_file = "square_waves/00050hz"
#sound_file = "square_waves/00060hz"
#sound_file = "square_waves/00100hz"
#sound_file = "square_waves/00200hz"
#sound_file = "square_waves/00500hz"
#sound_file = "square_waves/01000hz"
#sound_file = "square_waves/02000hz"
#sound_file = "square_waves/05000hz"
#sound_file = "square_waves/08000hz"
#sound_file = "square_waves/10000hz"
#sound_file = "square_waves/12000hz"
#sound_file = "square_waves/15000hz"
#sound_file = "square_waves/16000hz"
#sound_file = "square_waves/17000hz"
#sound_file = "square_waves/18000hz"
#sound_file = "square_waves/19000hz"
#sound_file = "square_waves/20000hz"

input_pattern=Audio(filename="sounds/"+sound_file+".wav",
                    min_frequency=20,max_frequency=20000,
                    sample_window=0.3,seconds_per_timestep=0.1)

### Sheets

cochlea_dimensions = (1.0,4.0)

mgbv_connection_dimensions = (cochlea_dimensions[0],0.2)
a1_connection_dimensions = (0.5,0.5)

topo.sim['Cochlea']=sheet.GeneratorSheet(
    nominal_density=p.cochlea_density,
    nominal_bounds=sheet.BoundingBox(points=((-cochlea_dimensions[0]/2,-cochlea_dimensions[1]/2),
                                             (cochlea_dimensions[0]/2,cochlea_dimensions[1]/2) )),
    input_generator=input_pattern,period=1.0,phase=0.05)
    
mgbv_dimensions = (cochlea_dimensions[0],
                   cochlea_dimensions[1]-mgbv_connection_dimensions[1])

topo.sim['MGBv']=sheet.CFSheet(
    nominal_density=p.mgbv_density,
    nominal_bounds=sheet.BoundingBox(points=((-mgbv_dimensions[0]/2,-mgbv_dimensions[1]/2),
                                             (mgbv_dimensions[0]/2,mgbv_dimensions[1]/2)) ))
        
a1_dimensions = (mgbv_dimensions[0]-a1_connection_dimensions[0],
                 mgbv_dimensions[1]-a1_connection_dimensions[1])
                                                  
topo.sim['A1']=sheet.lissom.LISSOM(
    nominal_density=p.cortex_density,
    nominal_bounds=sheet.BoundingBox(points=((-a1_dimensions[0]/2,-a1_dimensions[1]/2),
                                             (a1_dimensions[0]/2,a1_dimensions[1]/2) )),
    joint_norm_fn=sheet.optimized.compute_joint_norm_totals_opt)
 
       
#topo.sim['Test']=sheet.GeneratorSheet(
#    nominal_density = 24.0,
#    nominal_bounds = sheet.BoundingBox(points=((-5.0,-2.0),(5.0,2.0))),
#    input_generator=input_pattern,period=1.0,phase=0.05)
    

### Connections

topo.sim.connect(
    'Cochlea','MGBv',delay=0.05,strength=2.33,name='Cochlea Afferent',
    connection_type=projection.CFProjection,
    nominal_bounds_template=sheet.BoundingBox(
        points=((-mgbv_connection_dimensions[0]/2,-mgbv_connection_dimensions[1]/2),
                (mgbv_connection_dimensions[0]/2,mgbv_connection_dimensions[1]/2))),
    cf_shape=pattern.Constant(),
    weights_generator=pattern.SigmoidedDoG(center_aspect_ratio=4.0,center_size=0.5,
        surround_aspect_ratio=1.0,surround_size=2.0,
        sigmoid_slope=9,sigmoid_x=-1.28, size=0.2))

topo.sim.connect(
    'MGBv','A1',delay=0.05,strength=1.0,name='MGBv Afferent',
    dest_port=('Activity','JointNormalize','Afferent'),
    connection_type=projection.CFProjection,
    nominal_bounds_template=sheet.BoundingBox(
        points=((-a1_connection_dimensions[0]/2,-a1_connection_dimensions[1]/2),
                (a1_connection_dimensions[0]/2,a1_connection_dimensions[1]/2))),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.27083))

topo.sim.connect(
    'A1','A1',delay=0.05,strength=0.9,name='LateralExcitatory',
    connection_type=projection.ResizableCFProjection,learning_rate=2.55528,
    nominal_bounds_template=sheet.BoundingBox(radius=0.10417),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.10417))
        
topo.sim.connect(
    'A1','A1',delay=0.05,strength=-0.9,name='LateralInhibitory',
    connection_type=projection.CFProjection,learning_rate=1.80873,
    nominal_bounds_template=sheet.BoundingBox(radius=0.22917),
    weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.22917))

    
### Actions scheduled to occur as the simulation proceeds.

#sheet.lissom.schedule_events("topo.sim['V1']",st=1.0/p.num_inputs,aff_name="Afferent")


### Default locations for model editor

topo.sim.grid_layout(
    [['A1'],
     ['MGBv'],
     ['Cochlea']],xstart=50)


### Analysis

# Measure feature maps based on unthresholded initial response for speed and reliability
from topo.analysis.featureresponses import MeasureResponseCommand

# Set up appropriate defaults
MeasureResponseCommand.duration=0.175
MeasureResponseCommand.apply_output_fns=False
