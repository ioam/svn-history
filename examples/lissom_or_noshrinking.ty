"""
Example of a LISSOM-based orientation map that avoids shrinking the
lateral excitatory radius.

This simulation is intended to be similar to standard LISSOM, but
without the dramatic reorganizations typical of the early iterations
where the lateral excitatory radius is large.  Requires homeostatic
plasticity -- otherwise the map still jumps around a lot at the
start of learning, yet some neurons still fail to organize.

$Id$
"""
__version__='$Revision$'


import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefns.optimized import CFPRF_DotProduct_opt, CFPRF_SharedWeightDotProduct_opt
from topo.base.parameterclasses import DynamicNumber
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.outputfns.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfns.basic import PiecewiseLinear
from topo.misc.numbergenerators import UniformRandom
from topo.outputfns.homeostatic import HomeostaticMaxEnt
from topo.base.parameterclasses import Wrapper

# Normally uses homeostatic plasticity, but can be called as
#   ./topographica -c "homeostatic=False" ...
# to use scheduled threshold changes instead.
homeostatic = locals().get('homeostatic',True)

if homeostatic:
    topo.sim.name = "homeo_lissom_or_noshrinking"
else:
    topo.sim.name = "lissom_or_noshrinking"


input_pattern = topo.patterns.basic.Gaussian(
          scale=1.0, size=2*0.0468, aspect_ratio=4.0,
          x=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=12)),
          y=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=34)),
          orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=56)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()


###########################################
# build simulation

topo.sim['Retina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25))


if homeostatic:
    topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',84.0),
                            nominal_bounds=BoundingBox(radius=0.5),tsettle=9, 
                            output_fn=HomeostaticMaxEnt(a_init=13, b_init=-4, eta=0.002, mu=0.01))
else:
    topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',84.0),
                            nominal_bounds=BoundingBox(radius=0.5),tsettle=9)


if not homeostatic:
    topo.sim['V1'].output_fn.lower_bound=0.1
    topo.sim['V1'].output_fn.upper_bound=0.65


topo.sim.connect('Retina','V1',delay=FixedPoint("0.10"),
                  connection_type=CFProjection,strength=1.0,name='Afferent',
                 weights_generator=topo.patterns.basic.Composite(operator=Wrapper("Numeric.multiply"),
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.271),
                                                                             topo.patterns.random.UniformRandom()]),
                  nominal_bounds_template=BoundingBox(radius=0.271),learning_rate=0.9590)

topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralExcitatory',
                  connection_type=CFProjection,strength=0.9,
                 weights_generator=topo.patterns.basic.Gaussian(aspect_ratio=1.0, size=2*0.03),
                  nominal_bounds_template=BoundingBox(radius=0.03),learning_rate=0) 
            
topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralInhibitory',
                  connection_type=CFProjection,strength=-0.9,
                 weights_generator=topo.patterns.basic.Composite(operator=Wrapper("Numeric.multiply"),
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.229),
                                                                             topo.patterns.random.UniformRandom()]),
                  nominal_bounds_template=BoundingBox(radius=0.229),learning_rate=1.627)

### Actions scheduled to occur as the simulation proceeds.#


topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")


### Schedule learning rate changes
#
topo.sim.schedule_command( 100,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.548')
topo.sim.schedule_command( 1000,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.274')
topo.sim.schedule_command( 3000,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.137')


if not homeostatic:
    ### Schedule LISSOM settling and output function threshold changes
    topo.sim.schedule_command( 1000,'topo.sim["V1"].tsettle=11')
    topo.sim.schedule_command( 3000,'topo.sim["V1"].tsettle=12')
    topo.sim.schedule_command( 5000,'topo.sim["V1"].tsettle=13')

    topo.sim.schedule_command( 100, 'topo.sim["V1"].output_fn.lower_bound=0.15; topo.sim["V1"].output_fn.upper_bound=0.68')
    topo.sim.schedule_command( 1000, 'topo.sim["V1"].output_fn.lower_bound=0.21; topo.sim["V1"].output_fn.upper_bound=0.79')
    topo.sim.schedule_command( 3000, 'topo.sim["V1"].output_fn.lower_bound=0.22; topo.sim["V1"].output_fn.upper_bound=0.82')
    topo.sim.schedule_command( 5000, 'topo.sim["V1"].output_fn.lower_bound=0.23; topo.sim["V1"].output_fn.upper_bound=0.85')
    topo.sim.schedule_command( 10000, 'topo.sim["V1"].output_fn.lower_bound=0.24; topo.sim["V1"].output_fn.upper_bound=0.88')

topo.sim.run(0)



