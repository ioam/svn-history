"""
Two layer model with one inhibitory and one excitatory sheet.
Recurrent short range connections between sheets, long range excitation and short range inhibition
Based on lissom_or_noshrinking - work in progress. 

$Id$
"""
__version__='$Revision$'


import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefns.optimized import CFPRF_DotProduct_opt, CFPRF_SharedWeightDotProduct_opt
from topo.base.parameterclasses import DynamicNumber
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.outputfns.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfns.basic import PiecewiseLinear
from topo.misc.numbergenerators import UniformRandom



topo.sim.name = "laminar_or_noshrinking"



input_pattern = topo.patterns.basic.Gaussian(
          scale=1.0, size=2*0.0468, aspect_ratio=4.0,
          x=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=12)),
          y=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=34)),
          orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=56)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()


###########################################
# build simulation

topo.sim['Retina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.275))

topo.sim['V1Exc'] =  LISSOM(nominal_density=locals().get('default_density',84.0),
                        nominal_bounds=BoundingBox(radius=0.5),tsettle=15)
topo.sim['V1Inh'] =  LISSOM(nominal_density=locals().get('default_density',84.0),
                        nominal_bounds=BoundingBox(radius=0.5),tsettle=15)                       

topo.sim["V1Exc"].output_fn.upper_bound=0.65
topo.sim["V1Exc"].output_fn.lower_bound=0.1
topo.sim["V1Inh"].output_fn.upper_bound=0.65
topo.sim["V1Inh"].output_fn.lower_bound=0.1

topo.sim.connect('Retina','V1Exc', delay = FixedPoint("0.05",4),
                 connection_type=CFProjection,strength=1.0,name='AfferentEx',
                 nominal_bounds_template=BoundingBox(radius=0.275),learning_rate=0.9590)

topo.sim.connect('Retina','V1Inh', delay = FixedPoint("0.05",4),
                 connection_type=CFProjection,strength=1.0,name='AfferentIn',
                 nominal_bounds_template=BoundingBox(radius=0.275),learning_rate=0.9590)

topo.sim.connect('V1Exc','V1Exc', delay = FixedPoint("0.05",4),
		   connection_type=CFProjection,strength = 0.97, name='LateralExcitatory_local',
		  nominal_bounds_template=BoundingBox(radius=0.03),
                   learning_rate=0)

topo.sim.connect('V1Exc','V1Exc', delay = FixedPoint("0.05",4),
		   connection_type=CFProjection,strength = 0.1, name='LateralExcitatory',
		    nominal_bounds_template =BoundingBox(radius=0.244),
                   learning_rate=1.7871)

topo.sim.connect('V1Exc','V1Inh', delay = FixedPoint("0.05",4),
                  connection_type=CFProjection,strength = 0.8, name='V1Exc_to_V1Inh_local',
                   nominal_bounds_template = BoundingBox(radius=0.03),learning_rate=0)

topo.sim.connect('V1Exc','V1Inh', delay = FixedPoint("0.05",4),
                   connection_type=CFProjection,strength = 1.0, name='V1Exc_to_V1Inh',
                  nominal_bounds_template = BoundingBox(radius=0.244),learning_rate=1.7871)

topo.sim.connect('V1Inh','V1Exc', delay = FixedPoint("0.05",4),
                         connection_type=CFProjection,strength=-0.4, name='V1Inh_to_V1Exc',
                         nominal_bounds_template = BoundingBox(radius=0.03),learning_rate=0)

topo.sim.connect('V1Inh','V1Inh', delay = FixedPoint("0.05",4),
                     connection_type=CFProjection,strength=-0.4, name='V1Inh_to_V1Inh',
                       nominal_bounds_template = BoundingBox(radius=0.03),learning_rate=0)



### Actions scheduled to occur as the simulation proceeds.#


topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

### Schedule learning rate changes
#
topo.sim.schedule_command( 100,'topo.sim["V1Exc"].projections()["AfferentEx"].learning_rate=0.548')
topo.sim.schedule_command( 1000,'topo.sim["V1Exc"].projections()["AfferentEx"].learning_rate=0.274')
topo.sim.schedule_command( 3000,'topo.sim["V1Exc"].projections()["AfferentEx"].learning_rate=0.137')

topo.sim.schedule_command( 100,'topo.sim["V1Inh"].projections()["AfferentIn"].learning_rate=0.548')
topo.sim.schedule_command( 1000,'topo.sim["V1Inh"].projections()["AfferentIn"].learning_rate=0.274')
topo.sim.schedule_command( 3000,'topo.sim["V1Inh"].projections()["AfferentIn"].learning_rate=0.137')

### Schedule LISSOM output function threshold changes
#
topo.sim.schedule_command( 100, 'topo.sim["V1Exc"].output_fn.lower_bound=0.15; topo.sim["V1Exc"].output_fn.upper_bound=0.68')
topo.sim.schedule_command( 1000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.21; topo.sim["V1Exc"].output_fn.upper_bound=0.79')
topo.sim.schedule_command( 3000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.22; topo.sim["V1Exc"].output_fn.upper_bound=0.82')
topo.sim.schedule_command( 5000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.23; topo.sim["V1Exc"].output_fn.upper_bound=0.85')
topo.sim.schedule_command( 10000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.24; topo.sim["V1Exc"].output_fn.upper_bound=0.88')

topo.sim.schedule_command( 100, 'topo.sim["V1Inh"].output_fn.lower_bound=0.15; topo.sim["V1Inh"].output_fn.upper_bound=0.68')
topo.sim.schedule_command( 1000, 'topo.sim["V1Inh"].output_fn.lower_bound=0.21; topo.sim["V1Inh"].output_fn.upper_bound=0.79')
topo.sim.schedule_command( 3000, 'topo.sim["V1Inh"].output_fn.lower_bound=0.22; topo.sim["V1Inh"].output_fn.upper_bound=0.82')
topo.sim.schedule_command( 5000, 'topo.sim["V1Inh"].output_fn.lower_bound=0.23; topo.sim["V1Inh"].output_fn.upper_bound=0.85')
topo.sim.schedule_command( 10000, 'topo.sim["V1Inh"].output_fn.lower_bound=0.24; topo.sim["V1Inh"].output_fn.upper_bound=0.88')


topo.sim.run(0)
