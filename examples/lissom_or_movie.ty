"""
This example shows how to create an activity movie.

It does the following:

1) load in  the lissom_or.ty script using execfile
2) instrument the simulation with a DataRecorder,
3) run the simulation for a while to collect some data
4) construct an ActivityMovie object from a period of collected data.
5) save the frames of the movie to files.

$Id:$
"""
from topo.plotting.bitmap import MontageBitmap
from topo.misc.traces import ActivityMovie,InMemoryRecorder

import pdb
import ImageFont

# Replace font path with the path to a suitable TrueType font on your system.
title_font = ImageFont.truetype('/Library/Fonts/ChalkboardBold.ttf',20)

# Add a timecode to each movie
ActivityMovie.add_timecode = True
ActivityMovie.timecode_options = dict(fill='lightgreen',font=title_font)
ActivityMovie.timecode_fmt = '%.2f'

# The format for times in filenames
ActivityMovie.filename_time_fmt = '%06.2f'

# Frame filenames should be like: "frame002.30.tif"
ActivityMovie.filename_fmt = 'frame%t.%T'

# The directory for movie frames:
ActivityMovie.filename_prefix = 'lissom_or_movie/'

# Frames should be on a white background
MontageBitmap.bg_color = (1,1,1)
# Maps within each frame will fit to 200x200 pixel tiles
MontageBitmap.tile_size = (200,200)

# The montages will contain 1x2 images
MontageBitmap.shape = (1,2)
# Frame title parameters
MontageBitmap.title_pos = (5,5)
MontageBitmap.title_options = dict(font=title_font,fill='#C1FFC1')


print "Loading the simulation..."
execfile('lissom_or.ty')

# Add a data recorder and record the activity from the Retina and V1

topo.sim['Data'] = InMemoryRecorder()

topo.sim.connect('Retina','Data',
                 src_port = 'Activity',
                 name = 'Retina Activity')
topo.sim.connect('V1','Data',
                 src_port = 'Activity',
                 name = 'V1 Activity')

# Run for a while
print 'Running...'
topo.sim.run(10)

# Create a movie
print 'Composing movie...'
movie = ActivityMovie(name = 'Lissom Orientation Movie',
                      recorder = topo.sim['Data'],
                      montage_params = dict(titles=['Retina','V1']),
                      variables = ['Retina Activity','V1 Activity'],
                      frame_times = list(arange(0,10.0,0.1)))

# Save the frames to files:
print 'Saving movie...'
movie.save()

                      
