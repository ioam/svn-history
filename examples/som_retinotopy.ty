"""
Basic example of a fully connected SOM retinotopic map with ConnectionFields.

Contains a Retina (2D Gaussian generator) fully connected to a V1
(CFSOM) sheet, with no initial ordering for topography.

Constructed to match the retinotopic simulation from page 53-59 of
Miikkulainen, Bednar, Choe, and Sirosh (2005), Computational Maps in
the Visual Cortex, Springer, except with a slower learning rate for
better convergence.

$Id$
"""
__version__='$Revision$'


import RandomArray
from math import exp, sqrt

import topo.patterns.random
import topo.patterns.basic

from topo.sheets.generatorsheet import GeneratorSheet
from topo.base.boundingregion import BoundingBox
from topo.base.cf import CFProjection
from topo.base.parameterclasses import DynamicNumber,Number
from topo.sheets.cfsom import CFSOM
from topo.responsefns.optimized import CFPRF_EuclideanDistance_opt
from topo.learningfns.som import CFPLF_HebbianSOM
from topo.misc.numbergenerators import UniformRandom

topo.sim.name = "som_retinotopy"

class RetinotopicSOM(CFSOM):
    """A variant of CFSOM that uses exponential decay functions for alpha and radius."""

    radius_min=Number(0.5/40.0,doc="Minimum radius to allow")

    def __init__(self,**params):
        super(RetinotopicSOM,self).__init__(**params)

    def alpha(self):
       """Exponential decay."""
       return self.alpha_0*exp(-6.0*(float(self.simulation.time())/self.learning_length))
    
    def radius(self):
       """Exponential decay, but with a minimum value enforced."""
       decayed_radius = self.radius_0*exp(-5.0*(float(self.simulation.time())/self.learning_length))
       return max(decayed_radius,self.radius_min)


# input pattern
GeneratorSheet.period = 1.0
GeneratorSheet.phase = 0.05
GeneratorSheet.nominal_density = 24

input_pattern = topo.patterns.basic.Gaussian(
    scale=1.0,
    size=2*sqrt(2.0*0.1*24.0)/24.0,
    aspect_ratio=1.0,
    x=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=23)),
    y=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=45)),
    orientation=0)

# cortical sheet
RetinotopicSOM.nominal_density = locals().get('default_density',40.0)
RetinotopicSOM.learning_length = 40000

RetinotopicSOM.radius_0 = 13.3/40.0
# Original CMVC simulation used 0.42
RetinotopicSOM.alpha_0  = 0.42/4.0

RandomArray.seed(50,50)
CFProjection.weights_generator = topo.patterns.random.UniformRandom() 

CFProjection.nominal_bounds_template=BoundingBox(radius=1.0) # fully connected network.
CFProjection.response_fn = CFPRF_EuclideanDistance_opt()
CFProjection.learning_fn = CFPLF_HebbianSOM()


topo.sim['Retina'] = GeneratorSheet(input_generator=input_pattern)
topo.sim['V1'] = RetinotopicSOM()
topo.sim.connect('Retina','V1',name='Afferent',delay=0.05,connection_type=CFProjection)
