"""
Basic example of a fully connected SOM retinotopic map with ConnectionFields.

Contains a Retina (2D Gaussian generator) fully connected to a V1
(CFSOM) sheet, with no initial ordering for topography.

Constructed to match the retinotopic simulation from page 53-59 of
Miikkulainen, Bednar, Choe, and Sirosh (2005), Computational Maps in
the Visual Cortex, Springer.  The original simulation used a radius_0
of 13.3/40, which does work for some random seeds, but a much larger
radius is used here so that it converges more reliably.

$Id$
"""
__version__='$Revision$'


import numpy
from math import exp, sqrt

import topo.patterns.random
import topo.patterns.basic

from topo.base.boundingregion import BoundingBox
from topo.base.cf import CFSheet,CFProjection
from topo.base.parameterclasses import DynamicNumber,Number
from topo.learningfns.som import CFPLF_EuclideanHebbian
from topo.misc.numbergenerators import UniformRandom,BoundedNumber,ExponentialDecay
from topo.outputfns.basic import KernelMax
from topo.responsefns.optimized import CFPRF_EuclideanDistance_opt
from topo.sheets.generatorsheet import GeneratorSheet

topo.sim.name = "som_retinotopy"

# input pattern
GeneratorSheet.period = 1.0
GeneratorSheet.phase = 0.05
# The locals().get calls allow the parameter to be overriden on the command line
GeneratorSheet.nominal_density = locals().get('default_retina_density',24.0)

# Local variable to allow inputs to be controlled easily
input_seed=locals().get('input_seed',0)

input_pattern = topo.patterns.basic.Gaussian(
    scale=1.0,
    size=2*sqrt(2.0*0.1*24.0)/24.0,
    aspect_ratio=1.0,
    x=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=input_seed+12)),
    y=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=input_seed+56)),
    orientation=0)


# Local variable to allow weights to be controlled easily
weight_seed=locals().get('weight_seed',0)
numpy.random.seed((weight_seed+67,weight_seed+89))

topo.sim['Retina'] = GeneratorSheet(input_generator=input_pattern)

default_density=locals().get('default_density',40.0)
topo.sim['V1'] = CFSheet(
    nominal_density = default_density,
    # Original CMVC simulation used an initial radius of 13.3/40.0
    output_fn = KernelMax(density=default_density,
        kernel_radius=BoundedNumber(bounds=(0.5/40,None),generator=
            ExponentialDecay(starting_value = locals().get('radius_0',13.3/40.0*3.0),
                             time_constant=40000/5.0))))

topo.sim.connect('Retina','V1',name='Afferent',delay=0.05,connection_type=CFProjection,
    weights_generator = topo.patterns.random.UniformRandom(),
    nominal_bounds_template=BoundingBox(radius=1.0), # fully connected network.
    learning_rate=DynamicNumber(ExponentialDecay(starting_value = locals().get('alpha_0',0.42),
                                                 time_constant=40000/6.0)),
    response_fn = CFPRF_EuclideanDistance_opt(),
    learning_fn = CFPLF_EuclideanHebbian())

