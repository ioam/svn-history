"""
LISSOM-based orientation map with complex cell layer.

$Id: cc_lissom_oo_or.ty 8147 2008-03-07 13:53:06Z antolikjan $
"""
__version__='$Revision: 8147 $'


import numpy

from math import pi, sqrt

from topo import param

import topo.patterns.basic
import topo.patterns.random

from topo.sheet.lissom import LISSOM, JointNormalizingCFSheet_Continuous
from topo.sheet.optimized import NeighborhoodMask_Opt, LISSOM_Opt
from topo.sheet.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection,OneToOneProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt 
from topo.outputfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfn.projfns import CFPOF_Identity
from topo.outputfn.basic import PiecewiseLinear,DivisiveNormalizeL1, Pipeline, HomeostaticMaxEnt, Sigmoid
from topo.misc.numbergenerators import UniformRandom, BoundedNumber, ExponentialDecay, Choice
from topo.patterns.basic import Gaussian
from topo.base.functionfamilies import CoordinateMapperFn

topo.sim.name = "3"

shared_params = {"a_init":14.5, "b_init":-4, "mu":0.01, "smoothing":0.0003}
shared_debug_params = {"debug_params":["a", "b"] , "avg_params":["x"], "units":[(0,0),(11,11),(23,23)]}

stim = locals().get('Stimulus','BarThin')
core_size=locals().get('CS',0.5)
num_inputs=1

if stim == 'Gaussian':
    input= topo.patterns.basic.Translator(generator=topo.patterns.basic.Gaussian(
        x=UniformRandom(lbound=-0.65,ubound=0.65,seed=1023),
        y=UniformRandom(lbound=-0.65,ubound=0.65,seed=53),
    size=0.088388, aspect_ratio=4.66667, offset=0.5,scale=Choice(choices=[-0.5,0.5],seed=56),    bounds = BoundingBox(radius=0.8)),orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56),reset_period=locals().get('Period',10),speed=locals().get('Speed',0.01))
elif stim == 'Bar':
    input= topo.patterns.basic.Translator(generator=topo.patterns.basic.Line(
        x=UniformRandom(lbound=-0.65,ubound=0.65,seed=1023),
        y=UniformRandom(lbound=-0.65,ubound=0.65,seed=53),
    size=1.0, bounds =  BoundingBox(radius=0.8),thickness=0.5),orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56),reset_period=locals().get('Period',5),speed=locals().get('Speed',0.07))
elif stim == 'BarThin':
    input= topo.patterns.basic.Translator(generator=topo.patterns.basic.Line(
        x=UniformRandom(lbound=-(core_size+0.15),ubound=(core_size+0.15),seed=1023),
        y=UniformRandom(lbound=-(core_size+0.15),ubound=(core_size+0.15),seed=53),
    size=1.0, offset=0.5,scale=Choice(choices=[-0.5,0.5],seed=71),bounds =  BoundingBox(radius=0.8),thickness=0.04,smoothing=0.0),orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56),reset_period=locals().get('Period',5),speed=locals().get('Speed',0.02))
elif stim == 'Gabor':
    input= topo.patterns.basic.Translator(generator=topo.patterns.basic.Gabor(
        x=UniformRandom(lbound=-0.65,ubound=0.65,seed=1023), phase =  UniformRandom(lbound=0,ubound=6.28,seed=1023),
        y=UniformRandom(lbound=-0.65,ubound=0.65,seed=53),
    size=0.15, frequency=3.3, scale=1.0,offset=0.5,aspect_ratio=3, bounds =  BoundingBox(radius=0.8)),orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56),reset_period=locals().get('Period',5),speed=locals().get('Speed',0.0))

jitter  =  locals().get('Jitter',0.2)

class Jitter(CoordinateMapperFn):
    """Return the jittered x,y coordinate of the given coordinate."""
    scale =  jitter
    rand = param.Parameter(default=None)
    def __call__(self,x,y):
        return x+(self.rand()-0.5)*self.scale,y+(self.rand()-0.5)*self.scale

jitterOn = Jitter(rand =UniformRandom(seed=1023))
jitterOff = Jitter(rand =UniformRandom(seed=1023))

# Specify weight initialization, response function, and learning function
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.cf_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()

###########################################
# build simulation

topo.sim['Retina']=GeneratorSheet(nominal_density=48.0,
                                  input_generator=input,  
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=core_size+0.25+0.375))

topo.sim['LGNOn']=JointNormalizingCFSheet_Continuous(nominal_density=48.0,
                          nominal_bounds=BoundingBox(radius=core_size+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOff']=JointNormalizingCFSheet_Continuous(nominal_density=48.0,
                           nominal_bounds=BoundingBox(radius=core_size+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['V1Simple'] = JointNormalizingCFSheet_Continuous(nominal_density=locals().get('default_density',120.0),
                        nominal_bounds=BoundingBox(radius=core_size),contFlag=True,apply_output_fn_init=False,
                        output_fn=Sigmoid(r=locals().get('r_init',20),k=locals().get('k_init',-10)))

topo.sim['V1SimpleInh'] = JointNormalizingCFSheet_Continuous(nominal_density=locals().get('default_density',120.0),
                        nominal_bounds=BoundingBox(radius=core_size),contFlag=True,
                        output_fn=Sigmoid(r=locals().get('i_r_init',15),k=locals().get('i_k_init',-7.5)))

topo.sim['V1Complex'] = JointNormalizingCFSheet_Continuous(nominal_density=locals().get('default_density',120.0),
                        nominal_bounds=BoundingBox(radius=core_size),contFlag=True,
                        output_fn=Sigmoid(r=locals().get('CAINI',20.0),k=locals().get('CBINI',-6.0)))



# DoG weights for the LGN
centerg   = Gaussian(size=0.07385,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())
surroundg = Gaussian(size=0.29540,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())

on_weights = topo.patterns.basic.Composite(
    generators=[centerg,surroundg],operator=numpy.subtract)

off_weights = topo.patterns.basic.Composite(
    generators=[surroundg,centerg],operator=numpy.subtract)



topo.sim.connect('Retina','LGNOn',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=2.33,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=on_weights)

topo.sim.connect('Retina','LGNOff',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=2.33,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=off_weights)

#V1 Simple
c1 = Choice(choices=[0.1,0.9],seed=56)
c1._Dynamic_time_fn = None
c2 = Choice(choices=[0.9,0.1],seed=56)
c2._Dynamic_time_fn = None
g1 = Gaussian(aspect_ratio=1.0,scale=c1,size=UniformRandom(lbound=0.2,ubound=0.4,seed=56))
g1._Dynamic_time_fn = None
g2 = Gaussian(aspect_ratio=1.0,scale=c2,size=UniformRandom(lbound=0.2,ubound=0.4,seed=56))
g2._Dynamic_time_fn = None


topo.sim.connect('LGNOn','V1Simple',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=locals().get('LGNStr',6.5),name='LGNOnAfferent',
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                     generators=[g1
                 ,topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),
                 coord_mapper=jitterOn,
                 learning_rate=(BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('S_lr',1),
                                                time_constant=locals().get('S_tc',9600)))))


topo.sim.connect('LGNOff','V1Simple',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=locals().get('LGNStr',6.5),name='LGNOffAfferent',
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                     generators=[g2
                 ,topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),
                 coord_mapper=jitterOff,
                 learning_rate=(BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('S_lr',1),
                                                time_constant=locals().get('S_tc',9600)))))

topo.sim.connect('V1Simple','V1Simple',delay=0.02,name='V1SimpleLateral',
                 connection_type=CFProjection,strength=0.1,
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.27),
                                                                             topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27),learning_rate=0) 

#topo.sim.connect('V1Simple','V1SimpleInh',delay=0.05,name='V1SimpleInhAfferent',
#                 connection_type=OneToOneProjection,strength=1.0,learning_rate=0) 

topo.sim.connect('LGNOn','V1SimpleInh',delay=0.05,name='V1SimpleInhAfferentOn',
                 connection_type=CFProjection,strength=2.0,coord_mapper=jitterOn,
                 weights_generator=Gaussian(aspect_ratio=1.0, size=2*0.27),
                 learning_rate=(BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('S_lr',1),
                                                time_constant=locals().get('S_tc',9600)))))

topo.sim.connect('LGNOff','V1SimpleInh',delay=0.05,name='V1SimpleInhAfferentOff',
                 connection_type=CFProjection,strength=2.0,coord_mapper=jitterOff,
                 weights_generator=Gaussian(aspect_ratio=1.0, size=2*0.27),
                 learning_rate=(BoundedNumber(bounds=(0.137,None),generator=
                               ExponentialDecay(starting_value = locals().get('S_lr',1),
                                                time_constant=locals().get('S_tc',9600)))))


topo.sim.connect('V1SimpleInh','V1SimpleInh',delay=0.02,name='V1SimpleInhLateral',
                 connection_type=CFProjection,strength=-0.15,
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.27),
                                                                             topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27),learning_rate=0) 

topo.sim.connect('V1SimpleInh','V1Simple',delay=0.02,name='V1SimpleInhFeedback',
                 connection_type=CFProjection,strength=-5,
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.27),
                                                                             topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27),learning_rate=0) 

#V1Complex

topo.sim.connect('V1Complex','V1Simple',delay=0.02,
                 connection_type=OneToOneProjection,strength=locals().get('FExcStr',0.25),name='V1ComplexFeedback',
                 learning_rate=0)

topo.sim.connect('V1Complex','V1SimpleInh',delay=0.02,
                 connection_type=OneToOneProjection,strength=locals().get('FInhStr',0.2),name='V1ComplexFeedback1',
                 learning_rate=0)


topo.sim.connect('V1Simple','V1Complex',delay=0.02,
                 connection_type=CFProjection,strength=locals().get('StoCStr',5),name='V1SimpleAfferent',
                 weights_generator=Gaussian(aspect_ratio=1.0, size=locals().get('StoCSize',0.15)),
                 nominal_bounds_template=BoundingBox(radius=locals().get('StoCSize',0.15)/2),
                 learning_rate=locals().get('StoC_lr',0))

topo.sim.connect('V1Complex','V1Complex',delay=0.02,name='LateralExcitatory',
                 connection_type=CFProjection,strength=locals().get('CxLatExcStr',0.8),
                 weights_generator=topo.patterns.basic.Gaussian(aspect_ratio=1.0, size=0.05),
                 nominal_bounds_template=BoundingBox(radius=0.05/2),
                 learning_rate=0.0)

topo.sim.connect('V1Complex','V1Complex',delay=0.02,name='LateralInhibitory',
                 connection_type=CFProjection,strength=-locals().get('CxLatInhStr',1.3),
                 weights_generator=topo.patterns.basic.Composite(operator=numpy.multiply, 
                     generators=[Gaussian(aspect_ratio=1.0, size=locals().get('CxLatInhSize',3*0.10417)),
                                topo.patterns.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.15),
                 learning_rate=0)
