"""
Based on lissom_or_noshrinking (homeostatic=True). Lateral connection strength is dependent on the activity of each unit.
Model is based on models of surround modulation in which lateral connections can be either facilitatory or suppressive
depending on the contrast of the input. This should be a simpler implementation of what happens in the laminar model::
Local inhibition becomes active only when there is sufficient exciatory drive.

Work in progress - form of Activity_dependent response function needs to be refined in order to match experimental data

"""



import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefns.optimized import CFPRF_DotProduct_opt, CFPRF_SharedWeightDotProduct_opt
from topo.base.parameterclasses import DynamicNumber
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.outputfns.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfns.basic import PiecewiseLinear
from topo.misc.numbergenerators import UniformRandom
from topo.outputfns.homeostatic import HomeostaticMaxEnt

# Normally uses homeostatic plasticity, but can be called as
#   ./topographica -c "homeostatic=False" ...
# to use scheduled threshold changes instead.
homeostatic = locals().get('homeostatic',True)

if homeostatic:
    topo.sim.name = "homeo_lissom_or_noshrinking_latswitch"
else:
    topo.sim.name = "lissom_or_noshrinking_latswitch"


input_pattern = topo.patterns.basic.Gaussian(
          scale=1.0, size=2*0.0468, aspect_ratio=4.0,
          x=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=12)),
          y=DynamicNumber(UniformRandom(lbound=-0.775,ubound=0.775,seed=34)),
          orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=56)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()


###########################################
# build simulation

topo.sim['Retina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.275))


if homeostatic:
    topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',84.0),
                            nominal_bounds=BoundingBox(radius=0.5),tsettle=9, 
                            output_fn=HomeostaticMaxEnt(a_init=13, b_init=-4, eta=0.002, mu=0.01))
else:
    topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',84.0),
                            nominal_bounds=BoundingBox(radius=0.5),tsettle=9)


if not homeostatic:
    topo.sim['V1'].output_fn.lower_bound=0.1
    topo.sim['V1'].output_fn.upper_bound=0.65


topo.sim.connect('Retina','V1',delay=FixedPoint("0.10"),
                  connection_type=CFProjection,strength=1.0,name='Afferent',
                  nominal_bounds_template=BoundingBox(radius=0.275),learning_rate=0.9590)

topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralExcitatory',
                  connection_type=CFProjection,strength=0.9,
                  nominal_bounds_template=BoundingBox(radius=0.03),learning_rate=0) 
            
topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='Lateral',
                  connection_type=CFProjection,response_fn=Activity_dependent,
                  nominal_bounds_template=BoundingBox(radius=0.244),learning_rate=1.7871)

### Actions scheduled to occur as the simulation proceeds.#


topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")


### Schedule learning rate changes
#
topo.sim.schedule_command( 100,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.548')
topo.sim.schedule_command( 1000,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.274')
topo.sim.schedule_command( 3000,'topo.sim["V1"].projections()["Afferent"].learning_rate=0.137')


if not homeostatic:
    ### Schedule LISSOM settling and output function threshold changes
    topo.sim.schedule_command( 1000,'topo.sim["V1"].tsettle=11')
    topo.sim.schedule_command( 3000,'topo.sim["V1"].tsettle=12')
    topo.sim.schedule_command( 5000,'topo.sim["V1"].tsettle=13')

    topo.sim.schedule_command( 100, 'topo.sim["V1"].output_fn.lower_bound=0.15; topo.sim["V1"].output_fn.upper_bound=0.68')
    topo.sim.schedule_command( 1000, 'topo.sim["V1"].output_fn.lower_bound=0.21; topo.sim["V1"].output_fn.upper_bound=0.79')
    topo.sim.schedule_command( 3000, 'topo.sim["V1"].output_fn.lower_bound=0.22; topo.sim["V1"].output_fn.upper_bound=0.82')
    topo.sim.schedule_command( 5000, 'topo.sim["V1"].output_fn.lower_bound=0.23; topo.sim["V1"].output_fn.upper_bound=0.85')
    topo.sim.schedule_command( 10000, 'topo.sim["V1"].output_fn.lower_bound=0.24; topo.sim["V1"].output_fn.upper_bound=0.88')

topo.sim.run(0)



