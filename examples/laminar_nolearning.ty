"""
Basic two layer model with one inhibitory and one excitatory sheet.

Work in progress; eventually should work similar to lissom_or.ty,
but using different excitatory and inhibitory populations within V1.

Contains 2 lateral excitatory projections - one weak long range and one strong short range
All projections start with random weights

Currently matches Lissom_or.ty with no learning and lateralExcitatory_local learning - however V1Exc_to_V1Inh does not learn in the same way as LateralExcitatory
so falls down at inhibitory learning. (first 200 iterations only)

$Id$
"""
__version__='$Revision$'

import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection
from topo.responsefns.optimized import CFPRF_DotProduct_opt
from topo.base.sheet import BoundingBox
from topo.base.parameterclasses import DynamicNumber
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.outputfns.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.misc.numbergenerators import UniformRandom

topo.sim.name = "laminar_nolearning"

###########################################
# Set parameters

input_bounds = BoundingBox(radius=0.72)

GeneratorSheet.nominal_density = 24.0
GeneratorSheet.period = 1
GeneratorSheet.phase = 0.05
GeneratorSheet.nominal_bounds = input_bounds


input_pattern = topo.patterns.basic.Gaussian(
    scale=1.0,size=2*0.0468,
    aspect_ratio=4.0,
    bounds=input_bounds,
    x=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=12)),
    y=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=34)),
    orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=56)))


# LISSOM parameters
LISSOM.nominal_density = 24.0


# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()

###########################################
# build simulation

topo.sim['Retina'] = GeneratorSheet(input_generator=input_pattern)
topo.sim['V1Exc'] = LISSOM(nominal_bounds=BoundingBox(radius=0.5),tsettle=9)
topo.sim['V1Inh'] = LISSOM(nominal_bounds=BoundingBox(radius=0.5),tsettle=8)

#V1Inh should possibly be a CFSheet to avoid having to set tsettle -
#I will need to overwrite some of the default CFSheet parameters (e.g. Output function) first

topo.sim.connect('Retina','V1Exc', delay = FixedPoint("0.10",4),
                 connection_type=CFProjection,strength=1.0,name='Afferent1',
                 nominal_bounds_template=BoundingBox(radius=0.22),learning_rate=1.274)

topo.sim.connect('V1Exc','V1Exc', delay = FixedPoint("0.10",4),
		   connection_type=CFProjection,strength = 0.86, name='LateralExcitatory_local',
		   nominal_bounds_template =BoundingBox(radius=0.10),
                   learning_rate=2.674)

topo.sim.connect('V1Exc','V1Exc', delay = FixedPoint("0.10",4),
		   connection_type=CFProjection,strength = 0.1, name='LateralExcitatory',
		   nominal_bounds_template =BoundingBox(radius=0.25),
                   learning_rate=0*2.674)

topo.sim.connect('V1Exc','V1Inh', delay = FixedPoint("0.05",4),
                   connection_type=CFProjection,strength = 1.9, name='V1Exc_to_V1Inh',
                   nominal_bounds_template = BoundingBox(radius=0.25),learning_rate=0*2.674)

topo.sim.connect('V1Inh','V1Exc', delay = FixedPoint("0.05",4),
                         connection_type=CFProjection,strength=-0.4, name='V1Inh_to_V1Exc',
                         nominal_bounds_template = BoundingBox(radius=0.10),learning_rate=0*2.466)

#These do not really make any sense yet for this model
### Schedule bounds changes
#
topo.sim.schedule_command( 200, 'topo.sim["V1Exc"].projections()["LateralExcitatory_local"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command( 500, 'topo.sim["V1Exc"].projections()["LateralExcitatory_local"].change_bounds(BoundingBox(radius=0.042))')
topo.sim.schedule_command(1000,'topo.sim["V1Exc"].projections()["LateralExcitatory_local"].change_bounds(BoundingBox(radius=0.0336))')
topo.sim.schedule_command(2000,'topo.sim["V1Exc"].projections()["LateralExcitatory_local"].change_bounds(BoundingBox(radius=0.021))')


### Schedule learning rate changes
#
topo.sim.schedule_command(  200,'topo.sim["V1Exc"].projections()["LateralExcitatory"].learning_rate=1.445')
topo.sim.schedule_command(  500,'topo.sim["V1Exc"].projections()["LateralExcitatory"].learning_rate=0.205')
topo.sim.schedule_command( 1000,'topo.sim["V1Exc"].projections()["LateralExcitatory"].learning_rate=0.149') 

topo.sim.schedule_command(  500,'topo.sim["V1Exc"].projections()["Afferent0"].learning_rate=0.911')
topo.sim.schedule_command( 2000,'topo.sim["V1Exc"].projections()["Afferent0"].learning_rate=0.729')
topo.sim.schedule_command( 4000,'topo.sim["V1Exc"].projections()["Afferent0"].learning_rate=0.545')
topo.sim.schedule_command(20000,'topo.sim["V1Exc"].projections()["Afferent0"].learning_rate=0.273')


### Schedule LISSOM output function threshold changes
#
topo.sim.schedule_command(  200, 'topo.sim["V1Exc"].output_fn.lower_bound=0.11; topo.sim["V1"].output_fn.upper_bound=0.66')
topo.sim.schedule_command(  500, 'topo.sim["V1Exc"].output_fn.lower_bound=0.12; topo.sim["V1"].output_fn.upper_bound=0.67')
topo.sim.schedule_command( 1000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.15; topo.sim["V1"].output_fn.upper_bound=0.68')
topo.sim.schedule_command( 2000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.18; topo.sim["V1"].output_fn.upper_bound=0.70')
topo.sim.schedule_command( 3000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.20; topo.sim["V1"].output_fn.upper_bound=0.73')
topo.sim.schedule_command( 4000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.20; topo.sim["V1"].output_fn.upper_bound=0.76')
topo.sim.schedule_command( 5000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.21; topo.sim["V1"].output_fn.upper_bound=0.79')
topo.sim.schedule_command( 6500, 'topo.sim["V1Exc"].output_fn.lower_bound=0.22; topo.sim["V1"].output_fn.upper_bound=0.82')
topo.sim.schedule_command( 8000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.23; topo.sim["V1"].output_fn.upper_bound=0.85')
topo.sim.schedule_command(20000, 'topo.sim["V1Exc"].output_fn.lower_bound=0.24; topo.sim["V1"].output_fn.upper_bound=0.88')


# Default coordinates for the model editor
topo.sim['V1Exc'].gui_x=230.0   ; topo.sim['V1Exc'].gui_y=351.0
topo.sim['V1Inh'].gui_x=218.0 ; topo.sim['V1Inh'].gui_y=90.0
topo.sim['Retina'].gui_x=232.0  ; topo.sim['Retina'].gui_y=512.0
