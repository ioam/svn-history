"""
Example of a LISSOM-based ocular dominance map with ON/OFF channels. 

Not yet tested in any way.

$Id$
"""
__version__='$Revision$'

import numpy

from math import pi, sqrt


import topo.patterns.basic
import topo.patterns.random
import copy

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt
from topo.outputfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfn.basic import PiecewiseLinear, DivisiveNormalizeL1
from topo.misc.numbergenerators import UniformRandom


left_input=UniformRandom(lbound=0,ubound=2,seed=200)

class Opposite(object):
    """
    """

    def __init__(self, gen):
        self.gen = copy.deepcopy(gen)
    
    def __call__(self):
        return 2.0-self.gen()
    

#Present input patterns with different scale values to each eye

left_input_pattern = topo.patterns.basic.Gaussian(
          size=2*0.0468, aspect_ratio=4.0,
          scale=left_input, 
          x=UniformRandom(lbound=-0.5,ubound=0.5,seed=12),
          y=UniformRandom(lbound=-0.5,ubound=0.5,seed=34),
          orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56))


right_input_pattern = topo.patterns.basic.Gaussian(
          size=2*0.0468, aspect_ratio=4.0,
          scale=Opposite(left_input),
          x=UniformRandom(lbound=-0.5,ubound=0.5,seed=12),
          y=UniformRandom(lbound=-0.5,ubound=0.5,seed=34),
          orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56))

                                 
# Specify weight initialization, response function, and learning function
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.cf_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()
SharedWeightCFProjection.response_fn=CFPRF_DotProduct_opt()

SharedWeightCFProjection.weights_output_fn.single_cf_fn=DivisiveNormalizeL1()

###########################################
# build simulation



topo.sim['LeftRetina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=left_input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['RightRetina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=right_input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['LGNOnLeft']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOffLeft']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['LGNOnRight']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOffRight']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',48.0),
                        nominal_bounds=BoundingBox(radius=0.5))

topo.sim['V1'].output_fn.lower_bound=0.083
topo.sim['V1'].output_fn.upper_bound=0.633


# LGN ON channel
topo.sim.connect('LeftRetina','LGNOnLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=2.33,
                  nominal_bounds_template=BoundingBox(radius=0.375),name='LCenterOn',
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('LeftRetina','LGNOnLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-2.33,
                  name='LSurroundOn',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOnRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=2.33,
                  nominal_bounds_template=BoundingBox(radius=0.375),name='RCenterOn',
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOnRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-2.33,
                  name='RSurroundOn',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))


# LGN OFF channel
topo.sim.connect('LeftRetina','LGNOffLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-2.33,
                  name='LCenterOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('LeftRetina','LGNOffLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=2.33,
                  name='LSurroundOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOffRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-2.33,
                  name='RCenterOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOffRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=2.33,
                  name='RSurroundOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

# Connections from LGNs to V1

# TRALERT: Not yet investigated if Joint Normalization is working properly


topo.sim.connect('LGNOnLeft','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.75,name='LGNOnLeftAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590*2.0)

topo.sim.connect('LGNOffLeft','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.5,name='LGNOffLeftAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590*2.0)

topo.sim.connect('LGNOnRight','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.75,name='LGNOnRightAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590*2.0)

topo.sim.connect('LGNOffRight','V1',delay=0.05,dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.5,name='LGNOffRightAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590*2.0)


# Lateral Connections

topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
                  connection_type=CFProjection,strength=0.9,
                  nominal_bounds_template=BoundingBox(radius=0.10),learning_rate=3.2018) 
            
topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory',
                  connection_type=CFProjection,strength=-0.9,
                  nominal_bounds_template=BoundingBox(radius=0.23),learning_rate=1.9626)  



### Actions scheduled to occur as the simulation proceeds.
### copied from lissom_oo_or

topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

### Lateral excitatory bounds changes
topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.042))')

### Lateral excitatory learning rate changes
topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=1.2213')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=0.3466')

### Afferent learning rate changes
topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.6850*2.0;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.6850*2.0')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.5480*2.0;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.5480*2.0')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.4110*2.0;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.4110*2.0')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.2055*2.0;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.2055*2.0')

topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.6850*2.0;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.6850*2.0')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.5480*2.0;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.5480*2.0')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.4110*2.0;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.4110*2.0')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.2055*2.0;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.2055*2.0')


### LISSOM output function bounds changes
topo.sim.schedule_command(  200,'topo.sim["V1"].output_fn.lower_bound=0.093;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command(  500,'topo.sim["V1"].output_fn.lower_bound=0.103;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command( 1000,'topo.sim["V1"].output_fn.lower_bound=0.133;topo.sim["V1"].output_fn.upper_bound=0.663')
topo.sim.schedule_command( 2000,'topo.sim["V1"].output_fn.lower_bound=0.163;topo.sim["V1"].output_fn.upper_bound=0.683')
topo.sim.schedule_command( 3000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.713')
topo.sim.schedule_command( 4000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.743')
topo.sim.schedule_command( 5000,'topo.sim["V1"].output_fn.lower_bound=0.193;topo.sim["V1"].output_fn.upper_bound=0.773')
topo.sim.schedule_command( 6500,'topo.sim["V1"].output_fn.lower_bound=0.203;topo.sim["V1"].output_fn.upper_bound=0.803')
topo.sim.schedule_command( 8000,'topo.sim["V1"].output_fn.lower_bound=0.213;topo.sim["V1"].output_fn.upper_bound=0.833')
topo.sim.schedule_command(20000,'topo.sim["V1"].output_fn.lower_bound=0.223;topo.sim["V1"].output_fn.upper_bound=0.863')

# default locations for model editor

topo.sim['V1'         ].layout_location=( 600,225)
topo.sim['LGNOnLeft'  ].layout_location=( 200,445)
topo.sim['LGNOffLeft' ].layout_location=( 482,445)
topo.sim['LeftRetina' ].layout_location=( 279,700)

topo.sim['LGNOnRight' ].layout_location=( 750,445)
topo.sim['LGNOffRight'].layout_location=(1030,445)
topo.sim['RightRetina'].layout_location=( 879,700)


