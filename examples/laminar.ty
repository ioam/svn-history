"""
Basic two layer model with one inhibitory and one excitatory sheet.

Work in progress; eventually should work similar to lissom_or.ty,
but using different excitatory and inhibitory populations within V1.

"""
__version__='$Revision$'

import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection
from topo.responsefns.optimized import CFProjectionDotProduct_opt1
from topo.base.sheet import BoundingBox
from topo.base.parameterclasses import DynamicNumber
from topo.learningfns.optimized import CFProjectionHebbian_opt1
from topo.outputfns.optimized import CFProjectionDivisiveSumNormalize_opt1
from topo.misc.numbergenerators import RandomWrapper


###########################################
# Set parameters

input_bounds = BoundingBox(radius=0.72)

GeneratorSheet.density = 24.0
GeneratorSheet.period = 1
GeneratorSheet.bounds = input_bounds


input_pattern = topo.patterns.basic.Gaussian(
    scale=1.0,size=2*0.0468,
    aspect_ratio=4.0,
    bounds=input_bounds,
    x=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=99)),
    y=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=88)),
    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=77)))

# LISSOM parameters
LISSOM.density = 24.0


# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.response_fn=CFProjectionDotProduct_opt1()
CFProjection.learning_fn=CFProjectionHebbian_opt1()
CFProjection.weights_output_fn=CFProjectionDivisiveSumNormalize_opt1()

###########################################
# build simulation

topo.sim['Retina'] = GeneratorSheet(input_generator=input_pattern)
topo.sim['V1Exc'] = LISSOM(bounds=BoundingBox(radius=0.5),tsettle=9)
topo.sim['V1Inhib'] = LISSOM(bounds=BoundingBox(radius=0.5),tsettle=8)

topo.sim.connect2('Retina','V1Exc', delay = FixedPoint("0.05",4),
                  connection_type=CFProjection,strength=1.0,name='Afferent',
                  weights_bounds=BoundingBox(radius=0.22),learning_rate=1.274)

topo.sim.connect2('V1Exc','V1Exc',dest_port="lat1", delay = FixedPoint("0.10",4),
                  connection_type=CFProjection,strength = 0.95,
                  name='LateralExcitatory_local',
                  weights_bounds =BoundingBox(radius=0.10),learning_rate=0*0.4)	
		   
topo.sim.connect2('V1Exc','V1Exc', dest_port="lat2", delay = FixedPoint("0.10",4),
                  connection_type=CFProjection,strength = 0.15,
                  name='LateralExcitatory',
                  weights_bounds =BoundingBox(radius=0.25),learning_rate=0*1.6)	
		  
topo.sim.connect2('V1Exc','V1Inhib', delay = FixedPoint("0.05",4),
                  connection_type=CFProjection,strength = 1.65,
                  name='V1Exc_to_V1Inhib',
                  weights_bounds = BoundingBox(radius=0.25),learning_rate=0*0.4)

topo.sim.connect2('V1Inhib','V1Exc', delay = FixedPoint("0.05",4),
                  connection_type=CFProjection,strength=-0.65,
                  name='V1Inhib_to_V1Exc',
                  weights_bounds = BoundingBox(radius=0.10),learning_rate=0*2.4)


# Default coordinates for the model editor
topo.sim['V1Exc'].gui_x=230.0   ; topo.sim['V1Exc'].gui_y=351.0
topo.sim['V1Inhib'].gui_x=218.0 ; topo.sim['V1Inhib'].gui_y=90.0
topo.sim['Retina'].gui_x=232.0  ; topo.sim['Retina'].gui_y=512.0

topo.sim.run(0)
