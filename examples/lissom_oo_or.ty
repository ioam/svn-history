"""
Example of a LISSOM-based orientation map with ON/OFF channels.

$Id$
"""
__version__='$Revision$'

import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedCFProjection
from topo.responsefns.optimized import CFProjectionDotProduct_opt1
from topo.base.parameterclasses import DynamicNumber
from topo.base.connectionfield import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFProjectionHebbian_opt1
from topo.outputfns.optimized import CFProjectionDivisiveSumNormalize_opt1
from topo.outputfns.basic import PiecewiseLinear, DivisiveSumNormalize
from topo.misc.numbergenerators import RandomWrapper
from topo.patterns import PatternGeneratorParameter


input_pattern = topo.patterns.basic.Gaussian(
          scale=1.0, size=2*0.0468, aspect_ratio=4.0,
          x=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=12)),
          y=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=34)),
          orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFProjectionDotProduct_opt1()
CFProjection.learning_fn=CFProjectionHebbian_opt1()
CFProjection.weights_output_fn=CFProjectionDivisiveSumNormalize_opt1()
SharedCFProjection.weights_output_fn.single_cf_fn=DivisiveSumNormalize()

###########################################
# build simulation
s = topo.base.simulator.Simulator()
Retina = GeneratorSheet(name='Retina',density=24.0,bounds=BoundingBox(radius=0.5+0.25+0.375),
                        input_generator=input_pattern)
LGNOn = CFSheet(name='LGNOn',density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                measure_maps=False)
LGNOff = CFSheet(name='LGNOff',density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                 output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                 measure_maps=False)
V1 = LISSOM(name='V1',density=locals().get('default_density',48.0),
            bounds=BoundingBox(radius=0.5))
V1.output_fn.lower_bound=0.083
V1.output_fn.upper_bound=0.633


# LGN ON channel
LGNOn_center = s.connect(Retina,LGNOn,delay = FixedPoint("0.05"),
                         connection_type=SharedCFProjection,strength=2.33,
                         name='Center',weights_bounds=BoundingBox(radius=0.375),
                         weights_generator=topo.patterns.basic.Gaussian(size=0.0417,aspect_ratio=1))

LGNOn_surround = s.connect(Retina,LGNOn,delay = FixedPoint("0.05"),
                           connection_type=SharedCFProjection,strength=-2.33,
                           name='Surround',weights_bounds=BoundingBox(radius=0.375),
                           weights_generator=topo.patterns.basic.Gaussian(size=0.1667,aspect_ratio=1))


# LGN OFF channel
LGNOff_center = s.connect(Retina,LGNOff,delay = FixedPoint("0.05"),
                          connection_type=SharedCFProjection,strength=-2.33,
                          name='Center',weights_bounds=BoundingBox(radius=0.375),
                          weights_generator=topo.patterns.basic.Gaussian(size=0.0417,aspect_ratio=1))

LGNOff_surround = s.connect(Retina,LGNOff,delay = FixedPoint("0.05"),
                            connection_type=SharedCFProjection,strength=2.33,
                            name='Surround',weights_bounds=BoundingBox(radius=0.375),
                            weights_generator=topo.patterns.basic.Gaussian(size=0.1667,aspect_ratio=1))


s.connect(LGNOn,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.75,name='LGNOnAfferent',
          weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)

s.connect(LGNOff,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.5,name='LGNOffAfferent',
          weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)


s.connect(V1,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.9,name='LateralExcitatory',
          weights_bounds=BoundingBox(radius=0.10),learning_rate=3.2018) 
            
s.connect(V1,V1,delay=FixedPoint("0.05"), 
          connection_type=CFProjection,strength=-0.9,name='LateralInhibitory',
          weights_bounds=BoundingBox(radius=0.23),learning_rate=1.9626)         


# CEBHACKALERT: add missing scheduled actions from c++ lissom
# (i.e. ones relevant to all bounds and densities, not just for
#  the particular ones set in this file right now).

s.startup_commands.append("from topo.base.boundingregion import BoundingBox; V1=topo.sim['V1']")

### Lateral excitatory bounds changes
s.schedule_command(200,'V1.projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.06))')
s.schedule_command(500,'V1.projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.042))')

### Lateral excitatory learning rate changes
s.schedule_command(200,'V1.projections()["LateralExcitatory"].learning_rate=1.2213')
s.schedule_command(500,'V1.projections()["LateralExcitatory"].learning_rate=0.3466')

### Afferent learning rate changes
s.schedule_command(  500,'V1.projections()["LGNOnAfferent"].learning_rate=0.6850;V1.projections()["LGNOffAfferent"].learning_rate=0.6850')
s.schedule_command( 2000,'V1.projections()["LGNOnAfferent"].learning_rate=0.5480;V1.projections()["LGNOffAfferent"].learning_rate=0.5480')
s.schedule_command( 4000,'V1.projections()["LGNOnAfferent"].learning_rate=0.4110;V1.projections()["LGNOffAfferent"].learning_rate=0.4110')
s.schedule_command(20000,'V1.projections()["LGNOnAfferent"].learning_rate=0.2055;V1.projections()["LGNOffAfferent"].learning_rate=0.2055')

### LISSOM output function bounds changes
s.schedule_command(  200,'V1.output_fn.lower_bound=0.093;V1.output_fn.upper_bound=0.643')
s.schedule_command(  500,'V1.output_fn.lower_bound=0.103;V1.output_fn.upper_bound=0.643')
s.schedule_command( 1000,'V1.output_fn.lower_bound=0.133;V1.output_fn.upper_bound=0.663')
s.schedule_command( 2000,'V1.output_fn.lower_bound=0.163;V1.output_fn.upper_bound=0.683')
s.schedule_command( 3000,'V1.output_fn.lower_bound=0.183;V1.output_fn.upper_bound=0.713')
s.schedule_command( 4000,'V1.output_fn.lower_bound=0.183;V1.output_fn.upper_bound=0.743')
s.schedule_command( 5000,'V1.output_fn.lower_bound=0.193;V1.output_fn.upper_bound=0.773')
s.schedule_command( 6500,'V1.output_fn.lower_bound=0.203;V1.output_fn.upper_bound=0.803')
s.schedule_command( 8000,'V1.output_fn.lower_bound=0.213;V1.output_fn.upper_bound=0.833')
s.schedule_command(20000,'V1.output_fn.lower_bound=0.223;V1.output_fn.upper_bound=0.863')

# default locations for model editor
V1.gui_x=306.0;     V1.gui_y=225.0
LGNOn.gui_x=432.0;  LGNOn.gui_y=345.0
LGNOff.gui_x=150.0; LGNOff.gui_y=345.0
Retina.gui_x=279.0; Retina.gui_y=500.0

s.run(0)
