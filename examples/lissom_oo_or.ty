"""
Example of a LISSOM-based orientation map with ON/OFF channels.

$Id$
"""
__version__='$Revision$'

import random
import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefns.optimized import CFDotProduct
from topo.base.parameterclasses import DynamicNumber
from topo.base.connectionfield import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import Hebbian
from topo.outputfns.optimized import DivisiveSumNormalize as DivisiveSumNormalize_opt
from topo.outputfns.basic import DivisiveSumNormalize,PiecewiseLinear
from topo.patterns import PatternGeneratorParameter

###########################################
# Set parameters

random.seed(1234)


from topo.base.parameterclasses import Wrapper

input_pattern = topo.patterns.basic.Gaussian(scale=1.0,size = 2*0.0468,aspect_ratio=4.0,
                                    x=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                                    y=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                                    orientation=DynamicNumber(Wrapper("random.uniform",-pi,pi)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.weights_shape = topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFDotProduct()
CFProjection.learning_fn=Hebbian()
CFProjection.weights_output_fn.single_cf_fn = DivisiveSumNormalize_opt()

###########################################
# build simulation

s = topo.base.simulator.Simulator()
Retina = GeneratorSheet(name='Retina',density=24.0,bounds=BoundingBox(radius=0.5+0.25+0.375),
                        input_generator=input_pattern)
LGNOn = CFSheet(name='LGNOn',density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                measure_maps=False)
LGNOff = CFSheet(name='LGNOff',density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                 output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                 measure_maps=False)
V1 = LISSOM(name='V1',density=48.0,bounds=BoundingBox(radius=0.5))
V1.output_fn.lower_bound=0.083
V1.output_fn.upper_bound=0.633

# LGN ON channel
SharedWeightCFProjection.weights_output_fn.single_cf_fn=DivisiveSumNormalize()

LGNOn_center = s.connect(Retina,LGNOn,delay = FixedPoint("0.05"),
                         connection_type=SharedWeightCFProjection,strength=2.33,
                         name='Center',weights_bounds=BoundingBox(radius=0.375),
                         weights_generator=topo.patterns.basic.Gaussian(size=0.0417,aspect_ratio=1))

LGNOn_surround = s.connect(Retina,LGNOn,delay = FixedPoint("0.05"),
                           connection_type=SharedWeightCFProjection,strength=-2.33,
                           name='Surround',weights_bounds=BoundingBox(radius=0.375),
                           weights_generator=topo.patterns.basic.Gaussian(size=0.1667,aspect_ratio=1))


# LGN OFF channel
LGNOff_center = s.connect(Retina,LGNOff,delay = FixedPoint("0.05"),
                          connection_type=SharedWeightCFProjection,strength=-2.33,
                          name='Center',weights_bounds=BoundingBox(radius=0.375),
                          weights_generator=topo.patterns.basic.Gaussian(size=0.0417,aspect_ratio=1))

LGNOff_surround = s.connect(Retina,LGNOff,delay = FixedPoint("0.05"),
                            connection_type=SharedWeightCFProjection,strength=2.33,
                            name='Surround',weights_bounds=BoundingBox(radius=0.375),
                            weights_generator=topo.patterns.basic.Gaussian(size=0.1667,aspect_ratio=1))


s.connect(LGNOn,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.75,name='LGNOnAfferent',
          weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)

s.connect(LGNOff,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.5,name='LGNOffAfferent',
          weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)


s.connect(V1,V1,delay=FixedPoint("0.05"),
          connection_type=CFProjection,strength=0.9,name='LateralExcitatory',
          weights_bounds=BoundingBox(radius=0.10),learning_rate=3.2018) 
            
s.connect(V1,V1,delay=FixedPoint("0.05"), 
          connection_type=CFProjection,strength=-0.9,name='LateralInhibitory',
          weights_bounds=BoundingBox(radius=0.23),learning_rate=1.9626)         

# CEBHACKALERT: add missing scheduled actions

s.schedule_action(200, V1.projections()['LateralExcitatory'].change_bounds, BoundingBox(radius=0.06))
s.schedule_action(500, V1.projections()['LateralExcitatory'].change_bounds, BoundingBox(radius=0.042))


# Schedule action requires a function, so we create a temporary one
def set_learning_rate(projection_name, rate):
    """Set the learning rate on the named projection of V1."""
    V1.projections()[projection_name].learning_rate=rate


s.schedule_action(  200, set_learning_rate, "LateralExcitatory", 1.2213)
s.schedule_action(  500, set_learning_rate, "LateralExcitatory", 0.3466)

s.schedule_action(  500, set_learning_rate, "LGNOnAfferent", 0.6850)
s.schedule_action( 2000, set_learning_rate, "LGNOnAfferent", 0.5480)
s.schedule_action( 4000, set_learning_rate, "LGNOnAfferent", 0.4110)
s.schedule_action(20000, set_learning_rate, "LGNOnAfferent", 0.2055)

s.schedule_action(  500, set_learning_rate, "LGNOffAfferent", 0.6850)
s.schedule_action( 2000, set_learning_rate, "LGNOffAfferent", 0.5480)
s.schedule_action( 4000, set_learning_rate, "LGNOffAfferent", 0.4110)
s.schedule_action(20000, set_learning_rate, "LGNOffAfferent", 0.2055)



def set_deltabeta(x,y):
    """Set the threshold function limits on V1."""
    V1.output_fn.lower_bound=x
    V1.output_fn.upper_bound=y

s.schedule_action(  200, set_deltabeta,0.093 , 0.643)
s.schedule_action(  500, set_deltabeta,0.103 , 0.653)
s.schedule_action( 1000, set_deltabeta,0.133 , 0.663)
s.schedule_action( 2000, set_deltabeta,0.163 , 0.683)
s.schedule_action( 3000, set_deltabeta,0.183 , 0.713)
s.schedule_action( 4000, set_deltabeta,0.183 , 0.743)
s.schedule_action( 5000, set_deltabeta,0.193 , 0.773)
s.schedule_action( 6500, set_deltabeta,0.203 , 0.803)
s.schedule_action( 8000, set_deltabeta,0.213 , 0.833)
s.schedule_action(20000, set_deltabeta,0.223 , 0.863)


# default locations for model editor
V1.gui_x=306.0;     V1.gui_y=225.0
LGNOn.gui_x=432.0;  LGNOn.gui_y=345.0
LGNOff.gui_x=150.0; LGNOff.gui_y=345.0
Retina.gui_x=279.0; Retina.gui_y=500.0

s.run(0)
