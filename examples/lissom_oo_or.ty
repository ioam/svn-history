"""
Example of a LISSOM-based orientation map with ON/OFF channels.

$Id$
"""
__version__='$Revision$'

import RandomArray
import fixedpoint

from math import pi, sqrt
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightProjection
from topo.responsefns.optimized import CFPDotProduct_opt1
from topo.base.parameterclasses import DynamicNumber
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFProjectionHebbian_opt1
from topo.outputfns.optimized import CFPDivisiveSumNormalize_opt1
from topo.outputfns.basic import PiecewiseLinear, DivisiveSumNormalize
from topo.misc.numbergenerators import RandomWrapper

topo.sim.name = "lissom_oo_or"

input_pattern = topo.patterns.basic.Gaussian(
          scale=1.0, size=2*0.0468, aspect_ratio=4.0,
          x=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=12)),
          y=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=34)),
          orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))

                                 
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPDotProduct_opt1()
CFProjection.learning_fn=CFProjectionHebbian_opt1()
CFProjection.weights_output_fn=CFPDivisiveSumNormalize_opt1()
SharedWeightProjection.weights_output_fn.single_cf_fn=DivisiveSumNormalize()

###########################################
# build simulation

topo.sim['Retina'] = GeneratorSheet(density=24.0,input_generator=input_pattern,
                                    bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['LGNOn'] = CFSheet(density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                  output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                  measure_maps=False)

topo.sim['LGNOff'] = CFSheet(density=24.0,bounds=BoundingBox(radius=0.5+0.25),
                   output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                   measure_maps=False)

topo.sim['V1'] = LISSOM(density=locals().get('default_density',48.0),
                        bounds=BoundingBox(radius=0.5))

topo.sim['V1'].output_fn.lower_bound=0.083
topo.sim['V1'].output_fn.upper_bound=0.633


# LGN ON channel
topo.sim.connect('Retina','LGNOn',delay=FixedPoint("0.05"),
                  connection_type=SharedWeightProjection,strength=2.33,
                  weights_bounds=BoundingBox(radius=0.375),name='Center',
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('Retina','LGNOn',delay = FixedPoint("0.05"),
                  connection_type=SharedWeightProjection,strength=-2.33,
                  name='Surround',weights_bounds=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

# LGN OFF channel
topo.sim.connect('Retina','LGNOff',delay = FixedPoint("0.05"),
                  connection_type=SharedWeightProjection,strength=-2.33,
                  name='Center',weights_bounds=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('Retina','LGNOff',delay = FixedPoint("0.05"),
                  connection_type=SharedWeightProjection,strength=2.33,
                  name='Surround',weights_bounds=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))


topo.sim.connect('LGNOn','V1',delay=FixedPoint("0.05"),
                  connection_type=CFProjection,strength=0.75,name='LGNOnAfferent',
                  weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)

topo.sim.connect('LGNOff','V1',delay=FixedPoint("0.05"),
                  connection_type=CFProjection,strength=0.5,name='LGNOffAfferent',
                  weights_bounds=BoundingBox(radius=0.25),learning_rate=0.9590)


topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralExcitatory',
                  connection_type=CFProjection,strength=0.9,
                  weights_bounds=BoundingBox(radius=0.10),learning_rate=3.2018) 
            
topo.sim.connect('V1','V1',delay=FixedPoint("0.05"),name='LateralInhibitory',
                  connection_type=CFProjection,strength=-0.9,
                  weights_bounds=BoundingBox(radius=0.23),learning_rate=1.9626)  



### Actions scheduled to occur as the simulation proceeds.
#
# CEBHACKALERT: add missing scheduled actions from c++ lissom
# (i.e. ones relevant to all bounds and densities, not just for
#  the particular ones set in this file right now).

topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

### Lateral excitatory bounds changes
topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command(500,'topo.sim.["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.042))')

### Lateral excitatory learning rate changes
topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=1.2213')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=0.3466')

### Afferent learning rate changes
topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.6850;topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.5480;topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.4110;topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.2055;topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.2055')

### LISSOM output function bounds changes
topo.sim.schedule_command(  200,'topo.sim["V1"].output_fn.lower_bound=0.093;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command(  500,'topo.sim["V1"].output_fn.lower_bound=0.103;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command( 1000,'topo.sim["V1"].output_fn.lower_bound=0.133;topo.sim["V1"].output_fn.upper_bound=0.663')
topo.sim.schedule_command( 2000,'topo.sim["V1"].output_fn.lower_bound=0.163;topo.sim["V1"].output_fn.upper_bound=0.683')
topo.sim.schedule_command( 3000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.713')
topo.sim.schedule_command( 4000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.743')
topo.sim.schedule_command( 5000,'topo.sim["V1"].output_fn.lower_bound=0.193;topo.sim["V1"].output_fn.upper_bound=0.773')
topo.sim.schedule_command( 6500,'topo.sim["V1"].output_fn.lower_bound=0.203;topo.sim["V1"].output_fn.upper_bound=0.803')
topo.sim.schedule_command( 8000,'topo.sim["V1"].output_fn.lower_bound=0.213;topo.sim["V1"].output_fn.upper_bound=0.833')
topo.sim.schedule_command(20000,'topo.sim["V1"].output_fn.lower_bound=0.223;topo.sim["V1"].output_fn.upper_bound=0.863')

# default locations for model editor
topo.sim['V1'].gui_x=306.0;      topo.sim['V1'].gui_y=225.0
topo.sim['LGNOn'].gui_x=432.0;   topo.sim['LGNOn'].gui_y=345.0
topo.sim['LGNOff'].gui_x=150.0;  topo.sim['LGNOff'].gui_y=345.0
topo.sim['Retina'].gui_x=279.0;  topo.sim['Retina'].gui_y=500.0

topo.sim.run(0)
