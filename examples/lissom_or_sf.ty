"""
UNDER DEVELOPMENT

Example of a LISSOM-based orientation map with ON/OFF channels.

with different size LGN connectionfields. To investigate spatial frequency.

the same as lissom_oo_or.ty as of 3.3.06 but with quarter v1 area

$Id$
"""
__version__='$Revision$'

import RandomArray

from math import pi
from fixedpoint import FixedPoint

import topo.patterns.basic
import topo.patterns.random

from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedCFProjection
from topo.responsefns.optimized import CFProjectionDotProduct_opt1
from topo.base.parameterclasses import DynamicNumber
from topo.base.connectionfield import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFProjectionHebbian_opt1
from topo.outputfns.basic import DivisiveSumNormalize,PiecewiseLinear
from topo.outputfns.optimized import CFProjectionDivisiveSumNormalize_opt1
from topo.misc.numbergenerators import RandomWrapper

# JABALERT: Shouldn't this script file be renamed lissom_oo_or_sf since it's ON/OFF?
topo.sim.name = "lissom_oo_or_sf"


###########################################
# Set parameters

centre=0.0417*2
surround=0.1667*2
v1size=0.5
retinalgnboxradius=0.375*2
lgnv1boxradius=0.25*2
lgnbuffer=0.25*2
retinabuffer=0.375*2+lgnbuffer
latex=0.2
latinh=0.46


centres=0.0417*1
surrounds=0.1667*1
v1sizes=0.5
retinalgnboxradiuss=0.375*1
lgnv1boxradiuss=0.25*1
lgnbuffers=0.25*1
retinabuffers=0.375*1+lgnbuffers
latexs=0.1
latinhs=0.23

from math import floor
from topo.patterns.basic import CompositePatternGenerator


#this one for small receptive fields
#input_pattern = topo.patterns.basic.Gaussian(scale=1.0,size = 1*2*0.0468,aspect_ratio=4.0,
#                                    x=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=12)),
#                                    y=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=34)),
#                                    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))
  
#this one for large receptive fields                                  
#input_pattern = topo.patterns.basic.Gaussian(scale=1.0,size = 2*2*0.0468,aspect_ratio=4.0,
#                                    x=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=12)),
#                                    y=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=34)),
#                                    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))

#this one is for testing   

#random.seed(1234)
#def rando():
#	if (random.uniform(0,1)>0.5):
#		return 0.1  #1*2*0.0468
#	else:
#		return 0.2  #2*2*0.0468
 #          
#input_pattern = topo.patterns.basic.Gaussian(scale=1.0,size = DynamicNumber(rando),aspect_ratio=4.0,
#                                    x=DynamicNumber(RandomWrapper("uniform",(-0.5),(0.5),seed=12)),
#                                    y=DynamicNumber(RandomWrapper("uniform",(-0.5),(0.5),seed=34)),
#                                    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))



x=1
x1=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=32))
y1=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=12))
x2=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=33))
y2=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=13))


def swap():
	global x
	global x1
	global y1
	global x2
	global y2	
	if (x==1):
		x=0
		input_pattern.x=x1
		input_pattern.y=y1
		return 1*2*0.0468
	else:
		x=1
		input_pattern.x=x2
		input_pattern.y=y2
		return 2*2*0.0468

           
input_pattern = topo.patterns.basic.Gaussian(
	scale=1.0,
	size=DynamicNumber(swap),
	aspect_ratio=4.0,
	orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))


#########

#def rando():
#   if (random.uniform(0,1)>0.5):
#       sizee=0.5
#       return topo.patterns.basic.Gaussian(scale=1.0,size = 1*2*0.0468,aspect_ratio=4.0,
#                                    x=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=12)),
#                                    y=DynamicNumber(RandomWrapper("uniform",-0.5,0.5,seed=34)),
#                                    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))#

#   else:
#   	   sizee=1.0
#   	   return topo.patterns.basic.Gaussian(scale=1.0,size = 2*2*0.0468,aspect_ratio=4.0,
#                                    x=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=12)),
#                                    y=DynamicNumber(RandomWrapper("uniform",-1.0,1.0,seed=34)),
#                                    orientation=DynamicNumber(RandomWrapper("uniform",-pi,pi,seed=56)))
#

#input_pattern = DynamicNumber(rando)


                                                                      
# Specify weight initialization, response function, and learning function
RandomArray.seed(500,500)
CFProjection.weights_generator=topo.patterns.random.UniformRandom()
CFProjection.weights_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFProjectionDotProduct_opt1()
CFProjection.learning_fn=CFProjectionHebbian_opt1()
CFProjection.weights_output_fn=CFProjectionDivisiveSumNormalize_opt1()

SharedCFProjection.weights_output_fn.single_cf_fn=DivisiveSumNormalize()


###########################################
# build simulation
topo.sim.name='big and small'

topo.sim['Retina'] = GeneratorSheet(density=24.0,bounds=BoundingBox(radius=v1size+retinabuffer),input_generator=input_pattern)
                        
#topo.sim['Retina'] = GeneratorSheet(density=12.0,bounds=BoundingBox(radius=v1size+retinabuffer),input_generator=CompositePatternGenerator([input_pattern,input_pattern,input_pattern,input_pattern]))                        
                        
topo.sim['LGNOn'] = CFSheet(
	density=12.0,bounds=BoundingBox(radius=v1size+lgnbuffer),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['LGNOff'] = CFSheet(
	density=12.0,bounds=BoundingBox(radius=v1size+lgnbuffer),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['V1'] = LISSOM(density=24.0,bounds=BoundingBox(radius=v1size))

topo.sim['V1'].output_fn.lower_bound=0.083
topo.sim['V1'].output_fn.upper_bound=0.633


topo.sim['LGNOns'] = CFSheet(
	density=24.0,bounds=BoundingBox(radius=v1sizes+lgnbuffers),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)
	 
topo.sim['LGNOffs'] = CFSheet(
	density=24.0,bounds=BoundingBox(radius=v1sizes+lgnbuffers),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['V1s'] = LISSOM(density=48.0,bounds=BoundingBox(radius=v1sizes))

topo.sim['V1s'].output_fn.lower_bound=0.083
topo.sim['V1s'].output_fn.upper_bound=0.633


topo.sim.zapdensity=topo.sim['Retina'].density,topo.sim['LGNOff'].density,topo.sim['LGNOffs'].density,topo.sim['LGNOn'].density,topo.sim['LGNOns'].density,topo.sim['V1'].density,topo.sim['V1s'].density



# LGN ON channel
#SharedCFProjection.weights_output_fn.single_cf_fn=DivisiveSumNormalize()

SharedCFProjection.learning_fn.output_fn=DivisiveSumNormalize()

topo.sim.connect2('Retina','LGNOn',delay = FixedPoint("0.05"),name='Center',
		  connection_type=SharedCFProjection,strength=2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradius),
                  weights_generator=topo.patterns.basic.Gaussian(size=centre,
							       aspect_ratio=1))

topo.sim.connect2('Retina','LGNOn',delay = FixedPoint("0.05"),name='Surround',
		  connection_type=SharedCFProjection,strength=-2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.patterns.basic.Gaussian(size=surround,
							       aspect_ratio=1))


# LGN OFF channel
topo.sim.connect2('Retina','LGNOff',delay = FixedPoint("0.05"),name='Center',
		  connection_type=SharedCFProjection,strength=-2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.patterns.basic.Gaussian(size=centre,
							       aspect_ratio=1))

topo.sim.connect2('Retina','LGNOff',delay = FixedPoint("0.05"),name='Surround',
		  connection_type=SharedCFProjection,strength=2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.patterns.basic.Gaussian(size=surround,
							       aspect_ratio=1))
                            
#small fields               
                            
topo.sim.connect2('Retina','LGNOns',delay = FixedPoint("0.05"),name='Center',
		  connection_type=SharedCFProjection,strength=2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.patterns.basic.Gaussian(size=centres,
							       aspect_ratio=1))

topo.sim.connect2('Retina','LGNOns',delay = FixedPoint("0.05"),name='Surround',
		  connection_type=SharedCFProjection,strength=-2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.patterns.basic.Gaussian(size=surrounds,
								 aspect_ratio=1))


# LGN OFF channel
topo.sim.connect2('Retina','LGNOffs',delay = FixedPoint("0.05"),
		  connection_type=SharedCFProjection,strength=-2.33,
		  name='Center',weights_bounds=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.patterns.basic.Gaussian(size=centres,
								 aspect_ratio=1))

topo.sim.connect2('Retina','LGNOffs',delay=FixedPoint("0.05"),name='Surround',
		  connection_type=SharedCFProjection,strength=2.33,
		  weights_bounds=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.patterns.basic.Gaussian(size=surrounds,
								 aspect_ratio=1))
                            


topo.sim.connect2('LGNOn','V1',delay=FixedPoint("0.05"),name='LGNOnAfferent',
		  connection_type=CFProjection,strength=0.75,
		  weights_bounds=BoundingBox(radius=lgnv1boxradius),
		  learning_rate=0.9590)

topo.sim.connect2('LGNOff','V1',delay=FixedPoint("0.05"),name='LGNOffAfferent',
		  connection_type=CFProjection,strength=0.5,
		  weights_bounds=BoundingBox(radius=lgnv1boxradius),
		  learning_rate=0.9590)


topo.sim.connect2('V1','V1',delay=FixedPoint("0.05"),name='LateralExcitatory',
		  connection_type=CFProjection,strength=0.9,
		  weights_bounds=BoundingBox(radius=latex),
		  learning_rate=3.2018) 
            
topo.sim.connect2('V1','V1',delay=FixedPoint("0.05"),name='LateralInhibitory', 
		  connection_type=CFProjection,strength=-0.9,
		  weights_bounds=BoundingBox(radius=latinh),
		  learning_rate=1.9626)         


RandomArray.seed(500,500) #sets V1s connectionfileds random initial weights seeding.

topo.sim.connect2('LGNOns','V1s',delay=FixedPoint("0.05"),name='LGNOnAfferents',
		  connection_type=CFProjection,strength=0.75,
		  weights_bounds=BoundingBox(radius=lgnv1boxradiuss),
		  learning_rate=0.9590)

topo.sim.connect2('LGNOffs','V1s',delay=FixedPoint("0.05"),
		  connection_type=CFProjection,strength=0.5,
		  name='LGNOffAfferents',
		  weights_bounds=BoundingBox(radius=lgnv1boxradiuss),
		  learning_rate=0.9590)


topo.sim.connect2('V1s','V1s',delay=FixedPoint("0.05"),
		  connection_type=CFProjection,strength=0.9,
		  name='LateralExcitatorys',
		  weights_bounds=BoundingBox(radius=latexs),
		  learning_rate=3.2018) 
            
topo.sim.connect2('V1s','V1s',delay=FixedPoint("0.05"), 
		  connection_type=CFProjection,strength=-0.9,
		  name='LateralInhibitorys',
		  weights_bounds=BoundingBox(radius=latinhs),
		  learning_rate=1.9626)   



### Scheduled actions
#

# CEBHACKALERT: add missing scheduled actions (see lissom_oo_or.ty)

topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.12))')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.084))')

topo.sim.schedule_command(200,'topo.sim["V1s"].projections()["LateralExcitatorys"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command(500,'topo.sim["V1s"].projections()["LateralExcitatorys"].change_bounds(BoundingBox(radius=0.042))')


topo.sim.schedule_command(  200,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=1.2213')
topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=0.3466')

topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.2055')

topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.2055')



topo.sim.schedule_command(  200,'topo.sim["V1s"].projections()["LGNExcitatorys"].learning_rate=1.2213')
topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNExcitatorys"].learning_rate=0.3466')

topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.2055')

topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.2055')


### LISSOM output function bounds changes
topo.sim.schedule_command(  200,'topo.sim["V1"].output_fn.lower_bound=0.093;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command(  500,'topo.sim["V1"].output_fn.lower_bound=0.103;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command( 1000,'topo.sim["V1"].output_fn.lower_bound=0.133;topo.sim["V1"].output_fn.upper_bound=0.663')
topo.sim.schedule_command( 2000,'topo.sim["V1"].output_fn.lower_bound=0.163;topo.sim["V1"].output_fn.upper_bound=0.683')
topo.sim.schedule_command( 3000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.713')
topo.sim.schedule_command( 4000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.743')
topo.sim.schedule_command( 5000,'topo.sim["V1"].output_fn.lower_bound=0.193;topo.sim["V1"].output_fn.upper_bound=0.773')
topo.sim.schedule_command( 6500,'topo.sim["V1"].output_fn.lower_bound=0.203;topo.sim["V1"].output_fn.upper_bound=0.803')
topo.sim.schedule_command( 8000,'topo.sim["V1"].output_fn.lower_bound=0.213;topo.sim["V1"].output_fn.upper_bound=0.833')
topo.sim.schedule_command(20000,'topo.sim["V1"].output_fn.lower_bound=0.223;topo.sim["V1"].output_fn.upper_bound=0.863')



# default locations for model editor
topo.sim['V1'].gui_x=306.0;     topo.sim['V1'].gui_y=225.0
topo.sim['LGNOn'].gui_x=432.0;  topo.sim['LGNOn'].gui_y=345.0
topo.sim['LGNOff'].gui_x=150.0; topo.sim['LGNOff'].gui_y=345.0
topo.sim['Retina'].gui_x=400.0; topo.sim['Retina'].gui_y=600.0

topo.sim['V1s'].gui_x=800.0;     topo.sim['V1s'].gui_y=225.0
topo.sim['LGNOns'].gui_x=900.0;  topo.sim['LGNOns'].gui_y=345.0
topo.sim['LGNOffs'].gui_x=700.0; topo.sim['LGNOffs'].gui_y=345.0



topo.sim.run(0)



from os import system

#def run_batch(train_length=100):
#    print "Running until %d" % (topo.sim._time+train_length)
#    topo.sim.run(train_length)
#    system('free')
#    print " "

#for i in [1,2,20,50,90,100,200,400,500,4000,5000,10000]:
#    run_batch(i)
