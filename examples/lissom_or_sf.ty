"""
UNDER DEVELOPMENT

Example of a LISSOM-based orientation map with ON/OFF channels.

with different size LGN connectionfields. To investigate spatial frequency.

the same as lissom_oo_or.ty as of 3.3.06 but with quarter v1 area

$Id$
"""
__version__='$Revision$'

import numpy

from math import pi


import topo.pattern.basic
import topo.pattern.random

from topo.sheet.lissom import LISSOM
from topo.sheet.generator import GeneratorSheet
from topo.projection.basic import CFProjection, SharedWeightCFProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt
from topo.outputfn.basic import DivisiveNormalizeL1,PiecewiseLinear
from topo.outputfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.misc.numbergenerator import UniformRandom
from topo.responsefn.optimized import CFPRF_DotProduct_opt


# JABALERT: Shouldn't this script file be renamed lissom_oo_or_sf since it's ON/OFF?
topo.sim.name = "lissom_oo_or_sf" #CB: the name is changed below, too


###########################################
# Set parameters

centre=0.0417*2
surround=0.1667*2
v1size=0.5
retinalgnboxradius=0.375*2
lgnv1boxradius=0.25*2
lgnbuffer=0.25*2
retinabuffer=0.375*2+lgnbuffer
latex=0.2
latinh=0.46


centres=0.0417*1
surrounds=0.1667*1
v1sizes=0.5
retinalgnboxradiuss=0.375*1
lgnv1boxradiuss=0.25*1
lgnbuffers=0.25*1
retinabuffers=0.375*1+lgnbuffers
latexs=0.1
latinhs=0.23

from math import floor
from topo.pattern.basic import Composite


#this one for small receptive fields
#input_pattern = topo.pattern.basic.Gaussian(scale=1.0,size = 1*2*0.0468,aspect_ratio=4.0,
#                                    x=RandomWrapper("uniform",-0.5,0.5,seed=12),
#                                    y=RandomWrapper("uniform",-0.5,0.5,seed=34),
#                                    orientation=RandomWrapper("uniform",-pi,pi,seed=56))
  
#this one for large receptive fields                                  
#input_pattern = topo.pattern.basic.Gaussian(scale=1.0,size = 2*2*0.0468,aspect_ratio=4.0,
#                                    x=RandomWrapper("uniform",-1.0,1.0,seed=12),
#                                    y=RandomWrapper("uniform",-1.0,1.0,seed=34),
#                                    orientation=RandomWrapper("uniform",-pi,pi,seed=56))

#this one is for testing   

#random.seed(1234)
#def rando():
#	if (random.uniform(0,1)>0.5):
#		return 0.1  #1*2*0.0468
#	else:
#		return 0.2  #2*2*0.0468
 #          
#input_pattern = topo.pattern.basic.Gaussian(scale=1.0,size = rando,aspect_ratio=4.0,
#                                    x=RandomWrapper("uniform",(-0.5),(0.5),seed=12),
#                                    y=RandomWrapper("uniform",(-0.5),(0.5),seed=34),
#                                    orientation=RandomWrapper("uniform",-pi,pi,seed=56))



x=1

x1=UniformRandom(lbound=-0.5,ubound=0.5,seed=32)
x2=UniformRandom(lbound=-1.0,ubound=1.0,seed=33)
y1=UniformRandom(lbound=-0.5,ubound=0.5,seed=12)
y2=UniformRandom(lbound=-1.0,ubound=1.0,seed=13)


def swap():
	global x
	global x1
	global y1
	global x2
	global y2	
	if (x==1):
		x=0
		input_pattern.x=x1
		input_pattern.y=y1
		return 1*2*0.0468
	else:
		x=1
		input_pattern.x=x2
		input_pattern.y=y2
		return 2*2*0.0468

           
input_pattern = topo.pattern.basic.Gaussian(
	scale=1.0,
	size=swap,
	aspect_ratio=4.0,
	orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56))


#########

#def rando():
#   if (random.uniform(0,1)>0.5):
#       sizee=0.5
#       return topo.pattern.basic.Gaussian(scale=1.0,size = 1*2*0.0468,aspect_ratio=4.0,
#                                    x=RandomWrapper("uniform",-0.5,0.5,seed=12),
#                                    y=RandomWrapper("uniform",-0.5,0.5,seed=34),
#                                    orientation=RandomWrapper("uniform",-pi,pi,seed=56))#

#   else:
#   	   sizee=1.0
#   	   return topo.pattern.basic.Gaussian(scale=1.0,size = 2*2*0.0468,aspect_ratio=4.0,
#                                    x=RandomWrapper("uniform",-1.0,1.0,seed=12),
#                                    y=RandomWrapper("uniform",-1.0,1.0,seed=34),
#                                    orientation=RandomWrapper("uniform",-pi,pi,seed=56))
#

#input_pattern = rando


                                                                      
# Specify weight initialization, response function, and learning function
topo.pattern.random.seed((500,500))
CFProjection.weights_generator=topo.pattern.random.UniformRandom()
CFProjection.cf_shape=topo.pattern.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()

SharedWeightCFProjection.weights_output_fn.single_cf_fn=DivisiveNormalizeL1()
SharedWeightCFProjection.response_fn = CFPRF_DotProduct_opt()

###########################################
# build simulation


topo.sim.name='big and small'

topo.sim['Retina'] = GeneratorSheet(nominal_density=24.0,nominal_bounds=BoundingBox(radius=v1size+retinabuffer),input_generator=input_pattern,phase=0.05)
                        
#topo.sim['Retina'] = GeneratorSheet(density=12.0,bounds=BoundingBox(radius=v1size+retinabuffer),input_generator=Composite([input_pattern,input_pattern,input_pattern,input_pattern]),phase=0.05)
                        
topo.sim['LGNOn'] = CFSheet(
	nominal_density=12.0,nominal_bounds=BoundingBox(radius=v1size+lgnbuffer),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['LGNOff'] = CFSheet(
	nominal_density=12.0,nominal_bounds=BoundingBox(radius=v1size+lgnbuffer),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=24.0,nominal_bounds=BoundingBox(radius=v1size))

topo.sim['V1'].output_fn.lower_bound=0.083
topo.sim['V1'].output_fn.upper_bound=0.633


topo.sim['LGNOns'] = CFSheet(
	nominal_density=24.0,nominal_bounds=BoundingBox(radius=v1sizes+lgnbuffers),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)
	 
topo.sim['LGNOffs'] = CFSheet(
	nominal_density=24.0,nominal_bounds=BoundingBox(radius=v1sizes+lgnbuffers),
	output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
	measure_maps=False)

topo.sim['V1s'] = LISSOM(nominal_density=48.0,nominal_bounds=BoundingBox(radius=v1sizes))

topo.sim['V1s'].output_fn.lower_bound=0.083
topo.sim['V1s'].output_fn.upper_bound=0.633


topo.sim.zapdensity=topo.sim['Retina'].xdensity,topo.sim['LGNOff'].xdensity,topo.sim['LGNOffs'].xdensity,topo.sim['LGNOn'].xdensity,topo.sim['LGNOns'].xdensity,topo.sim['V1'].xdensity,topo.sim['V1s'].xdensity



# LGN ON channel
#SharedWeightCFProjection.weights_output_fn.single_cf_fn=DivisiveNormalizeL1()

SharedWeightCFProjection.learning_fn.output_fn=DivisiveNormalizeL1()

topo.sim.connect('Retina','LGNOn',delay=0.05,name='Center',
		  connection_type=SharedWeightCFProjection,strength=2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradius),
                  weights_generator=topo.pattern.basic.Gaussian(size=centre,
							       aspect_ratio=1))

topo.sim.connect('Retina','LGNOn',delay=0.05,name='Surround',
		  connection_type=SharedWeightCFProjection,strength=-2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.pattern.basic.Gaussian(size=surround,
							       aspect_ratio=1))


# LGN OFF channel
topo.sim.connect('Retina','LGNOff',delay=0.05,name='Center',
		  connection_type=SharedWeightCFProjection,strength=-2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.pattern.basic.Gaussian(size=centre,
							       aspect_ratio=1))

topo.sim.connect('Retina','LGNOff',delay=0.05,name='Surround',
		  connection_type=SharedWeightCFProjection,strength=2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradius),
		  weights_generator=topo.pattern.basic.Gaussian(size=surround,
							       aspect_ratio=1))
                            
#small fields               
                            
topo.sim.connect('Retina','LGNOns',delay=0.05,name='Center',
		  connection_type=SharedWeightCFProjection,strength=2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.pattern.basic.Gaussian(size=centres,
							       aspect_ratio=1))

topo.sim.connect('Retina','LGNOns',delay=0.05,name='Surround',
		  connection_type=SharedWeightCFProjection,strength=-2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.pattern.basic.Gaussian(size=surrounds,
								 aspect_ratio=1))


# LGN OFF channel
topo.sim.connect('Retina','LGNOffs',delay=0.05,
		  connection_type=SharedWeightCFProjection,strength=-2.33,
		  name='Center',nominal_bounds_template=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.pattern.basic.Gaussian(size=centres,
								 aspect_ratio=1))

topo.sim.connect('Retina','LGNOffs',delay=0.05,name='Surround',
		  connection_type=SharedWeightCFProjection,strength=2.33,
		  nominal_bounds_template=BoundingBox(radius=retinalgnboxradiuss),
		  weights_generator=topo.pattern.basic.Gaussian(size=surrounds,
								 aspect_ratio=1))
                            


topo.sim.connect('LGNOn','V1',delay=0.05,name='LGNOnAfferent',
		  connection_type=CFProjection,strength=0.75,
		  nominal_bounds_template=BoundingBox(radius=lgnv1boxradius),
		  learning_rate=0.9590)

topo.sim.connect('LGNOff','V1',delay=0.05,name='LGNOffAfferent',
		  connection_type=CFProjection,strength=0.5,
		  nominal_bounds_template=BoundingBox(radius=lgnv1boxradius),
		  learning_rate=0.9590)


topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
		  connection_type=CFProjection,strength=0.9,
		  nominal_bounds_template=BoundingBox(radius=latex),
		  learning_rate=3.2018) 
            
topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory', 
		  connection_type=CFProjection,strength=-0.9,
		  nominal_bounds_template=BoundingBox(radius=latinh),
		  learning_rate=1.9626)         


#sets V1s connectionfileds random initial weights seeding.
topo.pattern.random.seed((500,500))
# (CB: rather than resetting the seed, could instead create the two
# CFProjections each with its own random_generator (with the same
# seed). Or, could copy the generator from one to the other.)

topo.sim.connect('LGNOns','V1s',delay=0.05,name='LGNOnAfferents',
		  connection_type=CFProjection,strength=0.75,
		  nominal_bounds_template=BoundingBox(radius=lgnv1boxradiuss),
		  learning_rate=0.9590)

topo.sim.connect('LGNOffs','V1s',delay=0.05,
		  connection_type=CFProjection,strength=0.5,
		  name='LGNOffAfferents',
		  nominal_bounds_template=BoundingBox(radius=lgnv1boxradiuss),
		  learning_rate=0.9590)


topo.sim.connect('V1s','V1s',delay=0.05,
		  connection_type=CFProjection,strength=0.9,
		  name='LateralExcitatorys',
		  nominal_bounds_template=BoundingBox(radius=latexs),
		  learning_rate=3.2018) 
            
topo.sim.connect('V1s','V1s',delay=0.05, 
		  connection_type=CFProjection,strength=-0.9,
		  name='LateralInhibitorys',
		  nominal_bounds_template=BoundingBox(radius=latinhs),
		  learning_rate=1.9626)   



### Scheduled actions
#
# CEBHACKALERT: add missing scheduled actions (see lissom_oo_or.ty)

topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.12))')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.084))')

topo.sim.schedule_command(200,'topo.sim["V1s"].projections()["LateralExcitatorys"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command(500,'topo.sim["V1s"].projections()["LateralExcitatorys"].change_bounds(BoundingBox(radius=0.042))')


topo.sim.schedule_command(  200,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=1.2213')
topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=0.3466')

topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOnAfferent"].learning_rate=0.2055')

topo.sim.schedule_command(  500,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1"].projections()["LGNOffAfferent"].learning_rate=0.2055')



topo.sim.schedule_command(  200,'topo.sim["V1s"].projections()["LGNExcitatorys"].learning_rate=1.2213')
topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNExcitatorys"].learning_rate=0.3466')

topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1s"].projections()["LGNOnAfferents"].learning_rate=0.2055')

topo.sim.schedule_command(  500,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.6850')
topo.sim.schedule_command( 2000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.5480')
topo.sim.schedule_command( 4000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.4110')
topo.sim.schedule_command(20000,'topo.sim["V1s"].projections()["LGNOffAfferents"].learning_rate=0.2055')


### LISSOM output function bounds changes
topo.sim.schedule_command(  200,'topo.sim["V1"].output_fn.lower_bound=0.093;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command(  500,'topo.sim["V1"].output_fn.lower_bound=0.103;topo.sim["V1"].output_fn.upper_bound=0.643')
topo.sim.schedule_command( 1000,'topo.sim["V1"].output_fn.lower_bound=0.133;topo.sim["V1"].output_fn.upper_bound=0.663')
topo.sim.schedule_command( 2000,'topo.sim["V1"].output_fn.lower_bound=0.163;topo.sim["V1"].output_fn.upper_bound=0.683')
topo.sim.schedule_command( 3000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.713')
topo.sim.schedule_command( 4000,'topo.sim["V1"].output_fn.lower_bound=0.183;topo.sim["V1"].output_fn.upper_bound=0.743')
topo.sim.schedule_command( 5000,'topo.sim["V1"].output_fn.lower_bound=0.193;topo.sim["V1"].output_fn.upper_bound=0.773')
topo.sim.schedule_command( 6500,'topo.sim["V1"].output_fn.lower_bound=0.203;topo.sim["V1"].output_fn.upper_bound=0.803')
topo.sim.schedule_command( 8000,'topo.sim["V1"].output_fn.lower_bound=0.213;topo.sim["V1"].output_fn.upper_bound=0.833')
topo.sim.schedule_command(20000,'topo.sim["V1"].output_fn.lower_bound=0.223;topo.sim["V1"].output_fn.upper_bound=0.863')



# default locations for model editor
topo.sim['V1'     ].layout_location=(306,225)
topo.sim['LGNOn'  ].layout_location=(432,345)
topo.sim['LGNOff' ].layout_location=(150,345)
topo.sim['Retina' ].layout_location=(400,600)

topo.sim['V1s'    ].layout_location=(800,225)
topo.sim['LGNOns' ].layout_location=(900,345)
topo.sim['LGNOffs'].layout_location=(700,345)




from os import system

#def run_batch(train_length=100):
#    print "Running until %d" % (topo.sim._time+train_length)
#    topo.sim.run(train_length)
#    system('free')
#    print " "

#for i in [1,2,20,50,90,100,200,400,500,4000,5000,10000]:
#    run_batch(i)
