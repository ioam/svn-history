"""
Example of a LISSOM-based orientation map trained on natural images.

Intended to be a close (but approximate) match to the orientation map
simulation from figure 5.13 (Nature) of Miikkulainen, Bednar, Choe,
and Sirosh (2005), Computational Maps in the Visual Cortex, Springer.
Known differences include:

 - The default_density is smaller for practicality (142 in the book).
 - The matching is not yet perfect at different densities
 - The lateral inhibitory radius is up to 0.5 matrix units greater
   than in the book, because Topographica enforces good
   circular-shaped CF outlines.
 - Initial weight patterns are not smoothed around the edges, unlike
   smooth_circular_outlines=True and smooth_circular_radius_trim=-0.25
   used in the book
 - Initial weight patterns are all random within a gaussian envelope
   rather than random afferent and Gaussian sigma preset_sigma_exc=11.076
   preset_sigma_inh=71.76 lateral weights used in the book.
 - Inhibitory weight pruning is disabled (not pruning all weights below
   1e-5 as in the book)

There may be other small differences, as this file has not yet been
compared exhaustively to the original simulations.

$Id$
"""
__version__='$Revision$'


import numpy

from math import pi, sqrt


import topo.pattern.basic
import topo.pattern.random
import topo.pattern.image

from topo.pattern.basic import Gaussian
from topo.sheet.lissom import LISSOM
from topo.sheet.generatorsheet import GeneratorSheet
from topo.projection.basic import CFProjection, SharedWeightCFProjection
from topo.responsefn.optimized import CFPRF_DotProduct_opt
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfn.optimized import CFPLF_Hebbian_opt
from topo.outputfn.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfn.basic import PiecewiseLinear, DivisiveNormalizeL1
from topo.misc.numbergenerators import UniformRandom


input_type=topo.pattern.image.FileImage
image_filenames=["images/shouval/combined%02d.png"%(i+1) for i in xrange(25)]
inputs=[input_type(filename=f,size_normalization='original',orientation=0,
                   x=UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                   y=UniformRandom(lbound=-0.75,ubound=0.75,seed=34))
	for f in image_filenames]

combined_inputs=topo.pattern.basic.Selector(generators=inputs)


                                 
# Default for tutorial
topo.pattern.basic.Line.scale=0.9
topo.pattern.basic.Gaussian.size=0.08333
topo.pattern.basic.Gaussian.aspect_ratio=4.0

# Specify weight initialization, response function, and learning function
CFProjection.cf_shape = topo.pattern.basic.Disk(smoothing=0.0)
CFProjection.weights_generator = topo.pattern.basic.Constant()
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()
SharedWeightCFProjection.response_fn=CFPRF_DotProduct_opt()


###########################################
# build simulation


topo.sim['Retina']=GeneratorSheet(nominal_density=48.0,
                                  input_generator=combined_inputs,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['LGNOn']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOff']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',48.0),tsettle=9,
                        nominal_bounds=BoundingBox(radius=0.5))

topo.sim['V1'].output_fn.lower_bound=0.076
topo.sim['V1'].output_fn.upper_bound=0.633

# DoG weights for the LGN
centerg   = Gaussian(size=0.07385,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())
surroundg = Gaussian(size=0.29540,aspect_ratio=1.0,output_fn=DivisiveNormalizeL1())

on_weights = topo.pattern.basic.Composite(
    generators=[centerg,surroundg],operator=numpy.subtract)

off_weights = topo.pattern.basic.Composite(
    generators=[surroundg,centerg],operator=numpy.subtract)

# Convenience variable: input density scale
# Set to the average number of activity bubbles per iteration, where
# each activity bubble is judged to be about the same size as in
# lissom_oo_or.ty
ids=4.0

topo.sim.connect('Retina','LGNOn',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=4.7,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=on_weights)

topo.sim.connect('Retina','LGNOff',delay=0.05,
                 connection_type=SharedWeightCFProjection,strength=4.7,
                 nominal_bounds_template=BoundingBox(radius=0.375),name='Afferent',
                 weights_generator=off_weights)

topo.sim.connect('LGNOn','V1',delay=0.05, dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=1.0,name='LGNOnAfferent',
                 # JABALERT: Should probably simplify this by making a function for it.
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.27083),
                                                                             topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),learning_rate=0.9590/2/ids)

topo.sim.connect('LGNOff','V1',delay=0.05, dest_port=('Activity','JointNormalize', 'Afferent'),
                 connection_type=CFProjection,strength=1.0,name='LGNOffAfferent',
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.27083),
                                                                             topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.27083),learning_rate=0.9590/2/ids)

topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
                 connection_type=CFProjection,strength=0.9,
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.10417),
                                                                             topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.10417),learning_rate=2.55528/ids) 
            
topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory',
                 connection_type=CFProjection,strength=-1.75,
                 weights_generator=topo.pattern.basic.Composite(operator=numpy.multiply, 
                                                                 generators=[Gaussian(aspect_ratio=1.0, size=2*0.22917),
                                                                             topo.pattern.random.UniformRandom()]),
                 nominal_bounds_template=BoundingBox(radius=0.22917),learning_rate=1.80873/ids/5.0)  



### Actions scheduled to occur as the simulation proceeds.#
topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

# Convenience variable: timescale
st=1.0/2.0


### Lateral excitatory bounds changes
LE='topo.sim["V1"].projections()["LateralExcitatory"]'

topo.sim.schedule_command(  200*st,LE+'.change_bounds(BoundingBox(radius=0.0625))')
topo.sim.schedule_command(  500*st,LE+'.change_bounds(BoundingBox(radius=0.04375))')
topo.sim.schedule_command( 1000*st,LE+'.change_bounds(BoundingBox(radius=0.035))')
topo.sim.schedule_command( 2000*st,LE+'.change_bounds(BoundingBox(radius=0.02800))')
topo.sim.schedule_command( 3000*st,LE+'.change_bounds(BoundingBox(radius=0.02240))')
topo.sim.schedule_command( 4000*st,LE+'.change_bounds(BoundingBox(radius=0.01344))')
topo.sim.schedule_command( 5000*st,LE+'.change_bounds(BoundingBox(radius=0.00806))')
topo.sim.schedule_command( 6500*st,LE+'.change_bounds(BoundingBox(radius=0.00484))')
topo.sim.schedule_command( 8000*st,LE+'.change_bounds(BoundingBox(radius=0.00290))')
topo.sim.schedule_command(20000*st,LE+'.change_bounds(BoundingBox(radius=0.00174))')

### Lateral excitatory learning rate changes
topo.sim.schedule_command(  200*st,LE+'.learning_rate=0.12168*'+LE+'.n_units()')
topo.sim.schedule_command(  500*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 1000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 2000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 3000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 4000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 5000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 6500*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command( 8000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')
topo.sim.schedule_command(20000*st,LE+'.learning_rate=0.06084*'+LE+'.n_units()')

### Lateral inhibitory learning rate and strength changes
LI='topo.sim["V1"].projections()["LateralInhibitory"]'

topo.sim.schedule_command( 1000*st,LI+'.learning_rate=1.80873/ids/5.0*2.0')
topo.sim.schedule_command( 2000*st,LI+'.learning_rate=1.80873/ids/5.0*3.0')
topo.sim.schedule_command( 5000*st,LI+'.learning_rate=1.80873/ids/5.0*5.0')

topo.sim.schedule_command( 1000*st,LI+'.strength=2.2')
topo.sim.schedule_command( 2000*st,LI+'.strength=2.6')


### Afferent learning rate changes
ON ='topo.sim["V1"].projections()["LGNOnAfferent"]'
OFF='topo.sim["V1"].projections()["LGNOffAfferent"]'

topo.sim.schedule_command(  500*st,ON+'.learning_rate=0.6850/2;'+OFF+'.learning_rate=0.6850/2')
topo.sim.schedule_command( 2000*st,ON+'.learning_rate=0.5480/2;'+OFF+'.learning_rate=0.5480/2')
topo.sim.schedule_command( 4000*st,ON+'.learning_rate=0.4110/2;'+OFF+'.learning_rate=0.4110/2')
topo.sim.schedule_command(20000*st,ON+'.learning_rate=0.2055/2;'+OFF+'.learning_rate=0.2055/2')

### Activation function threshold changes
OF='topo.sim["V1"].output_fn'

topo.sim.schedule_command(  200*st,OF+'.lower_bound=0.086;'+OF+'.upper_bound=0.643')
topo.sim.schedule_command(  500*st,OF+'.lower_bound=0.096;'+OF+'.upper_bound=0.643')
topo.sim.schedule_command( 1000*st,OF+'.lower_bound=0.126;'+OF+'.upper_bound=0.663')
topo.sim.schedule_command( 2000*st,OF+'.lower_bound=0.156;'+OF+'.upper_bound=0.683')
topo.sim.schedule_command( 3000*st,OF+'.lower_bound=0.176;'+OF+'.upper_bound=0.713')
topo.sim.schedule_command( 4000*st,OF+'.lower_bound=0.176;'+OF+'.upper_bound=0.743')
topo.sim.schedule_command( 5000*st,OF+'.lower_bound=0.186;'+OF+'.upper_bound=0.773')
topo.sim.schedule_command( 6500*st,OF+'.lower_bound=0.196;'+OF+'.upper_bound=0.803')
topo.sim.schedule_command( 8000*st,OF+'.lower_bound=0.206;'+OF+'.upper_bound=0.833')
topo.sim.schedule_command(20000*st,OF+'.lower_bound=0.216;'+OF+'.upper_bound=0.863')


### Settling steps changes
topo.sim.schedule_command( 2000*st,'topo.sim["V1"].tsettle=10')
topo.sim.schedule_command( 5000*st,'topo.sim["V1"].tsettle=11')
topo.sim.schedule_command( 6500*st,'topo.sim["V1"].tsettle=12')
topo.sim.schedule_command( 8000*st,'topo.sim["V1"].tsettle=13')


# default locations for model editor
topo.sim['V1'    ].layout_location=(306,225)
topo.sim['LGNOn' ].layout_location=(432,345)
topo.sim['LGNOff'].layout_location=(150,345)
topo.sim['Retina'].layout_location=(279,500)
