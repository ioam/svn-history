"""
Simple example of defining a hierarchy of visual areas.

Similar to cfsom_or.py, but with additional eyes, visual areas,
feedback, etc.  Does not necessarily do anything useful, but may
be modified to do so in the future.

$Id$
"""
__version__='$Revision$'

import random

from topo.sheets.generatorsheet import GeneratorSheet
from topo.base.patterngenerator import BoundingBox
#from topo.projections.kernelprojection import KernelProjection
from topo.base.connectionfield import CFProjection
from topo.base.parameter import DynamicNumber
from topo.sheets.cfsom import CFSOM
from topo.patterns.random import UniformRandomGenerator
from topo.responsefns.basic import CFDotProduct
from topo.patterns.basic import LineGenerator
from topo.base.simulator import Simulator
from topo.learningfns.basic import HebbianSOMLF
from topo.outputfns.basic import PiecewiseLinear


###########################################
# Set parameters

# input patterns

GeneratorSheet.bounds = BoundingBox(points=((-0.75,-0.5),(0.75,0.5)))
GeneratorSheet.period = 1.0
GeneratorSheet.density = 20

LineGenerator.x = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))
LineGenerator.y = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))

LineGenerator.orientation = DynamicNumber(lambda :random.uniform(-pi,pi),softbounds=(0,2*pi))
LineGenerator.thickness = 0.02
LineGenerator.bounds = BoundingBox(points=((-1.05,-0.8),(1.05,0.8)))

# cortical sheet
CFSOM.density = 10
CFSOM.learning_length = 10000
CFSOM.radius_0 = 0.1
# sheet activation saturates at 1
CFSOM.output_fn = PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)

CFProjection.weights_generator = UniformRandomGenerator()
CFProjection.weights_bounds=BoundingBox(points=((-0.1,-0.1),(0.1,0.1)))
CFProjection.learning_fn = HebbianSOMLF()
CFProjection.response_fn = CFDotProduct()

#topo.base.topoobject.min_print_level = topo.base.topoobject.MESSAGE


###########################################
# build simulation

s = Simulator()

# Sheets
LeftRetina = GeneratorSheet(input_generator=LineGenerator(),name='LeftRetina')
RightRetina = GeneratorSheet(input_generator=LineGenerator(),name='RightRetina')
V1 = CFSOM(name='V1')
V2 = CFSOM(name='V2')
V3 = CFSOM(name='V3')

# Projections to V1
s.connect(LeftRetina,V1,delay=0.5,connection_type=CFProjection,connection_params={'name':'AfferentLeft'})
s.connect(RightRetina,V1,delay=0.5,connection_type=CFProjection,connection_params={'name':'AfferentRight'})
#s.connect(V2,V1,delay=0.5,connection_type=CFProjection,connection_params={'name':'FeedbackFromV2'})


# Projections to V2
s.connect(LeftRetina,V2,delay=0.5,connection_type=CFProjection,connection_params={'name':'AfferentLeft'})
s.connect(RightRetina,V2,delay=0.5,connection_type=CFProjection,connection_params={'name':'AfferentRight'})
s.connect(V1,V2,delay=0.5,connection_type=CFProjection,connection_params={'name':'AfferentV1'})
s.connect(V3,V2,delay=0.5,connection_type=CFProjection,connection_params={'name':'FeedbackFromV3'})

# Projections to V3
s.connect(V2,V3,delay=0.5,connection_type=CFProjection,connection_params={'name':'Afferent'})

s.run(1)
