"""
Simple example of defining a hierarchy of visual areas.

Similar to cfsom_or.py, but with additional eyes, visual areas,
feedback, etc.  Does not necessarily do anything useful, but may
be modified to do so in the future.

$Id$
"""
__version__='$Revision$'

import numpy

from topo import param

from topo.base.cf import CFProjection, CFSheet
from topo.base.patterngenerator import BoundingBox
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.responsefns.optimized import CFPRF_DotProduct_opt
from topo.sheets.generatorsheet import GeneratorSheet
from topo.misc.numbergenerators import UniformRandom
#from topo.projections.basic import OneToOneProjection
from topo import outputfn
from topo import patterns 
import topo.patterns.random



###########################################
# Set parameters

# input patterns

GeneratorSheet.period = 1.0
GeneratorSheet.phase = 0.25
GeneratorSheet.nominal_density = 20

left_input_pattern = patterns.Line(
    thickness=0.02,
    bounds=BoundingBox(points=((-1.05,-0.8),(1.05,0.8))),
    x=UniformRandom(lbound=-0.5,ubound=0.5,seed=12),
    y=UniformRandom(lbound=-0.5,ubound=0.5,seed=34),
    orientation=UniformRandom(lbound=-pi,ubound=pi,seed=56))

right_input_pattern = patterns.Line(
    thickness=0.02,
    bounds=BoundingBox(points=((-0.8,-1.05),(0.8,1.05))),
    x=UniformRandom(lbound=-0.5,ubound=0.5,seed=100),
    y=UniformRandom(lbound=-0.5,ubound=0.5,seed=200),
    orientation=UniformRandom(lbound=-pi,ubound=pi,seed=300))


# cortical sheet
CFSheet.nominal_density = locals().get('default_density',10.0)

# sheet activation saturates at 1
CFSheet.output_fn = outputfn.PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)

CFProjection.weights_generator = patterns.random.UniformRandom()
CFProjection.nominal_bounds_template=BoundingBox(radius=0.1)
CFProjection.learning_fn = CFPLF_Hebbian_opt()
CFProjection.response_fn = CFPRF_DotProduct_opt()


#topo.base.parameterizedobject.min_print_level = topo.base.parameterizedobject.MESSAGE


###########################################
# build simulation


# Sheets
topo.sim['LeftRetina'] = GeneratorSheet(input_generator=left_input_pattern,
	nominal_bounds = BoundingBox(points=((-0.75,-0.5),(0.75,0.5))))
topo.sim['RightRetina'] = GeneratorSheet(input_generator=right_input_pattern,
	nominal_bounds = BoundingBox(points=((-0.5,-0.75),(0.5,0.75))))

topo.sim['V1'] = CFSheet()
topo.sim['V2'] = CFSheet(nominal_bounds = BoundingBox(points=((-0.4,-0.4),(0.4,0.6))))
topo.sim['V3'] = CFSheet(nominal_density=5)
#topo.sim['RegionX'] = CFSheet(nominal_density=4)

# Projections to V1
topo.sim.connect('LeftRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentLeft')
topo.sim.connect('RightRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentRight')
#topo.sim.connect('V2','V1',delay=0.5,connection_type=CFProjection,name='FeedbackFromV2')


# Projections to V2
topo.sim.connect('LeftRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentLeft')
topo.sim.connect('RightRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentRight')
topo.sim.connect('V1','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentV1')
topo.sim.connect('V3','V2',delay=0.5,connection_type=CFProjection,
                  name='FeedbackFromV3')

# Projections to V3
topo.sim.connect('V2','V3',delay=0.5,connection_type=CFProjection,
                  name='Afferent')

# Projections to RegionX
#topo.sim.connect('V1','RegionX',delay=0.5,connection_type=OneToOneProjection)



# example scheduled action
topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

topo.sim.schedule_command(10,"""topo.sim['V1'].projections()['AfferentLeft'].change_bounds(BoundingBox(radius=0.05))""")


# Set default locations for the Model Editor
#topo.sim['RegionX'    ].layout_location=(135,130)
topo.sim['V3'         ].layout_location=(500, 90)
topo.sim['V2'         ].layout_location=(500,230)
topo.sim['V1'         ].layout_location=(135,320)
topo.sim['LeftRetina' ].layout_location=(151,520)
topo.sim['RightRetina'].layout_location=(369,520)


# set default input generator (e.g. for the GUI)
GeneratorSheet.params()['input_generator'].default=patterns.Line()
