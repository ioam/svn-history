"""
Simple example of defining a hierarchy of visual areas.

Similar to cfsom_or.py, but with additional eyes, visual areas,
feedback, etc.  Does not necessarily do anything useful, but may
be modified to do so in the future.

$Id$
"""
__version__='$Revision$'

import random
import RandomArray

from topo.sheets.generatorsheet import GeneratorSheet
from topo.base.patterngenerator import BoundingBox
#from topo.projections.kernelprojection import KernelProjection
from topo.base.connectionfield import CFProjection
from topo.base.parameter import DynamicNumber
from topo.sheets.cfsom import CFSOM
import topo.patterns.random
from topo.responsefns.optimized import CFDotProduct
import topo.patterns.basic
from topo.base.simulator import Simulator
from topo.learningfns.basic import HebbianSOMLF
from topo.outputfns.basic import PiecewiseLinear
from topo.patterns import PatternGeneratorParameter

from topo.base.parameter import Number

###########################################
# Set parameters

# input patterns

GeneratorSheet.bounds = BoundingBox(points=((-0.75,-0.5),(0.75,0.5)))
GeneratorSheet.period = 1.0
GeneratorSheet.density = 20


random.seed(1234)
topo.patterns.basic.Line.x = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))
topo.patterns.basic.Line.y = DynamicNumber(lambda : random.uniform(-0.5,0.5),softbounds=(-1.0,1.0))

topo.patterns.basic.Line.orientation = DynamicNumber(lambda :random.uniform(-pi,pi),softbounds=(0,2*pi))
topo.patterns.basic.Line.thickness = 0.02
topo.patterns.basic.Line.bounds = BoundingBox(points=((-1.05,-0.8),(1.05,0.8)))

# CEBHACKALERT: something isn't working about using e.g.
# PatternGeneratorParameter(default=X) in various places in the code
# so I've temporarily commented out this line.
# PatternGeneratorParameter.default=topo.patterns.basic.Line()


# cortical sheet
CFSOM.density = 10
CFSOM.learning_length = 10000
CFSOM.radius_0 = 0.1

# sheet activation saturates at 1
CFSOM.output_fn = PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)

RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.weights_bounds=BoundingBox(points=((-0.1,-0.1),(0.1,0.1)))
# CFProjection.weights_shape = topo.patterns.basic.Disk(smoothing=0)
CFProjection.learning_fn = HebbianSOMLF()
CFProjection.response_fn = CFDotProduct()


#topo.base.topoobject.min_print_level = topo.base.topoobject.MESSAGE


###########################################
# build simulation

s = Simulator()

# Sheets
LeftRetina = GeneratorSheet(input_generator=topo.patterns.basic.Line(),name='LeftRetina')
RightRetina = GeneratorSheet(input_generator=topo.patterns.basic.Line(),name='RightRetina')

V1 = CFSOM(name='V1',alpha_0 = 0.5)
V2 = CFSOM(name='V2',alpha_0 = 0.5)
V3 = CFSOM(name='V3',alpha_0 = 0.5)

# Projections to V1
s.connect(LeftRetina,V1,delay=0.5,connection_type=CFProjection,name='AfferentLeft')
s.connect(RightRetina,V1,delay=0.5,connection_type=CFProjection,name='AfferentRight')
#s.connect(V2,V1,delay=0.5,connection_type=CFProjection,name='FeedbackFromV2')


# Projections to V2
s.connect(LeftRetina,V2,delay=0.5,connection_type=CFProjection,name='AfferentLeft')
s.connect(RightRetina,V2,delay=0.5,connection_type=CFProjection,name='AfferentRight')
s.connect(V1,V2,delay=0.5,connection_type=CFProjection,name='AfferentV1')
s.connect(V3,V2,delay=0.5,connection_type=CFProjection,name='FeedbackFromV3')

# Projections to V3
s.connect(V2,V3,delay=0.5,connection_type=CFProjection,name='Afferent')

# Set default locations for the Model Editor
V1.guiX=135          ; V1.guiY=320
V2.guiX=500          ; V2.guiY=230
V3.guiX=500          ; V3.guiY=90
LeftRetina.guiX=151  ; LeftRetina.guiY=520
RightRetina.guiX=369 ; RightRetina.guiY=520

s.run(0)
