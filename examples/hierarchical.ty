"""
Simple example of defining a hierarchy of visual areas.

Similar to cfsom_or.py, but with additional eyes, visual areas,
feedback, etc.  Does not necessarily do anything useful, but may
be modified to do so in the future.

$Id$
"""
__version__='$Revision$'

import RandomArray

import topo.patterns.random
import topo.patterns.basic

from topo.base.cf import CFProjection
from topo.base.parameterclasses import DynamicNumber, Number, Wrapper
from topo.base.patterngenerator import BoundingBox
from topo.learningfns.som import CFPLF_HebbianSOM
from topo.outputfns.basic import PiecewiseLinear
from topo.responsefns.optimized import CFPRF_DotProduct_opt
from topo.sheets.cfsom import CFSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.misc.numbergenerators import UniformRandom


topo.sim.name = "hierarchical"


###########################################
# Set parameters

# input patterns

GeneratorSheet.nominal_bounds = BoundingBox(points=((-0.75,-0.5),(0.75,0.5)))
GeneratorSheet.period = 1.0
GeneratorSheet.phase = 0.25
GeneratorSheet.nominal_density = 20


# CEBHACKALERT: something isn't working about using e.g.
# PatternGeneratorParameter(default=X) in various places in the code
# so I've temporarily commented out this line.
# PatternGeneratorParameter.default=topo.patterns.basic.Line()




left_input_pattern = topo.patterns.basic.Line(
    thickness=0.02,
    bounds=BoundingBox(points=((-1.05,-0.8),(1.05,0.8))),
    x=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=12)),
    y=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=34)),
    orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=56)))

right_input_pattern = topo.patterns.basic.Line(
    thickness=0.02,
    bounds=BoundingBox(points=((-1.05,-0.8),(1.05,0.8))),
    x=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=100)),
    y=DynamicNumber(UniformRandom(lbound=-0.5,ubound=0.5,seed=200)),
    orientation=DynamicNumber(UniformRandom(lbound=-pi,ubound=pi,seed=300)))


# cortical sheet
CFSOM.nominal_density = locals().get('default_density',10.0)
CFSOM.learning_length = 10000
CFSOM.radius_0 = 0.1

# sheet activation saturates at 1
CFSOM.output_fn = PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)

RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.nominal_bounds_template=BoundingBox(radius=0.1)
# CFProjection.weights_shape = topo.patterns.basic.Disk(smoothing=0)
CFProjection.learning_fn = CFPLF_HebbianSOM()
CFProjection.response_fn = CFPRF_DotProduct_opt()


#topo.base.parameterizedobject.min_print_level = topo.base.parameterizedobject.MESSAGE


###########################################
# build simulation

# Sheets
topo.sim['LeftRetina'] = GeneratorSheet(input_generator=left_input_pattern)
topo.sim['RightRetina'] = GeneratorSheet(input_generator=right_input_pattern)

topo.sim['V1'] = CFSOM(alpha_0 = 0.5)
topo.sim['V2'] = CFSOM(alpha_0 = 0.5)
topo.sim['V3'] = CFSOM(alpha_0 = 0.5)

# Projections to V1
topo.sim.connect('LeftRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentLeft')
topo.sim.connect('RightRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentRight')
#topo.sim.connect('V2','V1',delay=0.5,connection_type=CFProjection,name='FeedbackFromV2')


# Projections to V2
topo.sim.connect('LeftRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentLeft')
topo.sim.connect('RightRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentRight')
topo.sim.connect('V1','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentV1')
topo.sim.connect('V3','V2',delay=0.5,connection_type=CFProjection,
                  name='FeedbackFromV3')

# Projections to V3
topo.sim.connect('V2','V3',delay=0.5,connection_type=CFProjection,
                  name='Afferent')


# example scheduled action
topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

topo.sim.schedule_command(10,"""topo.sim['V1'].projections()['AfferentLeft'].change_bounds(BoundingBox(radius=0.05))""")


# Set default locations for the Model Editor
topo.sim['V1'].gui_x=135          ; topo.sim['V1'].gui_y=320
topo.sim['V2'].gui_x=500          ; topo.sim['V2'].gui_y=230
topo.sim['V3'].gui_x=500          ; topo.sim['V3'].gui_y=90
topo.sim['LeftRetina'].gui_x=151  ; topo.sim['LeftRetina'].gui_y=520
topo.sim['RightRetina'].gui_x=369 ; topo.sim['RightRetina'].gui_y=520

topo.sim.run(0)
