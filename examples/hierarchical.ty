"""
Simple example of defining a hierarchy of visual areas.

Similar to cfsom_or.py, but with additional eyes, visual areas,
feedback, etc.  Does not necessarily do anything useful, but may
be modified to do so in the future.

$Id$
"""
__version__='$Revision$'

import random
import RandomArray

import topo.patterns.random
import topo.patterns.basicf

from topo.base.connectionfield import CFProjection
from topo.base.parameterclasses import DynamicNumber, Number, Wrapper
from topo.base.patterngenerator import BoundingBox
from topo.base.simulator import Simulator
from topo.learningfns.basic import HebbianSOMLF
from topo.outputfns.basic import PiecewiseLinear
from topo.patterns import PatternGeneratorParameter
from topo.responsefns.optimized import CFDotProduct_opt1
from topo.sheets.cfsom import CFSOM
from topo.sheets.generatorsheet import GeneratorSheet


topo.sim.name = "Hierarchical example"


###########################################
# Set parameters

# input patterns

GeneratorSheet.bounds = BoundingBox(points=((-0.75,-0.5),(0.75,0.5)))
GeneratorSheet.period = 1.0
GeneratorSheet.density = 20


random.seed(1234)


# CEBHACKALERT: something isn't working about using e.g.
# PatternGeneratorParameter(default=X) in various places in the code
# so I've temporarily commented out this line.
# PatternGeneratorParameter.default=topo.patterns.basic.Line()

left_input_pattern = topo.patterns.basic.Line(thickness=0.02,
                       bounds=BoundingBox(points=((-1.05,-0.8),(1.05,0.8))),
                       x=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                       y=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                       orientation=DynamicNumber(Wrapper("random.uniform",-pi,pi)))

right_input_pattern = topo.patterns.basic.Line(thickness=0.02,
                       bounds=BoundingBox(points=((-1.05,-0.8),(1.05,0.8))),
                       x=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                       y=DynamicNumber(Wrapper("random.uniform",-0.5,0.5)),
                       orientation=DynamicNumber(Wrapper("random.uniform",-pi,pi)))


# cortical sheet
CFSOM.density = 10
CFSOM.learning_length = 10000
CFSOM.radius_0 = 0.1

# sheet activation saturates at 1
CFSOM.output_fn = PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)

RandomArray.seed(500,500)
CFProjection.weights_generator = topo.patterns.random.UniformRandom()
CFProjection.weights_bounds=BoundingBox(radius=0.1)
# CFProjection.weights_shape = topo.patterns.basic.Disk(smoothing=0)
CFProjection.learning_fn = HebbianSOMLF()
CFProjection.response_fn = CFDotProduct_opt1()


#topo.base.parameterizedobject.min_print_level = topo.base.parameterizedobject.MESSAGE


###########################################
# build simulation

# Sheets
topo.sim['LeftRetina'] = GeneratorSheet(input_generator=left_input_pattern)
topo.sim['RightRetina'] = GeneratorSheet(input_generator=right_input_pattern)

topo.sim['V1'] = CFSOM(alpha_0 = 0.5)
topo.sim['V2'] = CFSOM(alpha_0 = 0.5)
topo.sim['V3'] = CFSOM(alpha_0 = 0.5)

# Projections to V1
topo.sim.connect2('LeftRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentLeft')
topo.sim.connect2('RightRetina','V1',delay=0.5,connection_type=CFProjection,name='AfferentRight')
#topo.sim.connect2('V2','V1',delay=0.5,connection_type=CFProjection,name='FeedbackFromV2')


# Projections to V2
topo.sim.connect2('LeftRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentLeft')
topo.sim.connect2('RightRetina','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentRight')
topo.sim.connect2('V1','V2',delay=0.5,connection_type=CFProjection,
                  name='AfferentV1')
topo.sim.connect2('V3','V2',delay=0.5,connection_type=CFProjection,
                  name='FeedbackFromV3')

# Projections to V3
topo.sim.connect2('V2','V3',delay=0.5,connection_type=CFProjection,
                  name='Afferent')

# Set default locations for the Model Editor
topo.sim['V1'].gui_x=135          ; topo.sim['V1'].gui_y=320
topo.sim['V2'].gui_x=500          ; topo.sim['V2'].gui_y=230
topo.sim['V3'].gui_x=500          ; topo.sim['V3'].gui_y=90
topo.sim['LeftRetina'].gui_x=151  ; topo.sim['LeftRetina'].gui_y=520
topo.sim['RightRetina'].gui_x=369 ; topo.sim['RightRetina'].gui_y=520

topo.sim.run(0)
