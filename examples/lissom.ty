from topo import *
from topo.kernelfactory import *
from topo.inputsheet import *
from topo.image import ImageSaver
from math import pi
from topo.params import *
import random
import topo.gui
import topo.rfsheet
import pdb #debugger

from topo.utils import msum
"""
TODO:

x boundingregion.translate()
- composing kernel factories (operator overloading?)

x LISSOM learning rule (just mdot)
x xfer funcs  (piecewise linear sigmoid)

- port parameterization (in rfsheet? in sheet? in EventProcessor?)
"""

def PLTF(x):
    """
    Piecewise-linear transfer function.
    A matrix function that applies this function to each element:

           /  0 : x < 0 
    f(x) = |  x : 0 <= x <= 1
           \  1 : x > 1
    """
    return ((x * (x>0)) * (x<1)) + (x>1)


class LateralExcitatoryProjection(topo.rfsheet.KernelProjection):
    """
    A projection class to allow easy parameterization of
    Lateral connections.
    """
    pass

class LateralInhibitoryProjection(topo.rfsheet.KernelProjection):
    """
    A projection class to allow easy parameterization of
    Lateral connections.
    """
    pass



class LISSOM(topo.rfsheet.RFSheet):

    transfer_fn = Parameter(default=PLTF)
    learning_rate = Parameter(default=0.1)

    def train(self):

        rows,cols = self.activation.shape
        for port in self.ports.values():
            for proj in port['projections'].values():
                if proj.input_buffer:
                    for r in range(rows):
                        for c in range(cols):
                            rf = proj.rf(r,c)
                            rf.weights += (self.learning_rate * self.activation[r,c]
                                           * rf.get_input_matrix(proj.input_buffer))


        # normalize weights
        for r in range(rows):
            for c in range(cols):
                # normalize  weights attached to each port (e.g. 'afferent', 'lateral')
                for port in self.ports.values():
                    projlist = port['projections'].values()
                    k = sum([msum(p.rf(r,c).weights) for p in projlist])
                    for p in projlist:
                        p.rf(r,c).weights /= abs(k)




###########################################
# Set parameters

print "Setting parameters..."


# input generation params
InputSheet.period = 1.0
InputSheet.density = 900
InputSheet.period = 10

FuzzyLineFactory.x = Dynamic(lambda : random.uniform(-0.5,0.5))
FuzzyLineFactory.y = Dynamic(lambda : random.uniform(-0.5,0.5))

FuzzyLineFactory.theta = Dynamic(lambda :random.uniform(-pi,pi))
FuzzyLineFactory.width = 0.02
FuzzyLineFactory.bounds = BoundingBox(points=((-0.8,-0.8),(0.8,0.8)))


# lissom parameters
LISSOM.density = 900


# image saver parameters
ImageSaver.file_format='png'
ImageSaver.time_format='%0.4d'

# lateral connection parameters
LateralInhibitoryProjection.weights_bounds  = BoundingBox(points=((-0.2,-0.2),(0.2,0.2)))
LateralInhibitoryProjection.weights_factory = UniformRandomFactory(min=-1,max=0)

###########################################
# build simulation


print "Creating simulation objects..."
s = topo.simulator.Simulator()


retina = InputSheet(input_generator=FuzzyLineFactory(),name='Retina')
V1 = LISSOM(name='V1')
save  = ImageSaver(name='RFSOM')

s.connect(retina,V1,dest_port='afferent',delay=10)
s.connect(V1,V1, dest_port='lateral_excitatory', delay=1,
                 projection_type = LateralExcitatoryProjection)
s.connect(V1,V1, dest_port = 'lateral_inhibitory', delay = 1,
                 projection_type = LateralInhibitoryProjection)
        

#rfsheet.RF.print_level = base.VERBOSE


# Uncomment the connections to the image saver, to save all the activation
# images to disk.
#s.connect(retina,save,dest_port='retina',delay=2)
#s.connect(V1,save,dest_port='V1',delay=1)

#s.run(20)

#V1.projections['Retina'][0].plot_rfs()

# import profile,pstats
#
# p = profile.Profile()
# p.runctx('s.run(10)',locals(),globals())

                
