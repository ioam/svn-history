"""
LISSOM-based V1 map for orientation and disparity preferences,
driven by stereo image pairs.

From Tikesh Ramtohul, "A self-organizing model of disparity maps in
the primary visual cortex", MSc Thesis, School of Informatics,
University of Edinburgh, 2006
(http://www.inf.ed.ac.uk/publications/thesis/online/IM060400.pdf).

$Id$
"""
__version__='$Revision$'

### JABHACKALERT: This implementation uses a custom version of code to
### present a sequence of natural image patches, which is no longer
### necessary or useful now that Composite patterns are fully
### supported.  Thus this script should be modified to use a Composite
### pattern before being extended or modified; the result should be
### much simpler and more flexible.
###
### Apparently there is also some problem using this script together
### with the Test Pattern window, but the specific problem has not
### been documented.


import numpy
import copy

from math import pi, sqrt


from topo.sheets.lissom import LISSOM
from topo.sheets.generatorsheet import GeneratorSheet
from topo.projections.basic import CFProjection, SharedWeightCFProjection
from topo.responsefns.optimized import CFPRF_DotProduct_opt
from topo.base.parameterclasses import Number
from topo.base.cf import CFSheet
from topo.base.boundingregion import BoundingBox
from topo.learningfns.optimized import CFPLF_Hebbian_opt
from topo.outputfns.optimized import CFPOF_DivisiveNormalizeL1_opt
from topo.outputfns.basic import PiecewiseLinear, DivisiveNormalizeL1
from topo.misc.numbergenerators import UniformRandom

from os import listdir
from numpy.oldnumeric import array, Float
import Image as pImage
import ImageOps

from topo.patterns.image import edge_average
from topo.base.patterngenerator import PatternGenerator
from topo.base.parameterclasses import Number, Parameter, Enumeration,\
     ClassSelectorParameter
from topo.outputfns.basic import DivisiveNormalizeLinf,IdentityOF
from topo.patterns.image import PatternSampler
from topo.misc.numbergenerators import UniformRandom
from topo.misc.filepaths import Filename
from pylab import fix,ceil
from numpy.oldnumeric.random_array import randint,seed,uniform


class ImageSeq(PatternGenerator):
    """
    Given a path where set of images are stored, 
    it  present each image as input pattern in random order

    """

    output_fn = ClassSelectorParameter(OutputFn,default=IdentityOF())
    
    aspect_ratio  = Number(default=1.0,bounds=(0.0,None),
        softbounds=(0.0,2.0),precedence=0.31,doc=
        "Ratio of width to height; size*aspect_ratio gives the width.")

    size  = Number(default=1.0,bounds=(0.0,None),softbounds=(0.0,2.0),
                   precedence=0.30,doc="Height of the image.")
       
    size_normalization = Enumeration(default='fit_shortest',
        available=['fit_shortest','fit_longest','stretch_to_fit','original'],
        precedence=0.95,doc=
        "How to scale the initial image size relative to the default area of 1.0.")

    whole_image_output_fn = ClassSelectorParameter(OutputFn,default=DivisiveNormalizeLinf(),
        precedence=0.96,doc=
        "Function applied to the whole, original image array (before any cropping).")

    # Path to directory where sequence of training images are stored
    imagepath = 'examples/stereo/left/'

    random_num1 = Number(default=50.0,bounds=(0.0,100.0),softbounds=(0.0,100.0),
                precedence=0.97,doc="ensures same part of image in both eyes")

    random_num2 = Number(default=50.0,bounds=(0.0,100.0),softbounds=(0.0,100.0),
                precedence=0.97,doc="ensures same part of image in both eyes")

    random_num3 = Number(default=50.0,bounds=(0.0,100.0),softbounds=(0.0,100.0),
                precedence=0.97,doc="ensures same part of image in both eyes")
    
    def __init__(self, **params):
        """
        """
        super(ImageSeq,self).__init__(**params)
	self.firstcall = True


    def __setup_pattern_sampler(self, imagepath, whole_image_output_fn):
        """
        """
        
	if self.firstcall:
            count=0
	    self.firstcall = False
	    image_filenames = listdir (self.imagepath)
	    self.patterns = []
	    for fname in image_filenames:
	    	
                if (fname != 'Thumbs.db'): ##generated in Windows
                    print self.imagepath + fname, ' - ', count
                    image = ImageOps.grayscale(pImage.open(self.imagepath + fname))
                    image_array = array(image.getdata(),Float)
                    image_array.shape = (image.size[::-1]) 
                    
                    self.patterns.append (PatternSampler(image_array,whole_image_output_fn,edge_average))
                    count=count+1
	    self.number_of_patterns = len(self.patterns)


    def function(self,params):
       
        xdensity = params.get('xdensity', self.xdensity)
        ydensity = params.get('ydensity', self.ydensity)
        x        = params.get('pattern_x',self.pattern_x)
        y        = params.get('pattern_y',self.pattern_y)
        size_normalization = params.get('scaling',self.size_normalization)
        whole_image_output_fn = params.get('whole_image_output_fn',self.whole_image_output_fn)

        height = params.get('size',self.size)
        width = (params.get('aspect_ratio',self.aspect_ratio))*height
	
	imagepath = params.get('imagepath', self.imagepath)


        random_num1=params.get('random_num1', self.random_num1)
        random_num2=params.get('random_num2', self.random_num2)
        random_num3=params.get('random_num3', self.random_num3)

        
        self.__setup_pattern_sampler(self.imagepath,whole_image_output_fn)

        seed(137*int(random_num1),541*int(random_num1))
        index = randint(0,len(self.patterns))

        ### Requires new get_image_size() method added to PatternSampler
        y_value,x_value=self.patterns[index].get_image_size() 
        x_bound=fix(x_value/54.0)-2.0
        y_bound=fix(y_value/54.0)-2.0

        seed(1335*int(random_num2),56781*int(random_num2))
	self.x = uniform (-x_bound,x_bound)

	seed(3642*int(random_num3),73257*int(random_num3))
	self.y = uniform (-y_bound,y_bound)

	print index, ' - ', x_bound, ' - ', y_bound, ' - ', self.x, ' - ', self.y
	return self.patterns[index](x,y,float(xdensity),float(ydensity),size_normalization,float(width),float(height))





rand1=UniformRandom(lbound=0,ubound=100,seed=200)
rand1_copy=copy.deepcopy(rand1)

rand2=UniformRandom(lbound=0,ubound=100,seed=110)
rand2_copy=copy.deepcopy(rand2)

rand3=UniformRandom(lbound=0,ubound=100,seed=260)
rand3_copy=copy.deepcopy(rand3)



left_input_pattern = ImageSeq(imagepath='examples/stereo/left/',size_normalization='original',
                                                      random_num1=rand1,
                                                      random_num2=rand2,
                                                      random_num3=rand3,scale=2.0)
                                                      

right_input_pattern = ImageSeq(imagepath='examples/stereo/right/',size_normalization='original',
                                                      random_num1=rand1_copy,
                                                      random_num2=rand2_copy,
                                                      random_num3=rand3_copy,scale=2.0)
                                                      
         


                          
# Specify weight initialization, response function, and learning function
numpy.random.seed((500,500))
CFProjection.weights_generator=topo.patterns.basic.Constant()
CFProjection.cf_shape=topo.patterns.basic.Disk(smoothing=0.0)
CFProjection.response_fn=CFPRF_DotProduct_opt()
CFProjection.learning_fn=CFPLF_Hebbian_opt()
CFProjection.weights_output_fn=CFPOF_DivisiveNormalizeL1_opt()
SharedWeightCFProjection.response_fn=CFPRF_DotProduct_opt()

SharedWeightCFProjection.weights_output_fn.single_cf_fn=DivisiveNormalizeL1()


##Learning rate parameters
st=0.5
stsd = 2

###########################################
# build simulation



topo.sim['LeftRetina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=left_input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['RightRetina']=GeneratorSheet(nominal_density=24.0,
                                  input_generator=right_input_pattern,
                                  period=1.0, phase=0.05,
                                  nominal_bounds=BoundingBox(radius=0.5+0.25+0.375))

topo.sim['LGNOnLeft']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOffLeft']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['LGNOnRight']=CFSheet(nominal_density=24.0,
                          nominal_bounds=BoundingBox(radius=0.5+0.25),
                          output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                          measure_maps=False)

topo.sim['LGNOffRight']=CFSheet(nominal_density=24.0,
                           nominal_bounds=BoundingBox(radius=0.5+0.25),
                           output_fn=PiecewiseLinear(lower_bound=0.0,upper_bound=1.0),
                           measure_maps=False)

topo.sim['V1'] = LISSOM(nominal_density=locals().get('default_density',48.0),
                        nominal_bounds=BoundingBox(radius=0.5))



topo.sim['V1'].output_fn.lower_bound=0.076
topo.sim['V1'].output_fn.upper_bound=0.626

lgn_strength=4.7

# LGN ON channel
topo.sim.connect('LeftRetina','LGNOnLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=lgn_strength,
                  nominal_bounds_template=BoundingBox(radius=0.375),name='LCenterOn',
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('LeftRetina','LGNOnLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-lgn_strength,
                  name='LSurroundOn',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOnRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=lgn_strength,
                  nominal_bounds_template=BoundingBox(radius=0.375),name='RCenterOn',
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOnRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-lgn_strength,
                  name='RSurroundOn',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))


# LGN OFF channel
topo.sim.connect('LeftRetina','LGNOffLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-lgn_strength,
                  name='LCenterOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('LeftRetina','LGNOffLeft',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=lgn_strength,
                  name='LSurroundOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOffRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=-lgn_strength,
                  name='RCenterOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.0417,
                                                                 aspect_ratio=1))

topo.sim.connect('RightRetina','LGNOffRight',delay=0.05,
                  connection_type=SharedWeightCFProjection,strength=lgn_strength,
                  name='RSurroundOff',nominal_bounds_template=BoundingBox(radius=0.375),
                  weights_generator=topo.patterns.basic.Gaussian(size=0.1667,
                                                                 aspect_ratio=1))

# Connections from LGNs to V1

topo.sim.connect('LGNOnLeft','V1',delay=0.05,#dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.25,name='LGNOnLeftAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590/stsd)

topo.sim.connect('LGNOffLeft','V1',delay=0.05,#dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.25,name='LGNOffLeftAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590/stsd)

topo.sim.connect('LGNOnRight','V1',delay=0.05,#dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.25,name='LGNOnRightAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590/stsd)

topo.sim.connect('LGNOffRight','V1',delay=0.05,#dest_port=('Activity','JointNormalize', 'Afferent'),
                  connection_type=CFProjection,strength=0.25,name='LGNOffRightAfferent',
                  nominal_bounds_template=BoundingBox(radius=0.25),learning_rate=0.9590/stsd)


# Lateral Connections

topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
                  connection_type=CFProjection,strength=0.9,
                  nominal_bounds_template=BoundingBox(radius=0.10),learning_rate=3.2018/stsd) 
            
topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory',
                  connection_type=CFProjection,strength=-1.25,
                  nominal_bounds_template=BoundingBox(radius=0.23),learning_rate=0.1963)  

### Actions scheduled to occur as the simulation proceeds.

topo.sim.startup_commands.append("from topo.base.boundingregion import BoundingBox")

topo.sim.schedule_command(1000*st,'topo.sim["V1"].projections()["LateralInhibitory"].strength=-1.7; topo.sim["V1"].projections()["LateralInhibitory"].learning_rate=0.3925;')
topo.sim.schedule_command(2000*st,'topo.sim["V1"].projections()["LateralInhibitory"].strength=-2.1; topo.sim["V1"].projections()["LateralInhibitory"].learning_rate=0.5888;')
topo.sim.schedule_command(5000*st,'topo.sim["V1"].projections()["LateralInhibitory"].learning_rate=0.9813;')

### Lateral excitatory bounds changes
topo.sim.schedule_command(200,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.06))')
topo.sim.schedule_command(500,'topo.sim["V1"].projections()["LateralExcitatory"].change_bounds(BoundingBox(radius=0.042))')

### Lateral excitatory learning rate changes
topo.sim.schedule_command(200*st,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=1.2213/stsd')
topo.sim.schedule_command(500*st,'topo.sim["V1"].projections()["LateralExcitatory"].learning_rate=0.3466/stsd')



### Afferent learning rate changes
topo.sim.schedule_command(  500*st,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.6850/stsd;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.6850/stsd')
topo.sim.schedule_command( 2000*st,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.5480/stsd;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.5480/stsd')
topo.sim.schedule_command( 4000*st,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.4110/stsd;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.4110/stsd')
topo.sim.schedule_command(20000*st,'topo.sim["V1"].projections()["LGNOnLeftAfferent"].learning_rate=0.2055/stsd;topo.sim["V1"].projections()["LGNOffLeftAfferent"].learning_rate=0.2055/stsd')

topo.sim.schedule_command(  500*st,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.6850/stsd;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.6850/stsd')
topo.sim.schedule_command( 2000*st,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.5480/stsd;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.5480/stsd')
topo.sim.schedule_command( 4000*st,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.4110/stsd;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.4110/stsd')
topo.sim.schedule_command(20000*st,'topo.sim["V1"].projections()["LGNOnRightAfferent"].learning_rate=0.2055/stsd;topo.sim["V1"].projections()["LGNOffRightAfferent"].learning_rate=0.2055/stsd')



### LISSOM output function bounds changes
topo.sim.schedule_command(  200*st,'topo.sim["V1"].output_fn.lower_bound=0.086;topo.sim["V1"].output_fn.upper_bound=0.636')
topo.sim.schedule_command(  500*st,'topo.sim["V1"].output_fn.lower_bound=0.096;topo.sim["V1"].output_fn.upper_bound=0.646')
topo.sim.schedule_command( 1000*st,'topo.sim["V1"].output_fn.lower_bound=0.126;topo.sim["V1"].output_fn.upper_bound=0.676')
topo.sim.schedule_command( 2000*st,'topo.sim["V1"].output_fn.lower_bound=0.156;topo.sim["V1"].output_fn.upper_bound=0.706')
topo.sim.schedule_command( 3000*st,'topo.sim["V1"].output_fn.lower_bound=0.166;topo.sim["V1"].output_fn.upper_bound=0.716')
topo.sim.schedule_command( 4000*st,'topo.sim["V1"].output_fn.lower_bound=0.176;topo.sim["V1"].output_fn.upper_bound=0.726')
topo.sim.schedule_command( 5000*st,'topo.sim["V1"].output_fn.lower_bound=0.186;topo.sim["V1"].output_fn.upper_bound=0.736')
topo.sim.schedule_command( 6500*st,'topo.sim["V1"].output_fn.lower_bound=0.196;topo.sim["V1"].output_fn.upper_bound=0.746')
topo.sim.schedule_command( 8000*st,'topo.sim["V1"].output_fn.lower_bound=0.206;topo.sim["V1"].output_fn.upper_bound=0.756')
topo.sim.schedule_command(20000*st,'topo.sim["V1"].output_fn.lower_bound=0.216;topo.sim["V1"].output_fn.upper_bound=0.766')



# default locations for model editor

topo.sim['V1'         ].layout_location=( 600,225)
topo.sim['LGNOnLeft'  ].layout_location=( 200,445)
topo.sim['LGNOffLeft' ].layout_location=( 482,445)
topo.sim['LeftRetina' ].layout_location=( 279,700)

topo.sim['LGNOnRight' ].layout_location=( 750,445)
topo.sim['LGNOffRight'].layout_location=(1030,445)
topo.sim['RightRetina'].layout_location=( 879,700)



