
			      MILESTONES


Progress on Topographica will be measured in terms of milestones, and
we will soon set dates for these milestones and work to meet those
deadlines:


  Milestone 1: Skeleton.  Set up a very basic GUI version of the
  LISSOM tutorial (http://homepages.inf.ed.ac.uk/jbednar/pytutorial.html).  
  Anything complicated should be omitted, such as orientation-map
  measurements and plotting, the test pattern window, fancy bitmap
  colorizations, and network state saving.  The goal is to have a
  simple simulation that actually does work.  We hope to reach this
  milestone in weeks, not months.

  Once milestone 1 has been reached, we will be able to set up an
  equivalent simulation in LISSOM 5.0 and compare performance,
  functionality, etc.  We can even start trying to do that before the
  GUI is working, and may do so.


  Milestone 2: Tutorial. Fully implement everything meaningful from
  the LISSOM tutorial.  We hope to reach this milestone in a few
  months, but will have to study the current state of the code more to
  see if that is realistic.

  Once milestone 2 has been reached, we will no longer have to use
  LISSOM 5.0 for demos, classes, etc., and can start getting people
  exposed to Topographica instead.

  In addition, once milestone 2 has been reached, we can make an alpha
  release of the software on the web site, to demonstrate that the
  software is now working and usable.  However, it will not yet
  implement many of the important LISSOM 5.0 features that are needed
  for actual research, as opposed to the tutorial, and the code will
  not necessarily be easily extensible for custom networks.  Most
  importantly, we will not be able at this stage to promise that we
  will provide a migration path for user code written to the alpha
  release APIs.  Thus although someone needing to do a project ASAP
  could use the alpha release, for long-term research we can only
  recommend that they wait a bit longer.


  Milestone 3: LISSOM Clone. Fully implement the important features of
  LISSOM 5.0, omitting features only by deliberate decision that they
  are primarily of historical or very specialized interest.

  Once milestone 3 has been reached, we can do a much more
  full-featured beta release, though we still will not be able to
  promise a migration path for code written to this release.  We can
  also start using Topographica for our own current research, which
  will help us polish its rough edges.


  Milestone 4: Stable APIs. Finalize the user APIs, and port all
  categories of simulations from parts II and III the LISSOM book
  (i.e. orientation maps, ocular dominance maps, direction maps,
  combined maps, face maps, and two-level maps) to Topographica.

  Once milestone 4 is released, we can make a full 1.0 public release,
  and we can stop using LISSOM for anything but retrieving historical
  results.


  Milestone 5: Advancing. Implement a large percentage of the features
  promised in the Topographica grant proposal, enough to clearly
  demonstrate that the software is a big advance over LISSOM
  5.0.

  Once milestone 5 has been reached, we can make another public
  release and start heavily marketing the software to all potential
  users, trying to convince them to switch from whatever they are
  currently using to Topographica.  

  This milestone is necessarily vague at present, and will need to be
  fleshed out once we have reached some of the earlier milestones.

_______________________________________________________________________________

		    REACHING MILESTONE 1: SKELETON

To reach milestone 1, we will need to:

- Implement a GUI patterned after the LISSOM 5.0 GUI, with a main
  window, a Activity plot window, and a Weights plot window.  The main
  window needs to provide a way to present one or more training inputs
  and to select the other windows.

- Fix the floating-point rounding bug in the current LISSOM-like
  implementation.

- Fix anything else that prevents the LISSOM example from working
  reasonably.

One way to get started on such a GUI is to start with the LISSOM 5.0
python/ subdirectory, and systematically replace every call to the
LISSOM 5.0 C code with a stub, then remove the C code and the swig
connection to C altogether.  Once that is done, we should have a GUI
that doesn't do much but open a bunch of empty windows.  We can then
merge those files into the Topographica directory, and start
connecting them up to Topographica.  We can worry about cleaning up
the GUI prototype code later, for milestone 2.

RELATED (BUT NOT STRICTLY REQUIRED) ISSUES TO ADDRESS BEFORE THIS MILESTONE:

- Check that events are not allowed to be put onto the event queue at
  the current time, only with some delay into the future.

- Remove obsolete files like convolve2d.py.

_______________________________________________________________________________

		    REACHING MILESTONE 2: TUTORIAL

To reach milestone 2, we will need to:

- Add the remaining features of the LISSOM model, such as:
  - Lateral excitatory radius shrinking
  - Gradually reducing sigmoid parameters
  - Multiple input areas (two eyes).  

- Add preference map measurement and plotting

- Add a test pattern window

- Add bitmap colorizations (using palette.py)

- Add state (weight) saving.

RELATED (BUT NOT STRICTLY REQUIRED) ISSUES TO ADDRESS BEFORE THIS MILESTONE:

- Write a coding standards document: follow Python.org coding
  conventions, require unit tests, require code be examined by at
  least two people, etc.

- Compare unittest code to the Python unittest module for code overlap
  and possible improvements.  

- Define separate test suites, for unit tests and large-scale
  functional tests. 

- Finish unit tests for existing classes.

- Verify/fix .ty file importing; it should work just like .py file
  importing.  May need to send some changes to the Python maintainers.

- Verify that everything works on Windows and Mac.  

- Try upgrading to Python 2.4, and use that if it works.  

_______________________________________________________________________________

		  REACHING MILESTONE 3: LISSOM CLONE

To reach milestone 3, we will need to implement the functionality
listed below, i.e. what is already present in LISSOM 5.0.  Because it
is a very long list, we will probably need to set up smaller
milestones 2.1, 2.2, etc. before 3.0.  The numbered "subsystems" refer
to those listed in lissom/python/MigrationPath of LISSOM 5.0.  The
MigrationPath file lists the LISSOM 5.0 C++ files that serve as
reference implementations of these subsystems.


Subsystem 1. Rendering contents of retinas
- Support composite objects (for multiple training inputs, face
  patterns).

- Add linking objects between eyes (for e.g. ocular dominance).

Subsystem 2. Visualizing array-based data as bitmaps
- Add user-defined arbitrary colormaps ("KRYW", "BbKrR", etc.).

- Add examples of colorizing one plot with another (e.g. OR-colored
  activity plots).

Subsystem 3. LISSOM
- Add parameter change schedules.

- Add sheet edge buffers.

Subsystem 4. ValueGenerators
- Add examples of random, increment, reference, etc. value generators.

Subsystem 5. Parameter handling, dictionaries, documentation
- Add online help support.

- Generate user reference documentation, as opposed to code documentation.

- Add library of standard parameter types (boolean, tristate, int,
  float, string, range, subregion, color).

Subsystem 6. Binary file saving 
- Implement binary file saving, using CDF, HDF, or something like it.

- Consider whether pickling will do anything useful for us.

Subsystem 7. Measuring orientation and similar preference maps
- Implement general-purpose map measurement routine, based on LISSOM's.

Subsystem 8. Random number stream generators
- Add examples of normal and other random number distributions.

Subsystem 9. Multi-processor support
- Consider adding thread support to the Simulator and EventProcessor
  classes, so that each EP could be in a different thread, and on an
  SMP machine each thread could be on a different processor.

- Consider how MPI or OpenMP could be used to support machines without
  shared memory.  The multi-processor features can be omitted from
  this milestone. 

Subsystem 10. Histogram class
- Add histogram class.

- Add histogram plots.

Subsystem 11. Generating convolution kernels
- Add remaining radial functions, if any, from both input generation
  and kernel factory routines.

Subsystem 12. Console messaging
- Configure GUI to pop up a requestor for urgent-enough messages.

Subsystem 13. 1D and 3D line-based plotting
- Consider supporting such plots, using e.g. DISLIN or Pyx, though
  this can possibly be postponed to the next milestone.

Subsystem 14. Bounding box class
- Add intersections and unions, which are needed when RFs extend past
  the edge of a sheet.

Subsystem 15. Bounded number type
- Make most parameters use bounded ranges.

Subsystem 16. Scaling objects
- Consider adding a general mechanism for scaling values from one
  range to another, so that units can be specified as the user desires
  and then converted to what the code expects.  This capability may be
  postponed to the next milestone if it is not required here.


RELATED (BUT NOT STRICTLY REQUIRED) ISSUES TO ADDRESS BEFORE THIS MILESTONE:

- Compare performance to LISSOM 5.0, and profile to determine
  bottlenecks.

- To eliminate bottlenecks, consider Pyrex and PyInline for inline C
  and C++.  May also need to add full C code to implement some python
  classes.

- For overall speedup, consider Psyco, a just-in-time lazy evaluator
  and optimizing compiler (only for x86 machines, though). 

- Add a mechanism to group Sheets into a logical unit for plotting,
  analysis, etc.  For instance, it should be possible to group three
  R,G,B sheets into one eye, two ON and OFF sheets into one LGN area,
  and several V1 layers into one stack.  Such grouping should support
  e.g. presenting a color bitmap to an Eye instead of to R, G, and B
  separately, plotting the resulting activation from the three areas
  in true color, combining ON and OFF plots into one bitmap (by
  subtraction), and measuring a vertically summed orientation map for a
  model using several layers.  This functionality may only be required for
  later milestones, but is listed here in case it is required for ON/OFF
  plots.

- Unify random number generation, so that users can manipulate seeds
  appropriately to play back a particular simulation.

- Consider using the Python logger module as a back end for logging
  messages.

- Might, or might not, want to support LISSOM's backprojection fuctions.

_______________________________________________________________________________

		  REACHING MILESTONE 4: STABLE APIS

Reaching this milestone is primarily an issue of agreement between all
developers that the API has matured to the point that it will be
extensible in the directions we plan for Topographica to go, without
breaking existing user code.  Of course, we won't be able to do this
perfectly, and some changes to user code will be necessary, but after
this point we will have to provide some way to convert old user code
into something that will work with each new release.

_______________________________________________________________________________

		  REACHING MILESTONE 5: ADVANCING

See the Topographica grant proposal.  This milestone will include
things like GUI-based network building, algorithms other than LISSOM
and SOM, libraries of learning rules and neuron types, etc.

