# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [ BuildSlave("x86_ubuntu7.04","PWD",notify_on_missing="buildbot@topographica.org"),
                BuildSlave("ppc_darwin8.10.0","PWD",notify_on_missing="buildbot@topographica.org"),
                BuildSlave("x86_windowsXP","PWD") ]


c['slavePortnum'] = "tcp:9989"
# CB: change to 9989:interface=127.0.0.1
# to have connections from localhost only

####### CHANGESOURCES

TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = SVNPoller(svnurl=TOPOROOT+"/trunk/topographica",
                               pollinterval=300)


####### SCHEDULERS

from buildbot.scheduler import Periodic,Nightly

periodic_tests = Periodic("periodic-tests",["linux_tests","mac_tests"], 8*60*60)
nightly_build = Nightly("nightly-build",["linux_build","mac_build"],hour=03,minute=00)
nightly_tests = Nightly("nightly-tests",["linux_slow-tests","mac_slow-tests"],hour=04,minute=00)
nightly_backup = Nightly("nightly-backup",["backups"],hour=02,minute=00)

c['schedulers'] = [periodic_tests,nightly_build,nightly_tests,nightly_backup]


####### BUILDERS

svnurl =  TOPOROOT+"/trunk/topographica"

builders = []

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand



make_clean = ("make","clean")
make_doc = ("make","doc")
make = ("make")
make_tests = ("make","tests")
make_lint_base = ("make","lint-base")
make_basic_gui_tests = ("make","basic-gui-tests")
make_detailed_gui_tests = ("make","detailed-gui-tests")
make_slow_tests = ("make","slow-tests")
make_snapshot_tests = ("make","snapshot-tests")
make_osx_patch = ("make","osx-patch")
make_osx_patch_clean = ("make","osx-patch-clean")
rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")

descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_doc: ("make doc","documentation"),
    make_lint_base: (["checking","for","lint"],["lint","tests"]),
    make_tests: ("testing",["unit","tests"]),
    make_basic_gui_tests: (["testing","gui","(basic)"],["basic","gui","tests"]),
    make_detailed_gui_tests: (["testing","gui","(detailed)"],["detailed","gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_snapshot_tests: (["testing","snapshots"],["snapshot","tests"]),
    make_osx_patch: (["patching","Python","build","for","Aqua"],["Aqua","patch"]),
    make_osx_patch_clean: (["unpatching","Makefile"],["remove","Makefile","patch"]),
    rsync : (["rsync","svn"],["svn","rsync"])}
    
# need to test on osx
def cvs_checkout(factory_,mode="update"):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True)
        
def add_command(factory_,command_,xvfb=True,halt_on_failure=False):
    happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]

    if xvfb:
        cmd = ["xvfb-run","-a"]
#    else:
#        cmd = ["/Users/ceball/topographica_dev/xvfbrun"]

        if isinstance(command_,str):
            cmd.append(command_)
        else:
            cmd+=list(command_)
    else:
        cmd = command_
        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,
                     descriptionDone=finished_description,haltOnFailure=halt_on_failure
                     )

### backupbot
backup_factory = factory.BuildFactory()
add_command(backup_factory,rsync,xvfb=False)


### Standard (linux) build factory
standard_build = factory.BuildFactory()
cvs_checkout(standard_build,mode="copy")
add_command(standard_build,make_clean)
add_command(standard_build,make)
add_command(standard_build,make_doc)
add_command(standard_build,make_tests)
# CB: could make current docs available on the web somewhere
# from buildbot.steps.transfer import FileUpload
# standard_build.addStep(FileUpload ...


### Standard (linux) tests
standard_tests = factory.BuildFactory()
cvs_checkout(standard_tests)
add_command(standard_tests,make,halt_on_failure=True)
add_command(standard_tests,make_tests)
add_command(standard_tests,make_basic_gui_tests,halt_on_failure=True)
add_command(standard_tests,make_detailed_gui_tests)
add_command(standard_tests,make_lint_base)


### Standard (linux) slow-tests
standard_slow_tests = factory.BuildFactory()
cvs_checkout(standard_slow_tests)
add_command(standard_slow_tests,make,halt_on_failure=True)
add_command(standard_slow_tests,make_slow_tests)
add_command(standard_slow_tests,make_snapshot_tests)



### OSX build factory
osx_build = factory.BuildFactory()
cvs_checkout(osx_build,mode="copy")
add_command(osx_build,make_clean,xvfb=False)
add_command(osx_build,make_osx_patch,xvfb=False)
add_command(osx_build,make,xvfb=False)
add_command(osx_build,make_tests,xvfb=False)
add_command(osx_build,make_doc,xvfb=False)


### OSX tests
osx_tests = factory.BuildFactory()
cvs_checkout(osx_tests)
add_command(osx_tests,make_osx_patch,xvfb=False)
add_command(osx_tests,make,xvfb=False,halt_on_failure=True)
add_command(osx_tests,make_tests,xvfb=False)
add_command(osx_tests,make_basic_gui_tests,xvfb=False,halt_on_failure=True)
add_command(osx_tests,make_detailed_gui_tests,xvfb=False)


### OSX slow-tests
osx_slow_tests = factory.BuildFactory()
cvs_checkout(osx_slow_tests)
add_command(osx_slow_tests,make_osx_patch,xvfb=False)
add_command(osx_slow_tests,make,xvfb=False,halt_on_failure=True)
add_command(osx_slow_tests,make_slow_tests,xvfb=False)
#add_command(osx_slow_tests,make_snapshot_tests,xvfb=False)

### Windows tests
xp_tests = factory.BuildFactory()
cvs_checkout(xp_tests)
add_command(xp_tests,make_tests)


from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
sake_lock = locks.SlaveLock("sake",maxCount=1)

backup_builder = {'name': "backups",
      'slavename': "x86_ubuntu7.04",
      'builddir': "topographica_svnroot",
      'factory': backup_factory,
      'locks':[doozy_lock]
      }

standard_build_builder = {'name': "linux_build",
      'slavename': "x86_ubuntu7.04",
      'builddir': "full_x86_ubuntu7.04",
      'factory': standard_build,
      'locks':[doozy_lock]
      }

standard_tests_builder = {'name': "linux_tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "tests_x86_ubuntu7.04",
      'factory': standard_tests,
      'locks':[doozy_lock]       
      }
 
standard_slowtests_builder = {'name': "linux_slow-tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "slow-tests_x86_ubuntu7.04",
      'factory': standard_slow_tests,
      'locks':[doozy_lock]
      }


osx_build_builder = {'name': "mac_build",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "full_ppc_darwin8.10.0",
      'factory': osx_build,
      'locks':[sake_lock]
      }

osx_tests_builder = {'name': "mac_tests",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "tests_ppc_darwin8.10.0",
      'factory': osx_tests,
      'locks':[sake_lock]
      }


osx_slowtests_builder = {'name': "mac_slow-tests",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "slow-tests_ppc_darwin8.10.0",
      'factory': osx_slow_tests,
      'locks':[sake_lock]
      }


xp_tests_builder = {'name':'win_tests',
                    'slavename':'x86_windowsXP',
                    'builddir':'tests_x86_windowsXP',
                    'factory': xp_tests}



c['builders'] = [standard_tests_builder,standard_build_builder,standard_slowtests_builder,
                 osx_tests_builder,osx_build_builder,osx_slowtests_builder,xp_tests_builder,backup_builder]


####### STATUS TARGETS

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@doozy.inf.ed.ac.uk",
                                     mode='problem',
                                     extraRecipients=["v1cball@inf.ed.ac.uk"],
                                     sendToInterestedUsers=False))


####### PROJECT IDENTITY

c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"
