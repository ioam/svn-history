# -*- python -*-
# ex: set syntax=python:

import os

MASTER_DIR = "/var/lib/buildbot/master/"
# need to have this layout on the master
# MASTER_DIR/
#            public_html/ 
#                        doc/
#                        coverage/
#                                 unittests/
#                                 unittests_slowtests_unopttests/
#                                
#                        dist/
#                             exe/
#                             setup.py/
#                             rpm-source/
#                             deb-source/

# CEBALERT: any way to read this?
MAKEFILE_RELEASE = "0.9.7"
PRERELEASE = "0.9.8"

# the email address here must be reachable by the buildmaster
NOTIFICATION_EMAIL = "v1cball@inf.ed.ac.uk"
MASTER = "fiver"

bbpython = "/usr/bin/env python2.6"
bbepydoc = "/usr/bin/epydoc"

topographica_script = "./topographica"
runtests_script = "./topo/tests/runtests.py"

TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"
svnurl =  TOPOROOT+"/trunk/topographica"

PROJNAME = "Topographica"
PROJURL = "http://www.topographica.org/"
BBURL = "http://buildbot.topographica.org/"

bb_fake_home = ".buildbot_fake_home/"
output_dir = "Documents/Topographica/"



######################################################################
####### CONVENIENCE FUNCTIONS & VARIABLES

c = BuildmasterConfig = {} # buildmaster reads this; c for convenience

from buildbot.buildslave import BuildSlave
def add_slave(name,pwd):
    """Add name/pwd to list of slaves"""
    c['slaves'].append(
        BuildSlave(name,pwd,
                   notify_on_missing=NOTIFICATION_EMAIL))


def add_schedulers(*args):
    for a in args:
        c['schedulers'].append(a)


from string import Template

def runtestscmd(targets=None):
    if targets is None:
        return (topographica_script,"-p","targets=['all']",runtests_script)
    else:
        return (topographica_script,"-p","targets=%s"%targets,runtests_script)


### various make commands
make_clean = ("make","clean")
make_pyc_clean = ("make","clean-pyc")
make_doc = ("make","doc")

make = ("make")
# "PYTHON='/usr/bin/env python2.6'"
make_setup = ("make","PYTHON=/usr/bin/python","topographica-external-python") # CEBALERT now this needs changing
make_develop = ("make","PYTHON=/usr/bin/python","topographica-external-python")
make_lint_base = ("make","lint-base")
make_pyflakes = ("make","pyflakes")

make_slow_tests = runtestscmd()
make_tests = runtestscmd(targets=["unit"])
make_gui_tests = runtestscmd(targets=["gui"])
make_unopttrain_tests = ("make","unopt-train-tests")
make_speed_tests = ("make","all-speed-tests")
plot_performance = ("python","doc/buildbot/plot_performance.py")

rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")
make_compare_oo_or = ("make","compare_oo_or")
analyse = ("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups();write_page()")
# CEBALERT: ideally analyse would use the buildbot slave copy of topographica and upload the file to the master
# rather than relying on another copy
make_or_comparisons = ("make","or_comparisons")

make_oo_or_comparisons = ("make","oo_or_comparisons")

make_dist = ("make","RELEASE=%s"%PRERELEASE,"dist")
make_dist_setup = ("make",'EPYDOC=%s'%bbepydoc,'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"dist-pysource")
make_dist_setup_sdist = ("make",'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"dist-pysource-sdist")
make_dist_setup_wininst = ("make",'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"dist-pysource-bdist_wininst")
make_dist__clean = ("rm","-rf","../distributions")
make_deb_svn = ("make",'EPYDOC=%s'%bbepydoc,'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"deb")
make_deb_backports_svn = ("make",'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"deb-backports")

#test_gpgagent=("gpg","--decrypt","/tmp/test.e")

make_deb_svn_ppa = ("make",'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"deb-ppa") 
make_rpm_svn = ("make",'PYTHON=%s'%bbpython,"RELEASE=%s"%PRERELEASE,"rpm") 
make_no_gui = ("make","GUI=0")
make_reference_manual = ("make","reference-manual")
build_coverage = ("make","-C","external","coverage")
make_clean_coverage = ("make","clean-coverage-output")
make_coverage_html = ("make","coverage-html")
make_clean_coverage_html = ("make","clean-coverage-html")
untar = ("tar","--strip-components=1","-xvf","topographica-"+PRERELEASE+".tar.gz")
rm_currdir = ("rm","-rf","./*")
make_optional = ("make","-C","external","pyaudiolab") # and others if they're being used...

# CEBALERT: should simplify all this by not bothering with buildbot's
# description and descriptionDone - just use one (description).
# e.g. 
# ["generating","setup.py","distribution"],["setup.py","distribution"] 
# can just become 
# ["setup.py","distribution"]
#
# Also, move these descriptions to be with the commands (rather than
# having in a separate structure).
#
# Both will require updating the add_command() function below. 

### descriptions of commands (for waterfall display) 
descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_setup: (["python","setup.py","install"]),
    make_develop: (["create", "topographica", "script"]),
    make_doc: ("make doc","documentation"),

    make_lint_base: (["pylint","base"],["pylint","base"]),
    make_pyflakes: (["pyflakes"],["pyflakes"]), 

    make_tests: (["unit","tests"],["unit","tests"]),
    make_gui_tests: (["gui","tests"],["gui","tests"]),
    make_slow_tests: (["slow","tests"],["slow","tests"]),
    make_speed_tests: (["speed","tests"],["speed","tests"]),
    plot_performance: (["plot","performance"],["plot","performance"]),
    make_unopttrain_tests: (["unoptimized","components","tests"],["unoptimized","components","tests"]),


    rsync: (["rsync","svn"],["svn","rsync"]),
    make_compare_oo_or: (["c++","'oo_or'","comparison"],["c++","'oo_or'","comparison"]),
    analyse: (["analysing"],["analysis"]),
    make_or_comparisons: (["c++","'or'","comparisons"],["c++","'or'","comparisons"]),
    make_oo_or_comparisons: (["c++","'oo_or'","comparisons"],["c++","'oo_or'","comparisons"]),
    make_pyc_clean: (["removing","pyc","files"],["clean-pyc"]),
    make_dist: (["generating","source","distribution"],["source","distribution"]),
    make_dist_setup: (["generating","setup.py","base"],["setup.py","base"]),
    make_dist_setup_sdist: (["generating","setup.py","distribution"],["setup.py","distribution"]),
    make_dist_setup_wininst: (["generating","exe","distribution"],["exe","distribution"]),
    make_dist__clean: (["removing","distributions","dir"],["delete","distributions","dir"]),
#    test_gpgagent: (['test','gpg'],['test','gpg']),
    make_deb_svn: (["generating","deb"],["deb"]),
    make_deb_backports_svn: (["backporting","deb"],["deb","backports"]),
    make_deb_svn_ppa: (["uploading","to","launchpad"],["launchpad","PPA"]),
    make_rpm_svn: (["source","rpm"],["source","rpm"]),
    make_no_gui: (["building","without","gui"],["build","no","gui"]),
    make_reference_manual: (["generating","reference","manual"],["reference","manual"]),
    build_coverage: (["build","coverage"],["build","coverage"]),
    make_clean_coverage : (["clean","coverage","output"],["clean","coverage","output"]),
    make_coverage_html : (["coverage","report"],["coverage","report"]),
    make_clean_coverage_html : (["clean","coverage","html"],["clean","coverage","html"]),
    untar : (["untar"],["untar"]),
    rm_currdir: (["clean","clean"]),
    make_optional: (["build","optional","components"],["build","optional","components"])}

from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

def cvs_checkout(factory_,mode="update",**args):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True,
                     retry=(10,2),
                     **args)


def add_command(factory_,command_,xvfb=True,timeout=1200,
                haltOnFailure=True,flunkOnFailure=True,flunkOnWarnings=False,warnOnFailure=False,warnOnWarnings=True,
                coverage=False,descr=None,
                **args):

    if descr is None:
        happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]
    else:
        happening_description,finished_description = descr,descr

    # ensure cmd is a list (to make simpler any necessary alterations to the command)
    if isinstance(command_,str):
        cmd = []
        cmd.append(command_)
    else:
        cmd = list(command_)

    if coverage:
        if cmd[0]==topographica_script:
            cmd.insert(1,"-p")
            cmd.insert(2,"coverage=True")
        elif cmd[0]=="make":
            cmd.insert(1,"COVERAGE=1")
        else:
            raise

    if hasattr(factory_,'_NICE') and factory_._NICE is True:
        cmd.insert(0,"nice")

    if xvfb and not (hasattr(factory_,'_NO_XVFB') and factory_._NO_XVFB is True):
        cmd.insert(0,"xvfb-run")
        cmd.insert(1,"-a")

    factory_.addStep(ShellCommand,command=cmd,description=happening_description,timeout=timeout,
                     descriptionDone=finished_description,
                     haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,flunkOnWarnings=flunkOnWarnings,
                     warnOnFailure=warnOnFailure,warnOnWarnings=warnOnWarnings,
                     **args)

def tests(build_factory):
    # CEBALERT: won't work on Windows until pyc clean is in python script
    add_command(build_factory,make_pyc_clean)
    add_command(build_factory,make_tests,haltOnFailure=True)


def optional_tests(build_factory):
    add_command(build_factory,make_optional,timeout=2400,haltOnFailure=True,flunkOnFailure=False,warnOnFailure=True)
    add_command(build_factory,make_tests,flunkOnFailure=False,warnOnFailure=True)


def slow_tests(build_factory,lite=True):
    # CEBALERT: as above about pyc
    add_command(build_factory,make_pyc_clean)
    add_command(build_factory,make_slow_tests,haltOnFailure=False)

    if lite is False:
        pass#add_command(build_factory,make_unopttrain_tests)

def _localepydochack(cmdin,local):
    if not local:
        cmd = list(cmdin)
        cmd.insert(1,"EPYDOC=%s"%bbepydoc)
        cmd = tuple(cmd)
    else:
        cmd = cmdin
    return cmd

def builddocs(build_factory,suppress_doc_warn=False,local=True,halt_at_failure=False):
    if suppress_doc_warn:
        # For OS X, til we make doc building easy
        warnOnFailure=False
    else:
        warnOnFailure=True

    new_make_doc = _localepydochack(make_doc,local)
    descriptions[new_make_doc] = descriptions[make_doc]
    new_make_reference_manual = _localepydochack(make_reference_manual,local)
    descriptions[new_make_reference_manual] = descriptions[make_reference_manual]

    if halt_at_failure:
        flunkOnFailure=haltOnFailure=True
    else:
        flunkOnFailure=haltOnFailure=False

    add_command(build_factory,new_make_doc,warnOnFailure=warnOnFailure,flunkOnFailure=flunkOnFailure,haltOnFailure=haltOnFailure)
    add_command(build_factory,new_make_reference_manual,haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,warnOnFailure=warnOnFailure)


# CEB: confusing - can't have e.g. setup and gui be True
def build(build_factory,setup=False,gui=True,develop=False):

    if setup:
        add_command(build_factory,make_setup,haltOnFailure=True)
    elif develop:
        add_command(build_factory,make_develop,haltOnFailure=True)
    else:

        if gui:
            mcommand = make
        else:
            mcommand = make_no_gui

        add_command(build_factory,mcommand,timeout=1*60*60,haltOnFailure=True)


######################################################################
######################################################################



######################################################################
####### GENERAL

### SVN

from buildbot.changes.svnpoller import SVNPoller
c['change_source']=SVNPoller(svnurl=svnurl,pollinterval=300)


### Connection
c['slavePortnum'] = "tcp:9989" # 9989:interface=127.0.0.1 for local only

### Status
c['projectName'] = PROJNAME
c['projectURL'] = PROJURL
c['buildbotURL'] = BBURL

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr=NOTIFICATION_EMAIL,
#                                     relayhost=
                                     mode='failing',
                                     extraRecipients=[NOTIFICATION_EMAIL],
                                     sendToInterestedUsers=False))
#
######################################################################
######################################################################




######################################################################
####### BUILDSLAVES (i.e. available machines)

c['slaves' ] = []

for n,p in [("doozy","PASSWD"),
            ("jupiter3","PASSWD"),
            ("fiver","PASSWD"),
            ("cupertinovm","PASSWD"),
            ("shadyvm","PASSWD")
            ]:
    add_slave(n,p)

# CEBALERT: this version of BB (0.7) does not expand things like ~ on
# the slave.  If a future version does, should remove this and just
# use ~ in the HOME path. Or might be able to use $HOME even now; not
# sure.
slave_homes = dict(
    fiver = "/home/ceball/",
    doozy = "/home/ceball/",
    jupiter3 = "/home/s0454615/",
    cupertinovm = "CEBALERT",
    shadyvm = "CEBALERT"
)

slave_bb_homes = dict([(k,v+bb_fake_home) for (k,v) in slave_homes.items()])
    

# one build at a time on all machines
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
fiver_lock = locks.SlaveLock("fiver",maxCount=1)
jupiter3_lock = locks.SlaveLock("jupiter3",maxCount=1)
cupertino_lock = locks.SlaveLock("cupertino",maxCount=1)

######################################################################
######################################################################


######################################################################
####### BUILDERS

from buildbot.process.factory import BuildFactory

builders = []


def define_builder(name,slavename,locks,builddir=None,env=None):

    if env is None:
        env = {}
    env.update({'HOME':"%s/%s"%(slave_bb_homes[slavename],name)})

    if builddir is None:
        builddir = name

    return dict(name=name,slavename=slavename,builddir=builddir,factory=BuildFactory(),locks=locks,env=env)

backups = define_builder("backups","doozy",[doozy_lock],builddir="topographica_svnroot")
add_command(backups['factory'],rsync,xvfb=False)


##reference = {
##    'name': "reference",
##    'slavename': "doozy",
##    'builddir': "reference",
##    'factory': BuildFactory(),
##    'locks':[doozy_lock]
##    }
##cvs_checkout(reference['factory'])
##reference['factory']._NICE=True
##add_command(reference['factory'],make,timeout=2400)
###add_command(reference['factory'],make_or_comparisons,timeout=2*60*60)
##add_command(reference['factory'],make_oo_or_comparisons,timeout=2*60*60)
##


# CEBALERT: missing developer style install builder (e.g. make, or make topographica-external-python)

# CEBALERT: there's no "no X" buildslave any more. Usually no X checks
# are to ensure people using clusters etc can build & run
# topographica. Often such systems have old versions of libraries and
# packages, too.

from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import WithProperties

def add_targz_download_extract(factory):
    add_command(factory,rm_currdir)     

    factory.addStep(FileDownload(mastersrc=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(revision)s.tar.gz"),
                                 slavedest="topographica-"+PRERELEASE+".tar.gz"))
                    #haltOnFailure=True,flunkOnFailure=True)

    add_command(factory,untar)
                #haltOnFailure=True,flunkOnFailure=True)


def setuppy_install(factory,python_path):
    add_command(factory,(python_path,"setup.py","install","--prefix=./local/"),
                descr = "install")
                #haltOnFailure=True,flunkOnFailure=True)

# CEBALERT: merge with make_tests!
def setuppy_tests(factory,pyver="2.7"):

    # CEBALERT: ${PATH} expansion not supported until newer version of
    # buildbot (0.8?).  Remove ./local/bin/ when upgrading.

    add_command(factory,("./local/bin/topographica","-c","import topo.tests.runtests as R; R.start()"),
                descr = "slow tests",
                env= {#"PATH":"./local/bin:${PATH}",
                      "PYTHONPATH":"./local/lib/python%s/site-packages/"%pyver})
    

def define_epd_builder(name,slave,lock,ppath):
    builder = define_builder(name,slave,lock)
    builder['factory']._NICE=True
    add_targz_download_extract(builder['factory'])
    setuppy_install(builder['factory'],ppath)
    setuppy_tests(builder['factory'],pyver="2.7")
    return builder

EPD7_rh5_x86_64 = define_epd_builder("EPD7-rh5-x86_64","jupiter3",[jupiter3_lock],
                                     "/disk/scratch/v1cball/bbsupport/epd-7.1-2-rh5-x86_64/bin/python")

EPD7_macosx_i386 = define_epd_builder("EPD7-macosx-i386","cupertinovm",[cupertino_lock],
                                      "/not/sure/yet")

EPD7_win_x86 = define_epd_builder("EPD7-win-x86","shadyvm",[doozy_lock],
                                  "/oh/no/windows/path")

from buildbot.steps.transfer import DirectoryUpload
docs = define_builder("docs",MASTER,[fiver_lock]) # CEBALERT: master lock
cvs_checkout(docs['factory'],mode="clobber")
build(docs['factory'],setup=True)
tests(docs['factory'])
builddocs(docs['factory'],local=False,halt_at_failure=True)
# Make doc available on web
docs['factory'].addStep(DirectoryUpload(slavesrc="doc",masterdest=MASTER_DIR+"/public_html/doc"))

from buildbot.steps.master import MasterShellCommand
coverage = define_builder("coverage",MASTER,[fiver_lock]) # CEBALERT: master lock
cvs_checkout(coverage['factory'],mode="copy")
add_command(coverage['factory'],make_pyc_clean)
build(coverage['factory'])
add_command(coverage['factory'],build_coverage,flunkOnFailure=True,haltOnFailure=True)

add_command(coverage['factory'],make_clean_coverage,flunkOnFailure=True,haltOnFailure=True)

# CEBALERT: hack to default dir; depends on allowing easy override
coverage_output_path = slave_bb_homes['fiver']+"/coverage/"+output_dir
slave_coverage_html = coverage_output_path + "/tests/coverage_html/" 
master_coverage_html = MASTER_DIR + "/public_html/coverage/"  

## unit tests
add_command(coverage['factory'],make_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)
coverage['factory'].addStep(MasterShellCommand(command="""rm -rf %s/unittests"""%master_coverage_html))
coverage['factory'].addStep(DirectoryUpload(slavesrc=slave_coverage_html,masterdest="%s/unittests"%master_coverage_html))

## ... + slow tests
add_command(coverage['factory'],make_slow_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],make_unopttrain_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],make_clean_coverage_html,haltOnFailure=True,flunkOnFailure=True)
add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)
coverage['factory'].addStep(MasterShellCommand(command="""rm -rf %s/unittests_slowtests_unopttests"""%master_coverage_html))
coverage['factory'].addStep(DirectoryUpload(slavesrc=slave_coverage_html,masterdest="%s/unittests_slowtests_unopttests"%master_coverage_html))

# CEB: for, would need to override doc/buildbot/coveragerc option to igore topo/tkgui
### unit tests + gui tests
#add_command(coverage['factory'],make_clean_coverage,flunkOnFailure=True,haltOnFailure=True)
#add_command(coverage['factory'],make_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
#add_command(coverage['factory'],make_gui_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
#add_command(coverage['factory'],make_clean_coverage_html,haltOnFailure=True,flunkOnFailure=True)
#add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)
#coverage['factory'].addStep(MasterShellCommand(command="""rm -rf %s/unittests_guitests"""%master_coverage_html))
#coverage['factory'].addStep(DirectoryUpload(slavesrc=slave_coverage_html,masterdest="%s/unittests_guitests"%master_coverage_html))


performance = define_builder("performance",'doozy',[doozy_lock])
cvs_checkout(performance['factory'])
build(performance['factory'])
add_command(performance['factory'],make_speed_tests,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
##add_command(performance['factory'],analyse,xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
add_command(performance['factory'],plot_performance,xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
add_command(performance['factory'],make_lint_base,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
add_command(performance['factory'],make_pyflakes,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)




from buildbot.steps.transfer import FileUpload
#from buildbot.process.properties import WithProperties

create_pysource = define_builder("create-pysource","fiver",[fiver_lock])
cvs_checkout(create_pysource['factory'],mode="clobber")
build(create_pysource['factory'],setup=True)
tests(create_pysource['factory'])
add_command(create_pysource['factory'],make_dist__clean)
add_command(create_pysource['factory'],make_dist_setup)
add_command(create_pysource['factory'],make_dist_setup_sdist)
add_command(create_pysource['factory'],make_dist_setup_wininst)
#add_command(create_pysource['factory'],make_dist_setup_msi) # CEBALERT: msi allows silent install, but bdist_msi missing other options!
add_command(create_pysource['factory'],make_rpm_svn) # CEBALERT: rename to make_dist_setup_bdistrpm

create_pysource['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(got_revision)s.tar.gz")))

create_pysource['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/exe/topographica-"+PRERELEASE+"~r%(got_revision)s.win.exe")))

create_pysource['factory'].addStep(FileUpload(
    slavesrc=WithProperties("../distributions/topographica-"+PRERELEASE+"/dist/topographica-"+PRERELEASE+"-r%(got_revision)s.src.rpm"),
    masterdest=WithProperties("public_html/dist/rpm-source/topographica-"+PRERELEASE+"-r%(got_revision)s.src.rpm")))

##### current versions (e.g. for build services)
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".tar.gz")))
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.srpm"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".srpm")))
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".win.exe")))

# Might need this:
# osc rebuildpac home:ceball:topographica-unstable


from buildbot.steps import trigger
create_pysource['factory'].addStep(trigger.Trigger(schedulerNames=['test-pysource'],
                                            waitForFinish=False))

create_pysource['factory'].addStep(trigger.Trigger(schedulerNames=['packages'],
                                            waitForFinish=False))


# CEBALERT: disabled until someone figures out how to get deb signing
# to work without interaction. Means we miss out on deb testing on
# various platforms.
create_deb = define_builder("create-source-deb","fiver",[fiver_lock])

create_deb['factory']._NO_XVFB=True # CEBALERT: necessary for gpg caching to work on Ubuntu!
#build(create_deb['factory'],mode="update")
cvs_checkout(create_deb['factory'],mode="clobber")
add_command(create_deb['factory'],make_dist__clean)
#add_command(create_deb['factory'],test_gpgagent)
add_command(create_deb['factory'],make_deb_svn)
add_command(create_deb['factory'],make_deb_backports_svn)
#add_command(create_deb['factory'],make_deb_svn_ppa)

debsrcpath = "../distributions/"
debdestpath = "public_html/dist/deb-source/"
# CEBALERT: duplicates list in Makefile
for distribution in ['oneiric','natty','maverick','lucid']:
    fname = "topographica_"+PRERELEASE+"~r%(got_revision)s-0ubuntu0~"+distribution

    create_deb['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s.tar.gz"%fname),
        masterdest=WithProperties(debdestpath+"%s.tar.gz"%fname)))

    create_deb['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s.dsc"%fname),
        masterdest=WithProperties(debdestpath+"%s.dsc"%fname)))

    create_deb['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s_source.changes"%fname),
        masterdest=WithProperties(debdestpath+"%s_source.changes"%fname)))



c['builders'] = [

#### (almost continuous-)CI
                 performance,
                 coverage,
                 #reference,
                 docs,

#### test user install of pysource
                 EPD7_rh5_x86_64,
                 EPD7_win_x86,
                 EPD7_macosx_i386,

#### create pysource, deb, rpm, etc
                 create_pysource,
                 create_deb,

#### repo backup
                 backups]




######################################################################
####### SCHEDULERS

from buildbot.scheduler import Nightly,Periodic,Triggerable

c['schedulers'] = []

add_schedulers(
    Nightly("nightly-backup",["backups"],hour=02,minute=00),
    Nightly("one-in-3-nightly",["performance","coverage","docs"],dayOfWeek=[0,3,5],hour=03,minute=00),
    Nightly("sunday-nightly",["create-pysource"],dayOfWeek=6,hour=01,minute=00),
    Triggerable(name="test-pysource",
                builderNames=["EPD7-rh5-x86_64","EPD7-macosx-i386","EPD7-win-x86"]),
    Triggerable(name="packages",
                builderNames=["create-source-deb"])
    )

######################################################################
######################################################################
