# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

c['bots'] = [("x86_ubuntu7.04", "PWD"),
             ("ppc_darwin8.10.0", "PWD")]

c['slavePortnum'] = "tcp:9989"
# CB: change to 9989:interface=127.0.0.1
# to have connections from localhost only

####### CHANGESOURCES

# CB: we're not using any
c['sources'] = []

####### SCHEDULERS

from buildbot.scheduler import Periodic,Nightly

periodic_tests = Periodic("periodic-tests",["x86_ubuntu7.04_tests","ppc_darwin8.10.0_tests"], 8*60*60)
nightly_build = Nightly("nightly-build",["x86_ubuntu7.04_build","ppc_darwin8.10.0_build"],hour=03,minute=00)
nightly_tests = Nightly("nightly-tests",["x86_ubuntu7.04_slow-tests","ppc_darwin8.10.0_slow-tests"],hour=04,minute=00)

c['schedulers'] = [periodic_tests,nightly_build,nightly_tests]


####### BUILDERS

cvsroot = ":pserver:anonymous@topographica.cvs.sf.net:/cvsroot/topographica"
cvsmodule = "topographica"

builders = []

from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import ShellCommand

make_clean = ("make","clean")
make_doc = ("make","doc")
make = ("make")
make_tests = ("make","tests")
make_gui_tests = ("make","gui-tests")
make_slow_tests = ("make","slow-tests")

make_osx_patch = ("make","osx-patch")
make_osx_patch_clean = ("make","osx-patch-clean")


descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_doc: ("make doc","documentation"),
    make_tests: ("testing",["unit","tests"]),
    make_gui_tests: (["testing","gui"],["gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_osx_patch: (["patching","Makefile"],["python","build","patch"]),
    make_osx_patch_clean: (["unpatching","Makefile"],["remove","Makefile","patch"])}
    

def cvs_checkout(factory_,mode="update",osx=False):
    if osx:
        factory_.addStep(CVS,
                         cvsroot=cvsroot, cvsmodule=cvsmodule, login="",
                         mode=mode,global_options=["-z0"]) # z0 seems to be required for OS X 
    else:
        factory_.addStep(CVS,
                         cvsroot=cvsroot, cvsmodule=cvsmodule, login="",
                         mode=mode)
        

# CB: rename osx to needsX or something
def add_command(factory_,command_,osx=False):
    happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]

    if not osx:
        cmd = ["xvfb-run","-a"]
        if isinstance(command_,str):
            cmd.append(command_)
        else:
            cmd+=list(command_)
    else:
        cmd = command_

        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,
                     descriptionDone=finished_description)


### Standard (linux) build factory
standard_build = factory.BuildFactory()
cvs_checkout(standard_build,mode="copy")
add_command(standard_build,make_clean)
add_command(standard_build,make)
add_command(standard_build,make_doc)
# CB: could make current docs available on the web somewhere
# from buildbot.steps.transfer import FileUpload
# standard_build.addStep(FileUpload ...


### Standard (linux) tests
standard_tests = factory.BuildFactory()
cvs_checkout(standard_tests)
add_command(standard_tests,make)
add_command(standard_tests,make_tests)
add_command(standard_tests,make_gui_tests)


### Standard (linux) slow-tests
standard_slow_tests = factory.BuildFactory()
cvs_checkout(standard_slow_tests)
add_command(standard_slow_tests,make)
add_command(standard_slow_tests,make_slow_tests)



### OSX build factory
osx_build = factory.BuildFactory()
cvs_checkout(osx_build,mode="copy",osx=True)
add_command(osx_build,make_clean,osx=True)
add_command(osx_build,make_osx_patch,osx=True)
add_command(osx_build,make,osx=True)
add_command(osx_build,make_doc,osx=True)


### OSX tests
osx_tests = factory.BuildFactory()
cvs_checkout(osx_tests,osx=True)
add_command(osx_tests,make_osx_patch,osx=True)
add_command(osx_tests,make,osx=True)
add_command(osx_tests,make_tests,osx=True)
add_command(osx_tests,make_gui_tests,osx=True)


### OSX slow-tests
osx_slow_tests = factory.BuildFactory()
cvs_checkout(osx_slow_tests,osx=True)
add_command(osx_slow_tests,make_osx_patch,osx=True)
add_command(osx_slow_tests,make,osx=True)
add_command(osx_slow_tests,make_slow_tests,osx=True)


standard_build_builder = {'name': "x86_ubuntu7.04_build",
      'slavename': "x86_ubuntu7.04",
      'builddir': "full_x86_ubuntu7.04",
      'factory': standard_build,
      }

standard_tests_builder = {'name': "x86_ubuntu7.04_tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "tests_x86_ubuntu7.04",
      'factory': standard_tests,
      }
 
standard_slowtests_builder = {'name': "x86_ubuntu7.04_slow-tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "slow-tests_x86_ubuntu7.04",
      'factory': standard_slow_tests,
      }


osx_build_builder = {'name': "ppc_darwin8.10.0_build",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "full_ppc_darwin8.10.0",
      'factory': osx_build,
      }

osx_tests_builder = {'name': "ppc_darwin8.10.0_tests",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "tests_ppc_darwin8.10.0",
      'factory': osx_tests,
      }


osx_slowtests_builder = {'name': "ppc_darwin8.10.0_slow-tests",
      'slavename': "ppc_darwin8.10.0",
      'builddir': "slow-tests_ppc_darwin8.10.0",
      'factory': osx_slow_tests,
      }




c['builders'] = [standard_tests_builder,standard_build_builder,standard_slowtests_builder,
                 osx_tests_builder,osx_build_builder,osx_slowtests_builder]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.Waterfall(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@doozy.inf.ed.ac.uk",
                                     mode='failing',
                                     extraRecipients=["v1cball@inf.ed.ac.uk"],
                                     sendToInterestedUsers=False))


####### PROJECT IDENTITY

c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"
