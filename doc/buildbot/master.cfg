# -*- python -*-
# ex: set syntax=python:

# buildbot service on windows
# http://ascendwiki.cheme.cmu.edu/BuildBot

import os


# CEBALERT: any way to read this?
MAKEFILE_RELEASE = "0.9.7"
PRERELEASE = "0.9.8"

# the email address here must be reachable by the buildmaster
NOTIFICATION_EMAIL = "v1cball@inf.ed.ac.uk"
MASTER = "fiver"

######################################################################
####### CONVENIENCE FUNCTIONS & VARIABLES

c = BuildmasterConfig = {} # buildmaster reads this; c for convenience

from buildbot.buildslave import BuildSlave
def add_slave(name,pwd):
    """Add name/pwd to list of slaves"""
    c['slaves'].append(
        BuildSlave(name,pwd,
                   notify_on_missing=NOTIFICATION_EMAIL))


def add_schedulers(*args):
    for a in args:
        c['schedulers'].append(a)

### various make commands
make_clean = ("make","clean")
make_pyc_clean = ("make","clean-pyc")
make_doc = ("make","doc")
make = ("make")
make_setup = ("make","topographica-other-python")
make_tests = ("make","tests")
make_lint_base = ("make","lint-base")
make_basic_gui_tests = ("make","basic-gui-tests")
make_detailed_gui_tests = ("make","detailed-gui-tests")
make_gui_tests = ("make","gui-tests")
make_slow_tests = ("make","-k","slow-tests")
make_unopttrain_tests = ("make","-k","IMPORT_WEAVE=0","TESTDP=5","train-tests")
make_snapshot_tests = ("make","snapshot-tests")
rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")
make_compare_oo_or = ("make","compare_oo_or")
analyse = ("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups();write_page()")
# CEBALERT: ideally analyse would use the buildbot slave copy of topographica and upload the file to the master
# rather than relying on another copy
make_or_comparisons = ("make","or_comparisons")
#make_win_msys_patch = ("make","win-msys-patch")
#make_osx_tk_patch = ("make","osx-tk-patch")
make_oo_or_comparisons = ("make","oo_or_comparisons")
make_dist = ("make","RELEASE=%s"%PRERELEASE,"dist")
make_dist_setup = ("make","RELEASE=%s"%PRERELEASE,"dist-setup.py")
make_dist_setup_sdist = ("make","RELEASE=%s"%PRERELEASE,"dist-setup.py-sdist")
make_dist_setup_wininst = ("make","RELEASE=%s"%PRERELEASE,"dist-setup.py-bdist_wininst")
make_dist_setup_msi = ("make","RELEASE=%s"%PRERELEASE,"BDIST_WIN_CMD = bdist_msi","dist-setup.py-bdist_wininst")
make_dist__clean = ("rm","-rf","../distributions")
make_deb_svn = ("make","RELEASE=%s"%PRERELEASE,"deb")
make_deb_backports_svn = ("make","RELEASE=%s"%PRERELEASE,"deb-backports")
make_deb_svn_ppa = ("make","RELEASE=%s"%PRERELEASE,"deb-ppa") 
make_rpm_svn = ("make","RELEASE=%s"%PRERELEASE,"rpm") 
make_no_gui = ("make","GUI=0")
make_reference_manual = ("make","reference-manual")
build_coverage = ("make","-C","external","coverage")
make_clean_coverage = ("make","clean-coverage-output")
make_coverage_html = ("make","coverage-html")
make_clean_coverage_html = ("make","clean-coverage-html")
untar = ("tar","--strip-components=1","-xvf","topographica-"+PRERELEASE+".tar.gz")
rm_currdir = ("rm","-rf","./*")
make_optional = ("make","-C","external","pyaudiolab") # and others if they're being used...

### descriptions of commands (for waterfall display) 
descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_setup: (["python","setup.py","install"]),
    make_doc: ("make doc","documentation"),
    make_lint_base: (["checking","for","lint"],["lint","tests"]),
    make_tests: ("testing",["unit","tests"]),
    make_gui_tests: (["gui","tests"]),
    make_basic_gui_tests: (["testing","gui","(basic)"],["basic","gui","tests"]),
    make_detailed_gui_tests: (["testing","gui","(detailed)"],["detailed","gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_unopttrain_tests: (["testing","unoptimized","components"],['no','optimized','components']),
    make_snapshot_tests: (["testing","snapshots"],["snapshot","tests"]),
    rsync: (["rsync","svn"],["svn","rsync"]),
    make_compare_oo_or: (["c++","'oo_or'","comparison"],["c++","'oo_or'","comparison"]),
    analyse: (["analysing"],["analysis"]),
    make_or_comparisons: (["c++","'or'","comparisons"],["c++","'or'","comparisons"]),
    make_oo_or_comparisons: (["c++","'oo_or'","comparisons"],["c++","'oo_or'","comparisons"]),
    make_pyc_clean: (["removing","pyc","files"],["clean-pyc"]),
    make_dist: (["generating","source","distribution"],["source","distribution"]),
    make_dist_setup: (["generating","setup.py","base"],["setup.py","base"]),
    make_dist_setup_sdist: (["generating","setup.py","distribution"],["setup.py","distribution"]),
    make_dist_setup_wininst: (["generating","exe","distribution"],["exe","distribution"]),
    make_dist_setup_msi: (["generating","msi","distribution"],["msi","distribution"]),
    make_dist__clean: (["removing","distributions","dir"],["delete","distributions","dir"]),
    make_deb_svn: (["generating","deb"],["deb"]),
    make_deb_backports_svn: (["backporting","deb"],["deb","backports"]),
    make_deb_svn_ppa: (["uploading","to","launchpad"],["launchpad","PPA"]),
    make_rpm_svn: (["rpm","spec"],["rpm","spec"]),
    make_no_gui: (["building","without","gui"],["build","no","gui"]),
    make_reference_manual: (["generating","reference","manual"],["reference","manual"]),
    build_coverage: (["build","coverage"],["build","coverage"]),
    make_clean_coverage : (["clean","coverage","output"],["clean","coverage","output"]),
    make_coverage_html : (["coverage","report"],["coverage","report"]),
    make_clean_coverage_html : (["clean","coverage","html"],["clean","coverage","html"]),
    untar : (["untar"],["untar"]),
    rm_currdir: (["clean","clean"]),
    make_optional: (["build","optional","components"],["build","optional","components"])}

from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

def cvs_checkout(factory_,mode="update"):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True,
                     retry=(10,2))

def add_command(factory_,command_,xvfb=True,timeout=1200,
                haltOnFailure=True,flunkOnFailure=True,flunkOnWarnings=False,warnOnFailure=False,warnOnWarnings=True,
                coverage=False,descr=None,
                **args):

    if descr is None:
        happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]
    else:
        happening_description,finished_description = descr,descr

    # ensure cmd is a list (to make simpler any necessary alterations to the command)
    if isinstance(command_,str):
        cmd = []
        cmd.append(command_)
    else:
        cmd = list(command_)

    if coverage:
        assert cmd[0]=="make"
        cmd.insert(1,"COVERAGE=1")

    if hasattr(factory_,'_NICE') and factory_._NICE is True:
        cmd.insert(0,"nice")

    if xvfb and not (hasattr(factory_,'_NO_XVFB') and factory_._NO_XVFB is True):
        cmd.insert(0,"xvfb-run")
        cmd.insert(1,"-a")
        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,timeout=timeout,
                     descriptionDone=finished_description,
                     haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,flunkOnWarnings=flunkOnWarnings,
                     warnOnFailure=warnOnFailure,warnOnWarnings=warnOnWarnings,
                     **args)

def build(build_factory,patch=None,mode="copy",gui=True):
    """Add the 'svn checkout; make; make doc; make tests; make basic-gui-tests' suite to build_factory"""
    cvs_checkout(build_factory,mode=mode)
    add_command(build_factory,make_clean)
    if patch:
        add_command(build_factory,patch)

    if gui:
        mcommand = make
    else:
        mcommand = make_no_gui

    add_command(build_factory,mcommand,timeout=1*60*60)
    add_command(build_factory,make_doc,warnOnFailure=True,flunkOnFailure=False,haltOnFailure=False)
    add_command(build_factory,make_tests)

    if gui:
        add_command(build_factory,make_basic_gui_tests)

def tests(build_factory,patch=None):
    """Add the 'svn update; make; make tests; make gui-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=2400)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests)
    add_command(build_factory,make_detailed_gui_tests)


def optional_tests(build_factory):
    add_command(build_factory,make_optional,timeout=2400,haltOnFailure=True,flunkOnFailure=False,warnOnFailure=True)
    add_command(build_factory,make_tests,flunkOnFailure=False,warnOnFailure=True)


def slow_tests(build_factory,patch=None):
    """Add the 'svn update; make; make slow-tests; make snapshot-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=2400)
    add_command(build_factory,make_slow_tests,haltOnFailure=False)
    add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
    add_command(build_factory,make_unopttrain_tests,haltOnFailure=False)

def build_then_slowtests(build_factory,patch=None,suppress_doc_warn=False,setup=False,lite=False,gui=True):
    """Full checkout, build, slow-tests"""
    cvs_checkout(build_factory,mode="clobber")
    if patch:
        add_command(build_factory,patch)
    if setup:
        add_command(build_factory,make_setup,haltOnFailure=True)
    else:

        if gui:
            mcommand = make
        else:
            mcommand = make_no_gui

        add_command(build_factory,mcommand,timeout=1*60*60,haltOnFailure=True)

    if suppress_doc_warn:
        # For OS X, til we make doc building easy
        warnOnFailure=False
    else:
        warnOnFailure=True
    add_command(build_factory,make_doc,warnOnFailure=warnOnFailure,flunkOnFailure=False,haltOnFailure=False)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_detailed_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_slow_tests,haltOnFailure=False)
    if lite is False:
        add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
        add_command(build_factory,make_unopttrain_tests)


def wintests(build_factory):
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_detailed_gui_tests,haltOnFailure=False)
#    add_command(build_factory,make_slow_tests,timeout=3600,haltOnFailure=False)
#    add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
#    add_command(build_factory,make_unopttrain_tests,timeout=3600,haltOnFailure=False)


######################################################################
######################################################################



######################################################################
####### GENERAL

### SVN
TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"
svnurl =  TOPOROOT+"/trunk/topographica"

from buildbot.changes.svnpoller import SVNPoller
c['change_source']=SVNPoller(svnurl=svnurl,pollinterval=300)


### Connection
c['slavePortnum'] = "tcp:9989" # 9989:interface=127.0.0.1 for local only


### Status
c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr=NOTIFICATION_EMAIL,
#                                     relayhost=
                                     mode='failing',
                                     extraRecipients=[NOTIFICATION_EMAIL],
                                     sendToInterestedUsers=False))
#
######################################################################
######################################################################




######################################################################
####### BUILDSLAVES (i.e. available machines)

c['slaves' ] = []

for n,p in [("doozy","passwd"),
#            ("cider","passwd"),
            ("temporary","passwd"),
            ("vmac","passwd"),
            ("vubuntu","passwd"),
            ("lodestar","passwd"),
#            ("cloud","passwd"),
#            ("sunny","passwd"),
            ("jupiter3","passwd"),
            ("fiver","passwd"),
            ("ear","passwd"),
#            ("rain","passwd")
            ]:
    add_slave(n,p)

# one build at a time on all machines
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
lodestar_lock = locks.SlaveLock("lodestar",maxCount=1)
#cloud_lock = locks.SlaveLock("cloud",maxCount=1)
fiver_lock = locks.SlaveLock("fiver",maxCount=1)
jupiter3_lock = locks.SlaveLock("jupiter3",maxCount=1)

######################################################################
######################################################################


######################################################################
####### BUILDERS

from buildbot.process.factory import BuildFactory

builders = []

backups = {
    'name': "backups",
    'slavename': "doozy",
    'builddir': "topographica_svnroot",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
add_command(backups['factory'],rsync,xvfb=False)


##reference = {
##    'name': "reference",
##    'slavename': "doozy",
##    'builddir': "reference",
##    'factory': BuildFactory(),
##    'locks':[doozy_lock]
##    }
##cvs_checkout(reference['factory'])
##reference['factory']._NICE=True
##add_command(reference['factory'],make,timeout=2400)
###add_command(reference['factory'],make_or_comparisons,timeout=2*60*60)
##add_command(reference['factory'],make_oo_or_comparisons,timeout=2*60*60)
##

x86_DICE_FC13_setup = {
    'name': "x86_DICE_FC13_setup",
    'slavename': "lodestar",
    'builddir': "x86_DICE_FC13_setup",
    'factory': BuildFactory(),
    'locks':[lodestar_lock]
    }    
x86_DICE_FC13_setup['factory']._NICE=True
build_then_slowtests(x86_DICE_FC13_setup['factory'],setup=True,lite=True)

 
x86_UbuntuLucid_setup = {
    'name': "x86_UbuntuLucid_setup",
    'slavename': "vubuntu",
    'builddir': "x86_UbuntuLucid_setup",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }    
x86_UbuntuLucid_setup['factory']._NICE=True
build_then_slowtests(x86_UbuntuLucid_setup['factory'],setup=True,lite=True)


x86_64_UbuntuNattyServer = {
    'name': "x86_64_UbuntuNattyServer",
    'slavename': "ear",
    'builddir': "x86_64_UbuntuNattyServer",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }    
x86_64_UbuntuNattyServer['factory']._NICE=True
x86_64_UbuntuNattyServer['factory']._NO_XVFB=True
build(x86_64_UbuntuNattyServer['factory'],gui=False)
#build_then_slowtests(x86_64_UbuntuNattyServer['factory'],gui=False)
#optional_tests(x86_64_UbuntuNattyServer['factory'])


x86_DICE_FC13 = {
    'name': "x86_DICE_FC13",
    'slavename': "lodestar",
    'builddir': "x86_DICE_FC13",
    'factory': BuildFactory(),
    'locks':[lodestar_lock]
    }    
x86_DICE_FC13['factory']._NICE=True
build_then_slowtests(x86_DICE_FC13['factory'])
optional_tests(x86_DICE_FC13['factory'])

x86_64_DICE_SL5 = {
    'name': "x86_64_DICE_SL5",
    'slavename': "jupiter3",
    'builddir': "x86_64_DICE_SL5",
    'factory': BuildFactory(),
    'locks':[jupiter3_lock]
    }    
x86_64_DICE_SL5['factory']._NICE=True
build_then_slowtests(x86_64_DICE_SL5['factory'])
optional_tests(x86_64_DICE_SL5['factory'])

from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import WithProperties

def add_targz_download_extract(factory):
    add_command(factory,rm_currdir)     

    factory.addStep(FileDownload(mastersrc=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(revision)s.tar.gz"),
                                 slavedest="topographica-"+PRERELEASE+".tar.gz"))
                    #haltOnFailure=True,flunkOnFailure=True)

    add_command(factory,untar)
                #haltOnFailure=True,flunkOnFailure=True)


def setuppy_install(factory,python_path):
    add_command(factory,(python_path,"setup.py","install","--prefix=./local/"),
                descr = "install")
                #haltOnFailure=True,flunkOnFailure=True)

def setuppy_tests(factory,pyver="2.7"):

    # CEBALERT: ${PATH} expansion not supported until newer version of
    # buildbot (0.8?).  Remove ./local/bin/ when upgrading.

    add_command(factory,("./local/bin/topographica","-c",'import topo.tests; t=topo.tests.run(); import sys; sys.exit(len(t.failures+t.errors))'),
                descr = "unit tests",
                env= {#"PATH":"./local/bin:${PATH}",
                      "PYTHONPATH":"./local/lib/python%s/site-packages/"%pyver})
    

EPD7_rh5_x86_64 = {
    'name': "EPD7_rh5_x86_64",
    'slavename': "jupiter3",
    'builddir': "EPD7_rh5_x86_64",
    'factory': BuildFactory(),
    'locks':[jupiter3_lock]
    }    
EPD7_rh5_x86_64['factory']._NICE=True

add_targz_download_extract(EPD7_rh5_x86_64['factory'])
setuppy_install(EPD7_rh5_x86_64['factory'],"/group/project/ndtc/python/epd-7.0-2-rh5-x86_64/bin/python")
setuppy_tests(EPD7_rh5_x86_64['factory'],pyver="2.7")

#PythonXY26_Win7_x86_64 = {
#    'name': "PythonXY26_Win7_x86_64",
#    'slavename': "temporary",
#    'builddir': "PythonXY26_Win7_x86_64",
#    'factory': BuildFactory(),
#    'locks':[doozy_lock,temporary_lock]
#    }
#
EPD7_Win7_x86_64 = {
    'name': "EPD7_Win7_x86_64",
    'slavename': "temporary",
    'builddir': "EPD_Win7_x86_64",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
EPD7_Win7_x86_64['factory']._NO_XVFB=True
#add_exe_download(EPD7_Win7_x86_64['factory'])
#setuppy_exe_install(EPD7_Win7_x86_64['factory'])
#setuppy_exe_tests(EPD7_Win7_x86_64['factory'])
    

docs = {
    'name': "docs",
    'slavename': MASTER,
    'builddir': "docs",
    'factory': BuildFactory(),
    'locks':[fiver_lock] # CEBALERT: master
    }
tests(docs['factory'])
add_command(docs['factory'],make_doc,flunkOnFailure=True,haltOnFailure=False,warnOnFailure=False)
add_command(docs['factory'],make_reference_manual,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)

from buildbot.steps.transfer import DirectoryUpload
# Make doc available on web
docs['factory'].addStep(DirectoryUpload(slavesrc="doc",masterdest="/var/lib/buildbot/master/public_html/doc"))

coverage = {
    'name':"coverage",
    "slavename": MASTER,
    "builddir":"coverage",
    "factory":BuildFactory(),
    "locks":[fiver_lock]
    }

cvs_checkout(coverage['factory'])
add_command(coverage['factory'],make_pyc_clean)
add_command(coverage['factory'],make,timeout=2400)
add_command(coverage['factory'],build_coverage,flunkOnFailure=True,haltOnFailure=True)
add_command(coverage['factory'],make_clean_coverage,flunkOnFailure=True,haltOnFailure=True)
add_command(coverage['factory'],make_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)

from buildbot.steps.master import MasterShellCommand

add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)
coverage['factory'].addStep(MasterShellCommand(command="""rm -rf /var/lib/buildbot/master/public_html/coverage/unittests"""))
# CEBALERT: hack to default dir; depends on allowing easy override
coverage['factory'].addStep(DirectoryUpload(slavesrc="/home/ceball/topographica/tests/coverage_html",masterdest="/var/lib/buildbot/master/public_html/coverage/unittests"))

add_command(coverage['factory'],make_gui_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)

add_command(coverage['factory'],make_clean_coverage_html,haltOnFailure=True,flunkOnFailure=True)

add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)

coverage['factory'].addStep(MasterShellCommand(command="""rm -rf /var/lib/buildbot/master/public_html/coverage/unittests_guitests"""))
coverage['factory'].addStep(DirectoryUpload(slavesrc="/home/ceball/topographica/tests/coverage_html",masterdest="/var/lib/buildbot/master/public_html/coverage/unittests_guitests"))


add_command(coverage['factory'],make_slow_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],make_unopttrain_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],make_snapshot_tests,haltOnFailure=False,flunkOnFailure=False,coverage=True)

add_command(coverage['factory'],make_clean_coverage_html,haltOnFailure=True,flunkOnFailure=True)

add_command(coverage['factory'],make_coverage_html,flunkOnFailure=True,haltOnFailure=True)

coverage['factory'].addStep(MasterShellCommand(command="""rm -rf /var/lib/buildbot/master/public_html/coverage/unittests_guitests_slowtests_unopttests_snapshottests"""))

coverage['factory'].addStep(DirectoryUpload(slavesrc="/home/ceball/topographica/tests/coverage_html",masterdest="/var/lib/buildbot/master/public_html/coverage/unittests_guitests_slowtests_unopttests_snapshottests"))




SnowLeopard = {
    'name': "SnowLeopard",
    'slavename': "vmac",
    'builddir': "SnowLeopard",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
SnowLeopard['factory']._NO_XVFB=True # CB: would be better to set no xvfb on the slave
build_then_slowtests(SnowLeopard['factory'],suppress_doc_warn=True)
optional_tests(SnowLeopard['factory'])



#x86_WinXP = {
#    'name': "x86_WinXP",
#    'slavename': "light",
#    'builddir': "x86_WinXP",
#    'factory': BuildFactory(),
#    'locks':[doozy_lock,light_lock]
#    }
#x86_WinXP['factory']._NO_XVFB=True
#wintests(x86_WinXP['factory'])
#
#performance = {
#    'name':"performance",
#    'slavename':'cloud',
#    'builddir':"performance",
#    'factory':BuildFactory(),
#    'locks':[cloud_lock]
#    }
#slow_tests(performance['factory'])
#add_command(performance['factory'],make_lint_base,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
##add_command(performance['factory'],analyse,xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
#
#x86_Ubuntu1 = {
#    'name': "x86_Ubuntu10.04",
#    'slavename': "sunny",
#    'builddir': "x86_Ubuntu10.04",
#    'factory': BuildFactory(),
#    'locks':[doozy_lock]
#    }
#
#x86_Ubuntu1['factory']._NO_XVFB=True
#build_then_slowtests(x86_Ubuntu1['factory'])
#
#
#x86_Ubuntu2 = {
#    'name': "x86_Ubuntu10.04_noX",
#    'slavename': "rain",
#    'builddir': "x86_Ubuntu10.04_noX",
#    'factory': BuildFactory(),
#    'locks':[doozy_lock]
#    }
#
#x86_Ubuntu2['factory']._NO_XVFB=True
#build(x86_Ubuntu2['factory'],gui=False)
#

from buildbot.steps.transfer import FileUpload
#from buildbot.process.properties import WithProperties
     
archives = {
    'name': "archives",
    'slavename': "fiver",
    'builddir': "archives",
    'factory': BuildFactory(),
    'locks':[fiver_lock]
    }
build(archives['factory'],mode="update")
add_command(archives['factory'],make_dist__clean)
add_command(archives['factory'],make_dist_setup)
add_command(archives['factory'],make_dist_setup_sdist)
add_command(archives['factory'],make_dist_setup_wininst)
#add_command(archives['factory'],make_dist_setup_msi)
add_command(archives['factory'],make_rpm_svn) # CEBALERT: rename to make_dist_setup_bdistrpm

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(got_revision)s.tar.gz")))

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/exe/topographica-"+PRERELEASE+"~r%(got_revision)s.win.exe")))

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica.spec"%PRERELEASE,
    masterdest=WithProperties("public_html/dist/rpm/topographica-"+PRERELEASE+"~r%(got_revision)s.spec")))


### current versions (e.g. for build services)

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".tar.gz")))

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica.spec"%PRERELEASE,
    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".spec")))

archives['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".win.exe")))

###

# Might need this:
# osc rebuildpac home:ceball:topographica-unstable


from buildbot.steps import trigger
archives['factory'].addStep(trigger.Trigger(schedulerNames=['test-archives'],
                                            waitForFinish=False))


packages = {
    'name': "packages",
    'slavename': "fiver",
    'builddir': "packages",
    'factory': BuildFactory(),
    'locks':[fiver_lock]
    }

packages['factory']._NO_XVFB=True # CEBALERT: necessary for gpg caching to work on Ubuntu!
build(packages['factory'],mode="update")
add_command(packages['factory'],make_dist__clean)
add_command(packages['factory'],make_deb_svn)
add_command(packages['factory'],make_deb_backports_svn)
add_command(packages['factory'],make_deb_svn_ppa)



# CEBALERT: in a future version of buildbot, should be able to upload *.rpm

#packages['factory'].addStep(
#    FileUpload(
#        slavesrc=WithProperties("../distributions/topographica-"+PRERELEASE+"~r%(got_revision)s-1.noarch.rpm"),
#        masterdest=WithProperties("public_html/dist/rpm/topographica-"+PRERELEASE+"~r%(got_revision)s-l.noarch.rpm")))


### TESTING OF BUILDBOT ITSELF (e.g. AFS issues)
#ignore_internal_test = {
#    'name': "ignore_internal_test",
#    'slavename': "lodestar",
#    'builddir': "ignore_internal_test",
#    'factory': BuildFactory(),
#    'locks':[lodestar_lock]
#    }

#ignore_internal_test['factory'].addStep(ShellCommand, command=['python','/disk/home/lodestar1/v1cball/afstest.py'], flunkOnFailure=False,flunkOnWarnings=False,warnOnFailure=False)

c['builders'] = [x86_DICE_FC13,
                 x86_64_DICE_SL5,
                 x86_64_UbuntuNattyServer,
                 SnowLeopard,
                 x86_DICE_FC13_setup,
                 x86_UbuntuLucid_setup,
#                 x86_UbuntuNatty_setup,
                 EPD7_rh5_x86_64,
                 EPD7_Win7_x86_64,
#                 PythonXY26_Win7_x86_64,

#                 x86_Ubuntu1,
#                 x86_Ubuntu2,
#                 x86_WinXP,

#                 performance,

#                 reference,
                 backups,
                 archives,
                 packages,
                 docs,
                 coverage]
#                 ignore_internal_test]

######################################################################
######################################################################



######################################################################
####### SCHEDULERS

from buildbot.scheduler import Nightly,Periodic,Triggerable

c['schedulers'] = []

add_schedulers(
#    Periodic('hourly',['ignore_internal_test'],1*60*60), # for bb AFS issues
#    Nightly('workday', ['performance'],hour=[15], minute=00),
    Nightly("nightly-build",["docs"],hour=03,minute=00),
    Nightly("nightly-backup",["backups"],hour=02,minute=00),
#    Nightly("texas-sunday-nightly",["x86_SnowLeopard"],hour=9,minute=00),
#,"performance","reference","x86_WinXP","x86_Ubuntu10.04","x86_Ubuntu10.04_noX","x86_SnowLeopard"
    Nightly("one-in-3-nightly",["x86_64_DICE_SL5"],dayOfWeek=[0,3,5],hour=03,minute=00),
    Nightly("sunday-nightly",["packages","archives","x86_DICE_FC13","x86_DICE_FC13_setup","coverage","SnowLeopard","x86_UbuntuLucid_setup","x86_64_UbuntuNattyServer"],dayOfWeek=6,hour=01,minute=00),

    Triggerable(name="test-archives",
                builderNames=["EPD7_rh5_x86_64","EPD7_Win7_x86_64"])
    )

######################################################################
######################################################################
