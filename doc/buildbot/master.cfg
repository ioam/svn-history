# -*- python -*-
# ex: set syntax=python:

import os

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [ BuildSlave("x86_ubuntu7.04","PWD",notify_on_missing="buildbot@topographica.org"),
                BuildSlave("sake","PWD",notify_on_missing="buildbot@topographica.org"),
                BuildSlave("x86_windowsXP","PWD") ]


c['slavePortnum'] = "tcp:9989"
# CB: change to 9989:interface=127.0.0.1
# to have connections from localhost only

### limit doozy and sake to 1 concurrent build each
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
sake_lock = locks.SlaveLock("sake",maxCount=1)




####### CHANGESOURCES

TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = SVNPoller(svnurl=TOPOROOT+"/trunk/topographica",
                               pollinterval=300)


####### SCHEDULERS

from buildbot.scheduler import Periodic,Nightly

periodic_tests = Periodic("periodic-tests",["linux_tests","mac_tests"], 8*60*60)
nightly_build = Nightly("nightly-build",["linux_build","mac_build"],hour=03,minute=00)
nightly_tests = Nightly("nightly-tests",["linux_slow-tests","mac_slow-tests"],hour=04,minute=00)
nightly_backup = Nightly("nightly-backup",["backups"],hour=02,minute=00)
nightly_comparison = Nightly("nightly-comparison",["V_lissom"],dayOfWeek=6,hour=01,minute=00)

c['schedulers'] = [periodic_tests,nightly_build,nightly_tests,nightly_backup,nightly_comparison]


####### BUILDERS

svnurl =  TOPOROOT+"/trunk/topographica"

builders = []

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand


### shortcuts to commands
make_clean = ("make","clean")
make_doc = ("make","doc")
make = ("make")
make_tests = ("make","tests")
make_lint_base = ("make","lint-base")
make_basic_gui_tests = ("make","basic-gui-tests")
make_detailed_gui_tests = ("make","detailed-gui-tests")
make_slow_tests = ("make","-k","slow-tests")
make_unopttrain_tests = ("make","-k","TESTWEAVE=0","TESTDP=4","train-tests")
make_snapshot_tests = ("make","snapshot-tests")
rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")
make_v_lissom = ("make","v_lissom")
analyse = ("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups()")
# CEBALERT: ideally analyse would use the buildbot slave copy of topographica and upload the file to the master
# rather than relying on another copy

### descriptions of commands (for waterfall display) 
descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_doc: ("make doc","documentation"),
    make_lint_base: (["checking","for","lint"],["lint","tests"]),
    make_tests: ("testing",["unit","tests"]),
    make_basic_gui_tests: (["testing","gui","(basic)"],["basic","gui","tests"]),
    make_detailed_gui_tests: (["testing","gui","(detailed)"],["detailed","gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_unopttrain_tests: (["testing","unoptimized","components"],['no','optimized','components']),
    make_snapshot_tests: (["testing","snapshots"],["snapshot","tests"]),
    rsync: (["rsync","svn"],["svn","rsync"]),
    make_v_lissom: (["c++","comparison"],["c++","comparison"]),
    analyse: (["analysing"],["analysis"])}


###############################################################################
### Convenience functions

def cvs_checkout(factory_,mode="update"):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True)

def add_command(factory_,command_,xvfb=True,halt_on_failure=False,timeout=1200):
    happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]

    if xvfb and not hasattr(factory_,'_NO_XVFB'):
        cmd = ["xvfb-run","-a"]
        if isinstance(command_,str):
            cmd.append(command_)
        else:
            cmd+=list(command_)
    else:
        cmd = command_
        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,
                     descriptionDone=finished_description,haltOnFailure=halt_on_failure,
                     timeout=timeout
                     )

def build(build_factory):
    """Add the 'svn checkout; make; make doc; make tests; make basic-gui-tests' suite to build_factory"""
    cvs_checkout(build_factory,mode="copy")
    add_command(build_factory,make_clean)
    add_command(build_factory,make,timeout=1*60*60,halt_on_failure=True)
    add_command(build_factory,make_doc)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_basic_gui_tests)

def tests(build_factory):
    """Add the 'svn update; make; make tests; make gui-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make,halt_on_failure=True,timeout=2400)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_basic_gui_tests,halt_on_failure=True)
    add_command(build_factory,make_detailed_gui_tests)

def slow_tests(build_factory):
    """Add the 'svn update; make; make slow-tests; make snapshot-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make,halt_on_failure=True,timeout=2400)
    add_command(build_factory,make_slow_tests)
    add_command(build_factory,make_snapshot_tests)
    add_command(build_factory,make_unopttrain_tests)

###############################################################################


### factories for linux tests, build, slowtests
standard_build = factory.BuildFactory()
build(standard_build)
# CB: could make current docs available on the web somewhere
# from buildbot.steps.transfer import FileUpload
# standard_build.addStep(FileUpload ...

standard_tests = factory.BuildFactory()
tests(standard_tests)
add_command(standard_tests,make_lint_base)

standard_slow_tests = factory.BuildFactory()
slow_tests(standard_slow_tests)
# linux slow-tests are analysed
add_command(standard_slow_tests,analyse,xvfb=False,timeout=180)


### factories for mac tests, build, slowtests
mac_build = factory.BuildFactory()
mac_build._NO_XVFB=True #CB: would be better to set no xvfb on the slave
build(mac_build)

mac_tests = factory.BuildFactory()
mac_tests._NO_XVFB=True
tests(mac_tests)

mac_slow_tests = factory.BuildFactory()
mac_slow_tests._NO_XVFB=True
slow_tests(mac_slow_tests)


### Windows tests
xp_tests = factory.BuildFactory()
xp_tests._NO_XVFB=True
cvs_checkout(xp_tests)
add_command(xp_tests,make_tests)


### builders for linux tests, build, slowtests
standard_build_builder = {'name': "linux_build",
      'slavename': "x86_ubuntu7.04",
      'builddir': "full_x86_ubuntu7.04",
      'factory': standard_build,
      'locks':[doozy_lock]
      }
standard_tests_builder = {'name': "linux_tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "tests_x86_ubuntu7.04",
      'factory': standard_tests,
      'locks':[doozy_lock]       
      }
standard_slowtests_builder = {'name': "linux_slow-tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "slow-tests_x86_ubuntu7.04",
      'factory': standard_slow_tests,
      'locks':[doozy_lock]
      }

### builders for mac tests, build, slowtests
mac_build_builder = {'name': "mac_build",
      'slavename': "sake",
      'builddir': "full_sake",
      'factory': mac_build,
      'locks':[sake_lock]
      }
mac_tests_builder = {'name': "mac_tests",
      'slavename': "sake",
      'builddir': "tests",
      'factory': mac_tests,
      'locks':[sake_lock]
      }
mac_slowtests_builder = {'name': "mac_slow-tests",
      'slavename': "sake",
      'builddir': "slow-tests",
      'factory': mac_slow_tests,
      'locks':[sake_lock]
      }

### builders for win
xp_tests_builder = {'name':'win_tests',
                    'slavename':'x86_windowsXP',
                    'builddir':'tests_x86_windowsXP',
                    'factory': xp_tests}





### svn backup
backup_factory = factory.BuildFactory()
add_command(backup_factory,rsync,xvfb=False)

# builder for svn backups
backup_builder = {'name': "backups",
      'slavename': "x86_ubuntu7.04",
      'builddir': "topographica_svnroot",
      'factory': backup_factory,
      'locks':[doozy_lock]
      }


### C++ comparisons
standard_compare_tests = factory.BuildFactory()
cvs_checkout(standard_compare_tests)
add_command(standard_compare_tests,make,halt_on_failure=True,timeout=2400)
add_command(standard_compare_tests,make_v_lissom,timeout=2*60*60)

# builders for c++ lissom comparisons
V_lissom = {'name': "V_lissom",
      'slavename': "x86_ubuntu7.04",
      'builddir': "compare_oo_or_x86_ubuntu7.04",
      'factory': standard_compare_tests,
      'locks':[doozy_lock]
      }





c['builders'] = [standard_tests_builder,standard_build_builder,standard_slowtests_builder,
                mac_tests_builder,mac_build_builder,mac_slowtests_builder,xp_tests_builder,V_lissom,backup_builder]


####### STATUS TARGETS

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@doozy.inf.ed.ac.uk",
                                     mode='problem',
                                     extraRecipients=["v1cball@inf.ed.ac.uk"],
                                     sendToInterestedUsers=False))


####### PROJECT IDENTITY

c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"
