# -*- python -*-
# ex: set syntax=python:

# CEBALERT: this file needs cleaning up. Problems stem from the fact that 
# even though I have been running buildbot for over a year, I can never
# remember the difference between builds, builders, factories, slaves,
# and so on. Plus I just copied old code each time to make new builders
# (slaves, factories, whatever). Many things could do with better names,
# but I'm scared of losing history (although that might now be ok, since
# we log some times for plotting).

# buildbot service on windows
# http://ascendwiki.cheme.cmu.edu/BuildBot

import os



######################################################################
####### CONVENIENCE FUNCTIONS & VARIABLES

c = BuildmasterConfig = {} # buildmaster reads this; c for convenience

from buildbot.buildslave import BuildSlave
def add_slave(name,pwd):
    """Add name/pwd to list of slaves"""
    c['slaves'].append(
        BuildSlave(name,pwd,
                   notify_on_missing="v1cball@inf.ed.ac.uk"))


def add_schedulers(*args):
    for a in args:
        c['schedulers'].append(a)

### various make commands
make_clean = ("make","clean")
make_pyc_clean = ("make","clean-pyc")
make_doc = ("make","doc")
make = ("make")
make_tests = ("make","tests")
make_lint_base = ("make","lint-base")
make_basic_gui_tests = ("make","basic-gui-tests")
make_detailed_gui_tests = ("make","detailed-gui-tests")
make_slow_tests = ("make","-k","slow-tests")
make_unopttrain_tests = ("make","-k","IMPORT_WEAVE=0","TESTDP=5","train-tests")
make_snapshot_tests = ("make","snapshot-tests")
rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")
make_compare_oo_or = ("make","compare_oo_or")
analyse = ("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups();write_page()")
# CEBALERT: ideally analyse would use the buildbot slave copy of topographica and upload the file to the master
# rather than relying on another copy
make_or_comparisons = ("make","or_comparisons")
#make_win_msys_patch = ("make","win-msys-patch")
#make_osx_tk_patch = ("make","osx-tk-patch")
make_build_win_exe = ("make","build-win-exe")
make_oo_or_comparisons = ("make","oo_or_comparisons")

### descriptions of commands (for waterfall display) 
descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_doc: ("make doc","documentation"),
    make_lint_base: (["checking","for","lint"],["lint","tests"]),
    make_tests: ("testing",["unit","tests"]),
    make_basic_gui_tests: (["testing","gui","(basic)"],["basic","gui","tests"]),
    make_detailed_gui_tests: (["testing","gui","(detailed)"],["detailed","gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_unopttrain_tests: (["testing","unoptimized","components"],['no','optimized','components']),
    make_snapshot_tests: (["testing","snapshots"],["snapshot","tests"]),
    rsync: (["rsync","svn"],["svn","rsync"]),
    make_compare_oo_or: (["c++","'oo_or'","comparison"],["c++","'oo_or'","comparison"]),
    analyse: (["analysing"],["analysis"]),
    make_or_comparisons: (["c++","'or'","comparisons"],["c++","'or'","comparisons"]),
    make_oo_or_comparisons: (["c++","'oo_or'","comparisons"],["c++","'oo_or'","comparisons"]),
    make_pyc_clean: (["removing","pyc","files"],["clean-pyc"]),
#    make_win_msys_patch: (["patching","for","msys"],["msys","patch"]),
#    make_osx_tk_patch: (["patching","for","tk"],["tk","patch"]),
    make_build_win_exe: (["building","win","exe"],["win","exe"])}



from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

def cvs_checkout(factory_,mode="update"):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True)

def add_command(factory_,command_,xvfb=True,halt_on_failure=False,timeout=1200,warn_on_failure=False,**args):
    happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]
    
    # ensure cmd is a list (to make simpler any necessary alterations to the command)
    if isinstance(command_,str):
        cmd = []
        cmd.append(command_)
    else:
        cmd = list(command_)

    if hasattr(factory_,'_NICE') and factory_._NICE is True:
        cmd.insert(0,"nice")

    if xvfb and not (hasattr(factory_,'_NO_XVFB') and factory_._NO_XVFB is True):
        cmd.insert(0,"xvfb-run")
        cmd.insert(1,"-a")
        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,
                     descriptionDone=finished_description,haltOnFailure=halt_on_failure,
                     timeout=timeout,warnOnFailure=warn_on_failure,**args)

def build(build_factory,patch=None):
    """Add the 'svn checkout; make; make doc; make tests; make basic-gui-tests' suite to build_factory"""
    cvs_checkout(build_factory,mode="copy")
    add_command(build_factory,make_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=1*60*60,halt_on_failure=True)
    add_command(build_factory,make_doc,warn_on_failure=True,flunkOnFailure=False,flunkOnWarnings=False,warnOnWarnings=True)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_basic_gui_tests)

def tests(build_factory,patch=None):
    """Add the 'svn update; make; make tests; make gui-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean,halt_on_failure=True)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,halt_on_failure=True,timeout=2400)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_basic_gui_tests,halt_on_failure=True)
    add_command(build_factory,make_detailed_gui_tests)

def slow_tests(build_factory,patch=None):
    """Add the 'svn update; make; make slow-tests; make snapshot-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean,halt_on_failure=True)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,halt_on_failure=True,timeout=2400)
    add_command(build_factory,make_slow_tests)
    add_command(build_factory,make_snapshot_tests)
    add_command(build_factory,make_unopttrain_tests)

def build_then_slowtests(build_factory,patch=None):
    """Full checkout, build, slow-tests"""
    cvs_checkout(build_factory,mode="clobber")
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=1*60*60,halt_on_failure=True)
    add_command(build_factory,make_doc,warn_on_failure=True,flunkOnFailure=False,flunkOnWarnings=False,warnOnWarnings=True)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_slow_tests)
    add_command(build_factory,make_snapshot_tests)
    add_command(build_factory,make_unopttrain_tests)


######################################################################
######################################################################








######################################################################
####### GENERAL

### SVN
TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"
svnurl =  TOPOROOT+"/trunk/topographica"

from buildbot.changes.svnpoller import SVNPoller
c['change_source']=SVNPoller(svnurl=svnurl,pollinterval=300)


### Connection
c['slavePortnum'] = "tcp:9989" # 9989:interface=127.0.0.1 for local only


### Status
c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@doozy.inf.ed.ac.uk",
                                     mode='problem',
                                     extraRecipients=["v1cball@inf.ed.ac.uk"],
                                     sendToInterestedUsers=False))

######################################################################
######################################################################




######################################################################
####### BUILDSLAVES (i.e. available machines)

c['slaves' ] = []

for n,p in [("x86_ubuntu7.04","passw"), # rename to doozy
            ("doozy","passw"),
            ("cider","passw"),
            ("light","passw"),
            ("lodestar","passw"),
            ("cloud","passw")]:
    add_slave(n,p)

# one build at a time on all machines
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
cider_lock = locks.SlaveLock("cider",maxCount=1)
lodestar_lock = locks.SlaveLock("lodestar",maxCount=1)
light_lock = locks.SlaveLock("light",maxCount=1)
cloud_lock = locks.SlaveLock("cloud",maxCount=1)

######################################################################
######################################################################



######################################################################
####### FACTORIES (i.e. different possible builds/tests)

from buildbot.process.factory import BuildFactory

### STANDARD (i.e. linux, really)
standard_build = BuildFactory()
build(standard_build)
standard_tests = BuildFactory()
tests(standard_tests)
add_command(standard_tests,make_lint_base)

standard_slow_tests = BuildFactory()
slow_tests(standard_slow_tests)
# doozy slow-tests are analysed
add_command(standard_slow_tests,analyse,xvfb=False,timeout=180)






### BACKUP
backup_factory = BuildFactory()
add_command(backup_factory,rsync,xvfb=False)


### C++ comparisons
standard_compare_tests = BuildFactory()
cvs_checkout(standard_compare_tests)
standard_compare_tests._NICE=True
add_command(standard_compare_tests,make,halt_on_failure=True,timeout=2400)
#add_command(standard_compare_tests,make_or_comparisons,timeout=2*60*60)
add_command(standard_compare_tests,make_oo_or_comparisons,timeout=2*60*60)



######################################################################
######################################################################




######################################################################
####### BUILDERS (i.e. slave+factory combinations)

builders = []

### doozy
# CEBALERT: rename to doozy_
standard_build_builder = {'name': "doozy_build",
      'slavename': "x86_ubuntu7.04",
      'builddir': "full_x86_ubuntu7.04",
      'factory': standard_build,
      'locks':[doozy_lock]
      }
standard_tests_builder = {'name': "doozy_tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "tests_x86_ubuntu7.04",
      'factory': standard_tests,
      'locks':[doozy_lock]       
      }
standard_slowtests_builder = {'name': "doozy_slow-tests",
      'slavename': "x86_ubuntu7.04",
      'builddir': "slow-tests_x86_ubuntu7.04",
      'factory': standard_slow_tests,
      'locks':[doozy_lock]
      }
backup_builder = {'name': "backups",
      'slavename': "x86_ubuntu7.04",
      'builddir': "topographica_svnroot",
      'factory': backup_factory,
      'locks':[doozy_lock]
      }
V_lissom = {'name': "reference",
      'slavename': "x86_ubuntu7.04",
      'builddir': "compare_oo_or_x86_ubuntu7.04",
      'factory': standard_compare_tests,
      'locks':[doozy_lock]
      }


#####################################################
x86_SL5 = {
    'name': "x86_SL5",
    'slavename': "lodestar",
    'builddir': "x86_SL5",
    'factory': BuildFactory(),
    'locks':[lodestar_lock]
    }    
x86_SL5['factory']._NICE=True
build_then_slowtests(x86_SL5['factory'])

x86_Ubuntu = {
    'name': "x86_Ubuntu8.04",
    'slavename': "doozy",
    'builddir': "x86_Ubuntu8.04",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
build_then_slowtests(x86_Ubuntu['factory'])

x86_Leopard = {
    'name': "x86_Leopard",
    'slavename': "cider",
    'builddir': "x86_Leopard",
    'factory': BuildFactory(),
    'locks':[cider_lock]
    }
x86_Leopard['factory']._NO_XVFB=True # CB: would be better to set no xvfb on the slave
build_then_slowtests(x86_Leopard['factory'])

x86_WinXP = {
    'name': "x86_WinXP",
    'slavename': "light",
    'builddir': "x86_WinXP",
    'factory': BuildFactory(),
    'locks':[light_lock]
    }

x86_WinXP['factory']._NO_XVFB=True
tests(x86_WinXP['factory'])
slow_tests(x86_WinXP['factory'])


c['builders'] = [x86_SL5,
                 x86_Ubuntu,
                 x86_Leopard,
                 x86_WinXP,
                 standard_tests_builder,standard_build_builder,standard_slowtests_builder,
                 V_lissom,backup_builder]

######################################################################
######################################################################



######################################################################
####### SCHEDULERS

from buildbot.scheduler import Periodic,Nightly

c['schedulers'] = []


add_schedulers(
    Periodic("periodic-tests",["doozy_tests"], 8*60*60),
    Nightly("nightly-build",["doozy_build","x86_Ubuntu8.04"],hour=03,minute=00),
    Nightly("texas-nightly",["x86_Leopard"],hour=9,minute=00),
    Nightly("nightly-tests",["doozy_slow-tests"],hour=04,minute=00),
    Nightly("trinightly",["x86_SL5","x86_WinXP"],dayOfWeek=[0,3,5],hour=03,minute=00),

    Nightly("nightly-backup",["backups"],hour=02,minute=00),

    Nightly("nightly-comparison",["reference"],dayOfWeek=6,hour=01,minute=00))

######################################################################
######################################################################
