# -*- python -*-
# ex: set syntax=python:

import os

######################################################################
####### CONFIGURATION VARIABLES & CONSIDERATIONS
#
# Likely to need changing if e.g. master moved, or certain slaves are changed.

# CEBALERT: should make this more user friendly.

MASTER_DIR = "/workspace/buildmaster2/master/"

# need to have this layout on the master
# MASTER_DIR/
#            public_html/ 
#                        doc/
#                        coverage/
#                                 unittests/
#                                 alltests/
#                                
#                        dist/
#                             exe/
#                             setup.py/
#                             rpm-source/
#                             deb-source/


MASTER = "fiver"

# for the slave running the create_pysource builder
create_pysource_python = "/usr/bin/env python2.6"
create_pysource_epydoc = "/usr/bin/epydoc"

# for the slave running the doc builder
doc_epydoc = "/usr/bin/epydoc"

# hmm
topographica_script = "./topographica"
runtests_script = "./topo/tests/runtests.py"

# CEBALERT: often not using a buildbot user, so we need an isolated
# "home" directory.
bb_fake_home = ".buildbot_fake_home/"
output_dir = "Documents/Topographica/"


######################################################################
####### PROJECT CONFIGURATION VARIABLES


# CEBALERT: any way to read this?
MAKEFILE_RELEASE = "0.9.7"
PRERELEASE = "0.9.8"

# the email address here must be reachable by the buildmaster
NOTIFICATION_EMAIL = "v1cball@inf.ed.ac.uk"

TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"
svnurl =  TOPOROOT+"/trunk/topographica"

PROJNAME = "Topographica"
PROJURL = "http://www.topographica.org/"
BBURL = "http://buildbot.topographica.org/"



######################################################################
####### CONVENIENCE FUNCTIONS & VARIABLES

c = BuildmasterConfig = {} # buildmaster reads this; c for convenience

from buildbot.buildslave import BuildSlave
def add_slave(name,pwd):
    """Add name/pwd to list of slaves"""
    c['slaves'].append(
        BuildSlave(name,pwd,
                   notify_on_missing=NOTIFICATION_EMAIL))


def add_schedulers(*args):
    for a in args:
        c['schedulers'].append(a)


def _is_list_or_tuple(thing):
    return isinstance(thing,tuple) or isinstance(thing,list)

def _as_list(thing):
    assert _is_list_or_tuple(thing)
    return list(thing)


# CEBALERT: (1) rename this command concept to something other than
# command (since that's used by buildbot already; we now have
# command['command']). (2) Rename "C". (3) Rename "dc".

C = {}

def dc(name,desc=None,comm=None):
    assert name not in C

    if desc is None:
        desc = name.split()
    if comm is None:
        comm = name.split()

    assert _is_list_or_tuple(desc)
    assert _is_list_or_tuple(comm)

    C[name] = dict(description=desc,
                   command = comm)


## yuck
def _insert_multiple_items(original,index,additions): 
    for a in additions[::-1]:
        original.insert(index,a)
        
def _runtestscmd(targets=None):
    if targets is None:
        cmd = [topographica_script,"-p","targets=['all']",runtests_script]
    else:
        cmd = [topographica_script,"-p","targets=%s"%targets,runtests_script]

    return cmd

######################################################################
####### Our commands (need to rename this; see earlier ALERT)

simple_commands = [
    "make clean",
    "make clean-pyc",
    "make doc",
    "make",
    "make lint-base",
    "make pyflakes",
    "make reference-manual",
    "make -C external coverage",
    "make clean-coverage-output",
    "make coverage-html",
    "make clean-coverage-html",
    "make compare_oo_or",
    "make or_comparisons",
    "make oo_or_comparisons",
    "make GUI=0"]

for com in simple_commands:
    dc(com)

# "PYTHON='/usr/bin/env python2.6'"
dc("make setup",comm=("make","PYTHON=/usr/bin/python","topographica-external-python")) # CEBALERT now this needs changing
dc("make topographica-external-python",comm=("make","PYTHON=/usr/bin/python","topographica-external-python"))
dc("plot performance",comm=("python","doc/buildbot/plot_performance.py"))
dc("rsync",comm=("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*","."))
# CEBALERT: ideally analyse would use the buildbot slave copy of
# topographica and upload the file to the master rather than relying
# on another copy. Also, it's currently broken anyway.
dc("analyse",comm=("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups();write_page()"))
dc("make dist",comm=("make","RELEASE=%s"%PRERELEASE,"dist"))
dc("make dist-pysource",comm=("make",'EPYDOC=%s'%create_pysource_epydoc,'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"dist-pysource"))
dc("make dist-pysource-sdist",comm=("make",'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"dist-pysource-sdist"))
dc("make dist-pysource-bdist_wininst",comm=("make",'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"dist-pysource-bdist_wininst"))
dc("make dist-clean",comm=("rm","-rf","../distributions"))
dc("make deb",comm=("make",'EPYDOC=%s'%create_pysource_epydoc,'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"deb"))
dc("make deb-backports",comm=("make",'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"deb-backports"))
dc("make rpm",comm=("make",'PYTHON=%s'%create_pysource_python,"RELEASE=%s"%PRERELEASE,"rpm"))
dc("untar",comm=("tar","--strip-components=1","-xvf","topographica-"+PRERELEASE+".tar.gz"))
dc("clean",comm=("rm","-rf","./*"))

dc("all speed tests",comm=_runtestscmd(["speed"]))
dc("all tests",comm=_runtestscmd())
dc("unit tests",comm=_runtestscmd(["unit"]))


from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

def cvs_checkout(factory_,mode="update",**args):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True,
                     retry=(10,2),
                     **args)


def add_command(factory_,command_,timeout=1200,
                haltOnFailure=True,flunkOnFailure=True,flunkOnWarnings=False,warnOnFailure=False,warnOnWarnings=True,
                coverage=False,
                **args):

    assert isinstance(command_,dict)

    happening_description = command_['description']
    finished_description = happening_description # can i remove this?

    cmd = _as_list(command_['command'])

    if coverage:
        _insert_multiple_items(cmd,1,["-p","coverage=True"])

    if hasattr(factory_,'_NICE') and factory_._NICE is True:
        cmd.insert(0,"nice")

    if hasattr(factory_,"_XVFB") and factory_._XVFB is True:
        _insert_multiple_items(cmd,0,("xvfb-run","-a"))

    factory_.addStep(ShellCommand,command=cmd,description=command_['description'],timeout=timeout,
                     descriptionDone=command_['description'], # CEBALERT: do I need this?
                     haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,flunkOnWarnings=flunkOnWarnings,
                     warnOnFailure=warnOnFailure,warnOnWarnings=warnOnWarnings,
                     **args)

def tests(build_factory):
    # CEBALERT: won't work on Windows until pyc clean is in python script
    add_command(build_factory,C["make clean-pyc"])
    add_command(build_factory,C["unit tests"],haltOnFailure=True)


#def slow_tests(build_factory):
#    # CEBALERT: as above about pyc
#    add_command(build_factory,C["make clean-pyc"])
#    add_command(build_factory,C["make slow-tests"],haltOnFailure=False)


# CEBALERT: NOT FIXED
def builddocs(build_factory,suppress_doc_warn=False,local=True,halt_at_failure=False):

    if local:
        raise NotImplementedError
    
    # CEBALERT: hack to support epydoc from system
    make_doc = dict(command=("make","EPYDOC=%s"%doc_epydoc,"doc"),
                    description=["make","doc"])

    make_reference_manual = dict(command=("make","EPYDOC=%s"%doc_epydoc,"doc"),
                                 description=["make","reference-manual"])

    if suppress_doc_warn:
        # For OS X, til we make doc building easy
        warnOnFailure=False
    else:
        warnOnFailure=True

    if halt_at_failure:
        flunkOnFailure=haltOnFailure=True
    else:
        flunkOnFailure=haltOnFailure=False

    add_command(build_factory,make_doc,warnOnFailure=warnOnFailure,flunkOnFailure=flunkOnFailure,haltOnFailure=haltOnFailure)
    add_command(build_factory,make_reference_manual,haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,warnOnFailure=warnOnFailure)


# CEB: confusing - can't have e.g. setup and gui be True
def build(build_factory,setup=False,gui=True,develop=False):

    if setup: # CEBALERT: need any more?
        add_command(build_factory,C["make setup"],haltOnFailure=True)
    elif develop:
        add_command(build_factory,C["make topographica-external-python"],haltOnFailure=True)
    else:

        if gui:
            mcommand = C["make"]
        else:
            mcommand = C["make GUI=0"]

        add_command(build_factory,mcommand,timeout=1*60*60,haltOnFailure=True)


######################################################################
######################################################################



######################################################################
####### GENERAL

### SVN

from buildbot.changes.svnpoller import SVNPoller
c['change_source']=SVNPoller(svnurl=svnurl,pollinterval=300)


### Connection
c['slavePortnum'] = "tcp:9989" # 9989:interface=127.0.0.1 for local only

### Status
c['projectName'] = PROJNAME
c['projectURL'] = PROJURL
c['buildbotURL'] = BBURL

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr=NOTIFICATION_EMAIL,
#                                     relayhost=
                                     mode='failing',
                                     extraRecipients=[NOTIFICATION_EMAIL],
                                     sendToInterestedUsers=False))
#
######################################################################
######################################################################




######################################################################
####### BUILDSLAVES (i.e. available machines)

c['slaves' ] = []

# CEBALERT: should store all simple local info (slave names,
# passwords, etc) in a separate file (that doesn't need to be checked
# in) and import it.
for n,p in [("doozy","PASSWD"),
#            ("jupiter3","PASSWD"),
            ("fiver","PASSWD"),
            ("cupertinovm","PASSWD"),
            ("shadyvm","PASSWD")
            ]:
    add_slave(n,p)

# CEBALERT: this version of BB (0.7) does not expand things like ~ on
# the slave.  If a future version does, should remove this and just
# use ~ in the HOME path. Or might be able to use $HOME even now; not
# sure.
slave_homes = dict(
    fiver = "/home/ceball/",
    doozy = "/home/ceball/",
#    jupiter3 = "/home/s0454615/",
    cupertinovm = "/Users/ceball/",
    shadyvm = "CEBALERT"
)

slave_bb_homes = dict([(k,v+bb_fake_home) for (k,v) in slave_homes.items()])
    

# one build at a time on all machines
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
fiver_lock = locks.SlaveLock("fiver",maxCount=1)
#jupiter3_lock = locks.SlaveLock("jupiter3",maxCount=1)
cupertino_lock = locks.SlaveLock("cupertino",maxCount=1)

######################################################################
######################################################################


######################################################################
####### BUILDERS

from buildbot.process.factory import BuildFactory

builders = []


def define_builder(name,slavename,locks,builddir=None,env=None,xvfb=False,nice=True):

    if env is None:
        env = {}
    env.update({'HOME':"%s/%s"%(slave_bb_homes[slavename],name)})

    if builddir is None:
        builddir = name

    builder = dict(name=name,slavename=slavename,builddir=builddir,factory=BuildFactory(),locks=locks,env=env)

    if xvfb:
        builder['factory']._XVFB=True

    if nice:
        builder['factory']._NICE=True

    return builder

backups = define_builder("backups","doozy",[doozy_lock],builddir="topographica_svnroot")
add_command(backups['factory'],C['rsync'])


##reference = {
##    'name': "reference",
##    'slavename': "doozy",
##    'builddir': "reference",
##    'factory': BuildFactory(),
##    'locks':[doozy_lock]
##    }
##cvs_checkout(reference['factory'])
##reference['factory']._NICE=True
##add_command(reference['factory'],make,timeout=2400)
###add_command(reference['factory'],make_or_comparisons,timeout=2*60*60)
##add_command(reference['factory'],make_oo_or_comparisons,timeout=2*60*60)
##


# CEBALERT: missing developer style install builder (e.g. make, or make topographica-external-python)

# CEBALERT: there's no "no X" buildslave any more. Usually no X checks
# are to ensure people using clusters etc can build & run
# topographica. Often such systems have old versions of libraries and
# packages, too.

from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import WithProperties

def add_targz_download_extract(factory):
    add_command(factory,C["clean"])     

    factory.addStep(FileDownload(mastersrc=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(revision)s.tar.gz"),
                                 slavedest="topographica-"+PRERELEASE+".tar.gz"))
                    #haltOnFailure=True,flunkOnFailure=True)

    add_command(factory,C["untar"])
                #haltOnFailure=True,flunkOnFailure=True)



# CEBALERT: will need to simplify for windows; consider tox
def setuppy_install(factory,python_path):
    comm = dict(command=(python_path,"setup.py","install","--prefix=./local/"),
                description=["setup.py","install"])
    add_command(factory,comm)
                #haltOnFailure=True,flunkOnFailure=True)

# CEBALERT: will need to simplify for windows; consider tox
def setuppy_tests(factory,pyver="2.7"):

    # CEBALERT: ${PATH} expansion not supported until newer version of
    # buildbot (0.8?).  Remove ./local/bin/ when upgrading.

    # all tests
    comm = dict(command=("./local/bin/topographica","-p","targets=['all']","-c","import topo.tests.runtests as R; R.start()"),
                description=['all','tests'])

    add_command(factory,comm,
                env= {#"PATH":"./local/bin:${PATH}",
                      "PYTHONPATH":"./local/lib/python%s/site-packages/"%pyver})
    

def define_epd_builder(name,slave,lock,ppath):
    builder = define_builder(name,slave,lock)
    add_targz_download_extract(builder['factory'])
    setuppy_install(builder['factory'],ppath)
    setuppy_tests(builder['factory'],pyver="2.7") # CEBALERT: pyver
    return builder

EPD7_rh5_x86_64 = define_epd_builder("epd_free-7.2.2-rh5-x86_64","doozy",[doozy_lock],
                                     "/scratch/ceball/epd_free-7.2.2-rh5-x86_64/bin/python") # CEBALERT

EPD7_macosx_i386 = define_epd_builder("epd_free-7.2.2-macosx-i386","cupertinovm",[cupertino_lock],
                                      "/Library/Frameworks/Python.framework/Versions/7.2/bin/python") # CEBALERT

EPD7_win_x86 = define_epd_builder("epd_free-7.2.2-win-x86","shadyvm",[doozy_lock],
                                  "/oh/no/windows/path") # CEBALERT

from buildbot.steps.transfer import DirectoryUpload
docs = define_builder("docs",MASTER,[fiver_lock]) # CEBALERT: master lock
cvs_checkout(docs['factory'],mode="clobber")
build(docs['factory'],setup=True)
tests(docs['factory'])
builddocs(docs['factory'],local=False,halt_at_failure=True)
# Make doc available on web
docs['factory'].addStep(DirectoryUpload(slavesrc="doc",masterdest=MASTER_DIR+"/public_html/doc"))

from buildbot.steps.master import MasterShellCommand
coverage = define_builder("coverage",MASTER,[fiver_lock]) # CEBALERT: master lock
cvs_checkout(coverage['factory'],mode="copy")
add_command(coverage['factory'],C["make clean-pyc"])
build(coverage['factory'])
add_command(coverage['factory'],C["make -C external coverage"],flunkOnFailure=True,haltOnFailure=True)
add_command(coverage['factory'],C["make clean-coverage-output"],flunkOnFailure=True,haltOnFailure=True)

# CEBALERT: hack to default dir; depends on allowing easy override
coverage_output_path = slave_bb_homes['fiver']+"/coverage/"+output_dir
slave_coverage_html = coverage_output_path + "/tests/coverage_html/" 
master_coverage_html = MASTER_DIR + "/public_html/coverage/"  

## unit tests
add_command(coverage['factory'],C["unit tests"],haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],C["make coverage-html"],flunkOnFailure=True,haltOnFailure=True)
coverage['factory'].addStep(MasterShellCommand(command="""rm -rf %s/unittests"""%master_coverage_html))
coverage['factory'].addStep(DirectoryUpload(slavesrc=slave_coverage_html,masterdest="%s/unittests"%master_coverage_html))

## ... + all tests
add_command(coverage['factory'],C["all tests"],haltOnFailure=False,flunkOnFailure=False,coverage=True)
add_command(coverage['factory'],C["make clean-coverage-html"],haltOnFailure=True,flunkOnFailure=True)
add_command(coverage['factory'],C["make coverage-html"],flunkOnFailure=True,haltOnFailure=True)
coverage['factory'].addStep(MasterShellCommand(command="""rm -rf %s/alltests"""%master_coverage_html))
coverage['factory'].addStep(DirectoryUpload(slavesrc=slave_coverage_html,masterdest="%s/alltests"%master_coverage_html))

# CEB: for gui coverage, would need to override doc/buildbot/coveragerc option to igore topo/tkgui


performance = define_builder("performance",'doozy',[doozy_lock],xvfb=True,nice=False)
cvs_checkout(performance['factory'],mode="clobber")
build(performance['factory'])
add_command(performance['factory'],C["make clean-pyc"])
add_command(performance['factory'],C["make lint-base"],haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
add_command(performance['factory'],C["make pyflakes"],haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
add_command(performance['factory'],C["all tests"],haltOnFailure=True,flunkOnFailure=True)
add_command(performance['factory'],C["all speed tests"],haltOnFailure=True,flunkOnFailure=True)
##add_command(performance['factory'],analyse,xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
#add_command(performance['factory'],C["plot performance"],xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)


# CEBALERT: do we still have a test for pyc files left around?



from buildbot.steps.transfer import FileUpload
#from buildbot.process.properties import WithProperties

create_pysource = define_builder("create-pysource","fiver",[fiver_lock],xvfb=True)
cvs_checkout(create_pysource['factory'],mode="clobber")
build(create_pysource['factory'],setup=True)
tests(create_pysource['factory'])
add_command(create_pysource['factory'],C["make dist-clean"])
add_command(create_pysource['factory'],C["make dist-pysource"])
add_command(create_pysource['factory'],C["make dist-pysource-sdist"])
add_command(create_pysource['factory'],C["make dist-pysource-bdist_wininst"])
#add_command(create_pysource['factory'],make_dist_setup_msi) # CEBALERT: msi allows silent install, but bdist_msi missing other options!
add_command(create_pysource['factory'],C["make rpm"]) 

create_pysource['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/setup.py/topographica-"+PRERELEASE+"~r%(got_revision)s.tar.gz")))

create_pysource['factory'].addStep(FileUpload(
    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
    masterdest=WithProperties("public_html/dist/exe/topographica-"+PRERELEASE+"~r%(got_revision)s.win.exe")))

create_pysource['factory'].addStep(FileUpload(
    slavesrc=WithProperties("../distributions/topographica-"+PRERELEASE+"/dist/topographica-"+PRERELEASE+"-r%(got_revision)s.src.rpm"),
    masterdest=WithProperties("public_html/dist/rpm-source/topographica-"+PRERELEASE+"-r%(got_revision)s.src.rpm")))

##### current versions (e.g. for build services)
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.tar.gz"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".tar.gz")))
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.srpm"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".srpm")))
##
##create_pysource['factory'].addStep(FileUpload(
##    slavesrc="../distributions/topographica-%s/dist/topographica-%s.win.exe"%(PRERELEASE,PRERELEASE),
##    masterdest=WithProperties("public_html/dist/current/topographica-"+PRERELEASE+".win.exe")))

# Might need this:
# osc rebuildpac home:ceball:topographica-unstable


from buildbot.steps import trigger
create_pysource['factory'].addStep(trigger.Trigger(schedulerNames=['test-pysource'],
                                            waitForFinish=False))

#create_pysource['factory'].addStep(trigger.Trigger(schedulerNames=['packages'],
#                                            waitForFinish=False))


#create_deb = define_builder("create-source-deb","fiver",[fiver_lock])
#build(create_deb['factory'],mode="update")
#cvs_checkout(create_deb['factory'],mode="clobber")
#add_command(create_deb['factory'],C["make dist-clean"])

add_command(create_pysource['factory'],C["make deb"])
add_command(create_pysource['factory'],C["make deb-backports"])

debsrcpath = "../distributions/"
debdestpath = "public_html/dist/deb-source/"
# CEBALERT: duplicates list in Makefile
for distribution in ['oneiric','natty','maverick','lucid']:
    fname = "topographica_"+PRERELEASE+"~r%(got_revision)s-0ubuntu0~"+distribution

    create_pysource['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s.tar.gz"%fname),
        masterdest=WithProperties(debdestpath+"%s.tar.gz"%fname)))

    create_pysource['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s.dsc"%fname),
        masterdest=WithProperties(debdestpath+"%s.dsc"%fname)))

    create_pysource['factory'].addStep(FileUpload(
        slavesrc=WithProperties(debsrcpath+"%s_source.changes"%fname),
        masterdest=WithProperties(debdestpath+"%s_source.changes"%fname)))



c['builders'] = [

#### (almost continuous-)CI
                 performance,
                 coverage,
                 #reference,
                 docs,

#### test user install of pysource
                 EPD7_rh5_x86_64,
                 EPD7_win_x86,
                 EPD7_macosx_i386,

#### create pysource, deb, rpm, etc
                 create_pysource,
#                 create_deb,

#### repo backup
                 backups]




######################################################################
####### SCHEDULERS

from buildbot.scheduler import Nightly,Periodic,Triggerable

c['schedulers'] = []

# CEBALERT: added in quickly for buildbot upgrade; didn't think
# about it.
branch="trunk"
add_schedulers(
    Nightly("nightly",["performance"],branch=branch,hour=04,minute=00),
    Nightly("nightly-backup",["backups"],branch=branch,hour=02,minute=00),
    Nightly("one-in-3-nightly",["coverage","docs"],branch=branch,dayOfWeek=[0,3,5],hour=03,minute=00),
    Nightly("sunday-nightly",["create-pysource"],branch=branch,dayOfWeek=6,hour=01,minute=00),
    Triggerable(name="test-pysource",
                builderNames=["epd_free-7.2.2-rh5-x86_64","epd_free-7.2.2-macosx-i386","epd_free-7.2.2-win-x86"]),
#    Triggerable(name="packages",
#                builderNames=["create-source-deb"])
    )

######################################################################
######################################################################

