# -*- python -*-
# ex: set syntax=python:

# buildbot service on windows
# http://ascendwiki.cheme.cmu.edu/BuildBot

import os

######################################################################
####### CONVENIENCE FUNCTIONS & VARIABLES

c = BuildmasterConfig = {} # buildmaster reads this; c for convenience

from buildbot.buildslave import BuildSlave
def add_slave(name,pwd):
    """Add name/pwd to list of slaves"""
    c['slaves'].append(
        BuildSlave(name,pwd,
                   notify_on_missing="v1cball@inf.ed.ac.uk"))


def add_schedulers(*args):
    for a in args:
        c['schedulers'].append(a)

### various make commands
make_clean = ("make","clean")
make_pyc_clean = ("make","clean-pyc")
make_doc = ("make","doc")
make = ("make")
make_tests = ("make","tests")
make_lint_base = ("make","lint-base")
make_basic_gui_tests = ("make","basic-gui-tests")
make_detailed_gui_tests = ("make","detailed-gui-tests")
make_slow_tests = ("make","-k","slow-tests")
make_unopttrain_tests = ("make","-k","IMPORT_WEAVE=0","TESTDP=5","train-tests")
make_snapshot_tests = ("make","snapshot-tests")
rsync = ("rsync","-av","topographica.svn.sourceforge.net::svn/topographica/*",".")
make_compare_oo_or = ("make","compare_oo_or")
analyse = ("/home/ceball/topographica/topographica/topographica","/home/ceball/topographica/topographica/doc/buildbot/bbanalysis.py","-c","update_timings();plot_timings();plot_startups();write_page()")
# CEBALERT: ideally analyse would use the buildbot slave copy of topographica and upload the file to the master
# rather than relying on another copy
make_or_comparisons = ("make","or_comparisons")
#make_win_msys_patch = ("make","win-msys-patch")
#make_osx_tk_patch = ("make","osx-tk-patch")
make_build_win_exe = ("make","build-win-exe")
make_oo_or_comparisons = ("make","oo_or_comparisons")
make_dist = ("make","dist")
make_dist_setup = ("make","dist-setup.py")
make_dist__clean = ("rm","-rf","/home/buildbot/buildslave/archives/distributions")

### descriptions of commands (for waterfall display) 
descriptions = {
    make_clean: ("cleaning","clean"),
    make: ("building","build"),
    make_doc: ("make doc","documentation"),
    make_lint_base: (["checking","for","lint"],["lint","tests"]),
    make_tests: ("testing",["unit","tests"]),
    make_basic_gui_tests: (["testing","gui","(basic)"],["basic","gui","tests"]),
    make_detailed_gui_tests: (["testing","gui","(detailed)"],["detailed","gui","tests"]),
    make_slow_tests: (["performance","testing"],["performance","tests"]),
    make_unopttrain_tests: (["testing","unoptimized","components"],['no','optimized','components']),
    make_snapshot_tests: (["testing","snapshots"],["snapshot","tests"]),
    rsync: (["rsync","svn"],["svn","rsync"]),
    make_compare_oo_or: (["c++","'oo_or'","comparison"],["c++","'oo_or'","comparison"]),
    analyse: (["analysing"],["analysis"]),
    make_or_comparisons: (["c++","'or'","comparisons"],["c++","'or'","comparisons"]),
    make_oo_or_comparisons: (["c++","'oo_or'","comparisons"],["c++","'oo_or'","comparisons"]),
    make_pyc_clean: (["removing","pyc","files"],["clean-pyc"]),
#    make_win_msys_patch: (["patching","for","msys"],["msys","patch"]),
#    make_osx_tk_patch: (["patching","for","tk"],["tk","patch"]),
    make_build_win_exe: (["building","win","exe"],["win","exe"]),
    make_dist: (["generating","source","distribution"],["source","distribution"]),
    make_dist_setup: (["generating","setup.py","distribution"],["setup.py","distribution"]),
    make_dist__clean: (["removing","distributions","dir"],["delete","distributions","dir"])}



from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

def cvs_checkout(factory_,mode="update"):
    factory_.addStep(SVN,
                     svnurl=svnurl,
                     mode=mode,
                     haltOnFailure=True,
                     retry=(10,2))

def add_command(factory_,command_,xvfb=True,timeout=1200,
                haltOnFailure=True,flunkOnFailure=True,flunkOnWarnings=False,warnOnFailure=False,warnOnWarnings=True,
                **args):
    happening_description,finished_description = descriptions[command_][0],descriptions[command_][1]
    
    # ensure cmd is a list (to make simpler any necessary alterations to the command)
    if isinstance(command_,str):
        cmd = []
        cmd.append(command_)
    else:
        cmd = list(command_)

    if hasattr(factory_,'_NICE') and factory_._NICE is True:
        cmd.insert(0,"nice")

    if xvfb and not (hasattr(factory_,'_NO_XVFB') and factory_._NO_XVFB is True):
        cmd.insert(0,"xvfb-run")
        cmd.insert(1,"-a")
        
    factory_.addStep(ShellCommand,command=cmd,description=happening_description,timeout=timeout,
                     descriptionDone=finished_description,
                     haltOnFailure=haltOnFailure,flunkOnFailure=flunkOnFailure,flunkOnWarnings=flunkOnWarnings,
                     warnOnFailure=warnOnFailure,warnOnWarnings=warnOnWarnings,
                     **args)

def build(build_factory,patch=None,mode="copy"):
    """Add the 'svn checkout; make; make doc; make tests; make basic-gui-tests' suite to build_factory"""
    cvs_checkout(build_factory,mode=mode)
    add_command(build_factory,make_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=1*60*60)
    add_command(build_factory,make_doc,warnOnFailure=True,flunkOnFailure=False,haltOnFailure=False)
    add_command(build_factory,make_tests)
    add_command(build_factory,make_basic_gui_tests)

def tests(build_factory,patch=None):
    """Add the 'svn update; make; make tests; make gui-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=2400)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests)
    add_command(build_factory,make_detailed_gui_tests)

def slow_tests(build_factory,patch=None):
    """Add the 'svn update; make; make slow-tests; make snapshot-tests' suite to build_factory"""
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=2400)
    add_command(build_factory,make_slow_tests,haltOnFailure=False)
    add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
    add_command(build_factory,make_unopttrain_tests,haltOnfailure=False)

def build_then_slowtests(build_factory,patch=None):
    """Full checkout, build, slow-tests"""
    cvs_checkout(build_factory,mode="clobber")
    if patch:
        add_command(build_factory,patch)
    add_command(build_factory,make,timeout=1*60*60,halt_on_failure=True)
    add_command(build_factory,make_doc,warnOnFailure=True,flunkOnFailure=False,haltOnFailure=False)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_detailed_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_slow_tests,haltOnFailure=False)
    add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
    add_command(build_factory,make_unopttrain_tests)


def wintests(build_factory):
    cvs_checkout(build_factory)
    add_command(build_factory,make_pyc_clean)
    add_command(build_factory,make_tests,haltOnFailure=False)
    add_command(build_factory,make_basic_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_detailed_gui_tests,haltOnFailure=False)
    add_command(build_factory,make_slow_tests,timeout=3600,haltOnFailure=False)
    add_command(build_factory,make_snapshot_tests,haltOnFailure=False)
    add_command(build_factory,make_unopttrain_tests,timeout=3600,haltOnFailure=False)


######################################################################
######################################################################



######################################################################
####### GENERAL

### SVN
TOPOROOT = "https://topographica.svn.sourceforge.net/svnroot/topographica"
svnurl =  TOPOROOT+"/trunk/topographica"

from buildbot.changes.svnpoller import SVNPoller
c['change_source']=SVNPoller(svnurl=svnurl,pollinterval=300)


### Connection
c['slavePortnum'] = "tcp:9989" # 9989:interface=127.0.0.1 for local only


### Status
c['projectName'] = "Topographica"
c['projectURL'] = "http://www.topographica.org/"
c['buildbotURL'] = "http://buildbot.topographica.org/"

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@doozy.inf.ed.ac.uk",
                                     mode='problem',
                                     extraRecipients=["v1cball@inf.ed.ac.uk"],
                                     sendToInterestedUsers=False))

######################################################################
######################################################################




######################################################################
####### BUILDSLAVES (i.e. available machines)

c['slaves' ] = []

for n,p in [("doozy","passwd"),
            ("cider","passwd"),
            ("light","passwd"),
            ("lodestar","passwd"),
            ("cloud","passwd"),
            ("sunny","passwd")]:
    add_slave(n,p)

# one build at a time on all machines
from buildbot import locks
doozy_lock = locks.SlaveLock("doozy",maxCount=1)
cider_lock = locks.SlaveLock("cider",maxCount=1)
lodestar_lock = locks.SlaveLock("lodestar",maxCount=1)
light_lock = locks.SlaveLock("light",maxCount=1)
cloud_lock = locks.SlaveLock("cloud",maxCount=1)
fiver_lock = locks.SlaveLock("fiver",maxCount=1)

######################################################################
######################################################################


######################################################################
####### BUILDERS

from buildbot.process.factory import BuildFactory

builders = []

backups = {
    'name': "backups",
    'slavename': "doozy",
    'builddir': "topographica_svnroot",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
add_command(backups['factory'],rsync,xvfb=False)


reference = {
    'name': "reference",
    'slavename': "doozy",
    'builddir': "reference",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
cvs_checkout(reference['factory'])
reference['factory']._NICE=True
add_command(reference['factory'],make,timeout=2400)
#add_command(reference['factory'],make_or_comparisons,timeout=2*60*60)
add_command(reference['factory'],make_oo_or_comparisons,timeout=2*60*60)


x86_SL5 = {
    'name': "x86_SL5",
    'slavename': "lodestar",
    'builddir': "x86_SL5",
    'factory': BuildFactory(),
    'locks':[lodestar_lock]
    }    
x86_SL5['factory']._NICE=True
build_then_slowtests(x86_SL5['factory'])

x86_Ubuntu = {
    'name': "x86_Ubuntu8.04",
    'slavename': "doozy",
    'builddir': "x86_Ubuntu8.04",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
build_then_slowtests(x86_Ubuntu['factory'])

x86_Leopard = {
    'name': "x86_Leopard",
    'slavename': "cider",
    'builddir': "x86_Leopard",
    'factory': BuildFactory(),
    'locks':[cider_lock]
    }
x86_Leopard['factory']._NO_XVFB=True # CB: would be better to set no xvfb on the slave
build_then_slowtests(x86_Leopard['factory'])

x86_WinXP = {
    'name': "x86_WinXP",
    'slavename': "light",
    'builddir': "x86_WinXP",
    'factory': BuildFactory(),
    'locks':[doozy_lock,light_lock]
    }
x86_WinXP['factory']._NO_XVFB=True
wintests(x86_WinXP['factory'])

performance = {
    'name':"performance",
    'slavename':'cloud',
    'builddir':"performance",
    'factory':BuildFactory(),
    'locks':[cloud_lock]
    }
slow_tests(performance['factory'])
add_command(performance['factory'],make_lint_base,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)
#add_command(performance['factory'],analyse,xvfb=False,timeout=180,haltOnFailure=False,flunkOnFailure=False,warnOnFailure=True)

x86_Ubuntu1 = {
    'name': "x86_Ubuntu9.04",
    'slavename': "sunny",
    'builddir': "x86_Ubuntu9.04",
    'factory': BuildFactory(),
    'locks':[fiver_lock]
    }

build_then_slowtests(x86_Ubuntu1['factory'])



from buildbot.steps.transfer import FileUpload
#from buildbot.process.properties import WithProperties
from buildbot.steps.shell import WithProperties
     
archives = {
    'name': "archives",
    'slavename': "doozy",
    'builddir': "archives",
    'factory': BuildFactory(),
    'locks':[doozy_lock]
    }
build(archives['factory'],mode="update")

add_command(archives['factory'],make_dist__clean)

# make dist, and upload
add_command(archives['factory'],make_dist)
# CEBALERT: how to get 0.9.6, etc?
archives['factory'].addStep(FileUpload(slavesrc="../distributions/topographica-0.9.6.tar.gz",
                                       masterdest=WithProperties("public_html/dist/src/topographica-0.9.6-r%(got_revision)s.tar.gz")))
archives['factory'].addStep(FileUpload(slavesrc="../distributions/topographica-0.9.6.zip",
                                       masterdest=WithProperties("public_html/dist/src/topographica-0.9.6-r%(got_revision)s.zip")))

# make dist-setup.py, and upload
add_command(archives['factory'],make_dist_setup)

archives['factory'].addStep(FileUpload(slavesrc="../distributions/topographica-0.9.6.tar.gz",
                                       masterdest=WithProperties("public_html/dist/bin/Topographica-0.9.6-r%(got_revision)s.tar.gz")))

archives['factory'].addStep(FileUpload(slavesrc="../distributions/topographica-0.9.6-examples.tar.gz",
                                       masterdest=WithProperties("public_html/dist/bin/Topographica-0.9.6-r%(got_revision)s-examples.tar.gz")))

archives['factory'].addStep(FileUpload(slavesrc="../distributions/topographica-0.9.6-doc.tar.gz",
                                       masterdest=WithProperties("public_html/dist/bin/Topographica-0.9.6-r%(got_revision)s-doc.tar.gz")))





c['builders'] = [x86_SL5,
                 x86_Ubuntu,
                 x86_Ubuntu1,
                 x86_Leopard,
                 x86_WinXP,
                 performance,
                 reference,
                 backups,
                 archives]

######################################################################
######################################################################



######################################################################
####### SCHEDULERS

from buildbot.scheduler import Nightly

c['schedulers'] = []

add_schedulers(
    Nightly('workday', ['performance'],hour=[15], minute=00),
    Nightly("nightly-build",["x86_Ubuntu8.04","x86_Ubuntu9.04"],hour=03,minute=00),
    Nightly("nightly-backup",["backups"],hour=02,minute=00),
    Nightly("nightly-archive",["archives"],hour=05,minute=00),
    Nightly("texas-nightly",["x86_Leopard"],hour=9,minute=00),
    Nightly("one-in-3-nightly",["x86_SL5","x86_WinXP"],dayOfWeek=[0,3,5],hour=03,minute=00),
    Nightly("sunday-nightly",["reference"],dayOfWeek=6,hour=01,minute=00))

######################################################################
######################################################################
